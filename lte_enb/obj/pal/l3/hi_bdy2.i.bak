# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 21 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envopt.h" 1
# 22 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h" 1
# 172 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef void *Ptr;
# 773 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef unsigned char Bool;


typedef char S8;




typedef unsigned char U8;

typedef short S16;
typedef unsigned short U16;


typedef long S32;
typedef unsigned long U32;





__extension__ typedef long long S64;
__extension__ typedef unsigned long long U64;
# 814 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef float F32;
typedef double F64;
# 831 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef void Void;



typedef S8 (*PFS8) (void );
typedef S16 (*PFS16) (void );
typedef S32 (*PFS32) (void );
typedef Void (*PFVOID) (void );
typedef Void ( *PIF) (void );
# 1850 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef U32 MFTYPE;




typedef S8 *ARGTYPE;
# 23 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envind.h" 1
# 24 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.h" 1
# 26 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.h" 1
# 1918 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.h"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 1
# 46 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 21 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 364 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 415 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 416 "/usr/include/sys/cdefs.h" 2 3 4
# 365 "/usr/include/features.h" 2 3 4
# 388 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4






# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 22 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 27 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4



# 30 "/usr/include/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 122 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 28 "/usr/include/bits/byteswap.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4






# 1 "/usr/include/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/bits/byteswap.h" 2 3 4
# 44 "/usr/include/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 28 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
typedef unsigned int size_t;
# 29 "/usr/include/sched.h" 2 3 4





# 1 "/usr/include/time.h" 1 3 4
# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 35 "/usr/include/sched.h" 2 3 4


typedef __pid_t pid_t;





# 1 "/usr/include/bits/sched.h" 1 3 4
# 73 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));


extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));











struct __sched_param
  {
    int __sched_priority;
  };
# 119 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 202 "/usr/include/bits/sched.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 44 "/usr/include/sched.h" 2 3 4







extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));



# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 88 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 25 "/usr/include/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));


# 42 "/usr/include/time.h" 2 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 222 "/usr/include/time.h" 2 3 4

extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));






extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 25 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;
# 81 "/usr/include/bits/pthreadtypes.h" 3 4
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;





typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;





    int __kind;
# 111 "/usr/include/bits/pthreadtypes.h" 3 4
    unsigned int __nusers;
    __extension__ union
    {
      struct
      {
 short __espins;
 short __elision;



      } __elision_data;
      __pthread_slist_t __list;
    };

  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
# 202 "/usr/include/bits/pthreadtypes.h" 3 4
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    signed char __rwelision;

    unsigned char __pad2;
    int __writer;
  } __data;

  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4
# 35 "/usr/include/bits/setjmp.h" 3 4
typedef int __jmp_buf[6];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 114 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 155 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 190 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 228 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 494 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 506 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 540 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 680 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1)));
# 692 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  __attribute__ ((__regparm__ (1)));
# 715 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1)));
# 728 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  __attribute__ ((__regparm__ (1)));



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1))) __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 806 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 888 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1000 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1044 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1111 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2)
{
  return __thread1 == __thread2;
}



# 47 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/usr/include/semaphore.h" 1 3 4
# 22 "/usr/include/semaphore.h" 3 4
# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;
# 104 "/usr/include/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 136 "/usr/include/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 147 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 22 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;
# 47 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/time.h" 1 3 4
# 48 "/usr/include/sys/select.h" 2 3 4
# 56 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 66 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 98 "/usr/include/sys/select.h" 3 4

# 108 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 120 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/bits/select2.h" 1 3 4
# 24 "/usr/include/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 131 "/usr/include/sys/select.h" 2 3 4



# 220 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}


# 223 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 273 "/usr/include/sys/types.h" 3 4

# 23 "/usr/include/semaphore.h" 2 3 4






# 1 "/usr/include/bits/semaphore.h" 1 3 4
# 23 "/usr/include/bits/semaphore.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/semaphore.h" 2 3 4
# 36 "/usr/include/bits/semaphore.h" 3 4
typedef union
{
  char __size[16];
  long int __align;
} sem_t;
# 30 "/usr/include/semaphore.h" 2 3 4






extern int sem_init (sem_t *__sem, int __pshared, unsigned int __value)
     __attribute__ ((__nothrow__ , __leaf__));

extern int sem_destroy (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__));


extern sem_t *sem_open (const char *__name, int __oflag, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int sem_close (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__));


extern int sem_unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__));





extern int sem_wait (sem_t *__sem);






extern int sem_timedwait (sem_t *__restrict __sem,
     const struct timespec *__restrict __abstime);



extern int sem_trywait (sem_t *__sem) __attribute__ ((__nothrow__));


extern int sem_post (sem_t *__sem) __attribute__ ((__nothrow__));


extern int sem_getvalue (sem_t *__restrict __sem, int *__restrict __sval)
     __attribute__ ((__nothrow__ , __leaf__));



# 48 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 110 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 166 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 167 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 207 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 229 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 254 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 264 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 297 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 465 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 524 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 552 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 563 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 596 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 642 "/usr/include/stdio.h" 3 4

# 651 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 667 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 728 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 739 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);

# 775 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 794 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 817 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));








extern void perror (const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 856 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 874 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 935 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio.h" 1 3 4
# 43 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 936 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/stdio2.h" 1 3 4
# 23 "/usr/include/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...)

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 241 "/usr/include/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == 
# 373 "/usr/include/bits/stdio2.h"
             (-1)
# 373 "/usr/include/bits/stdio2.h" 3 4
                )
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 939 "/usr/include/stdio.h" 2 3 4






# 49 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm5.h" 1
# 50 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.h" 1
# 51 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2

# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 272 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 368 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 599 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 627 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/string.h" 1 3 4
# 628 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/bits/string2.h" 1 3 4
# 62 "/usr/include/bits/string2.h" 3 4
extern void *__rawmemchr (const void *__s, int __c);
# 193 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strtok_r_1c (char *__s, char __sep, char **__nextp);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strtok_r_1c (char *__s, char __sep, char **__nextp)
{
  char *__result;
  if (__s == ((void *)0))
    __s = *__nextp;
  while (*__s == __sep)
    ++__s;
  __result = ((void *)0);
  if (*__s != '\0')
    {
      __result = __s++;
      while (*__s != '\0')
 if (*__s++ == __sep)
   {
     __s[-1] = '\0';
     break;
   }
    }
  *__nextp = __s;
  return __result;
}
# 225 "/usr/include/bits/string2.h" 3 4
extern char *__strsep_g (char **__stringp, const char *__delim);
# 243 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_1c (char **__s, char __reject);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_1c (char **__s, char __reject)
{
  char *__retval = *__s;
  if (__retval != ((void *)0) && (*__s = (__extension__ (__builtin_constant_p (__reject) && !__builtin_constant_p (__retval) && (__reject) == '\0' ? (char *) __rawmemchr (__retval, __reject) : __builtin_strchr (__retval, __reject)))) != ((void *)0))
    *(*__s)++ = '\0';
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_2c (char **__s, char __reject1, char __reject2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_2c (char **__s, char __reject1, char __reject2)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_3c (char **__s, char __reject1, char __reject2,
       char __reject3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}
# 319 "/usr/include/bits/string2.h" 3 4
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4


# 425 "/usr/include/stdlib.h" 3 4


extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

# 934 "/usr/include/stdlib.h" 3 4

# 320 "/usr/include/bits/string2.h" 2 3 4




extern char *__strdup (const char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
# 343 "/usr/include/bits/string2.h" 3 4
extern char *__strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
# 631 "/usr/include/string.h" 2 3 4




# 1 "/usr/include/bits/string3.h" 1 3 4
# 49 "/usr/include/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memmove (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 77 "/usr/include/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memset (void *__dest, int __ch, size_t __len)
{
# 90 "/usr/include/bits/string3.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bcopy (const void *__src, void *__dest, size_t __len)
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bzero (void *__dest, size_t __len)
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) __asm__ ("" "stpncpy") __attribute__ ((__nothrow__ , __leaf__))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpncpy (char *__dest, const char *__src, size_t __n)
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcat (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 636 "/usr/include/string.h" 2 3 4
# 656 "/usr/include/string.h" 3 4

# 53 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2

# 1 "/usr/include/sys/socket.h" 1 3 4
# 24 "/usr/include/sys/socket.h" 3 4


# 1 "/usr/include/sys/uio.h" 1 3 4
# 25 "/usr/include/sys/uio.h" 3 4



# 1 "/usr/include/bits/uio.h" 1 3 4
# 43 "/usr/include/bits/uio.h" 3 4
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 56 "/usr/include/bits/uio.h" 3 4



extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


# 29 "/usr/include/sys/uio.h" 2 3 4
# 39 "/usr/include/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
# 50 "/usr/include/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
# 65 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
# 77 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
   __off_t __offset) __attribute__ ((__warn_unused_result__));
# 103 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));
# 115 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset) __attribute__ ((__warn_unused_result__));




# 27 "/usr/include/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 29 "/usr/include/sys/socket.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 32 "/usr/include/sys/socket.h" 2 3 4






# 1 "/usr/include/bits/socket.h" 1 3 4
# 27 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 28 "/usr/include/bits/socket.h" 2 3 4





typedef __socklen_t socklen_t;




# 1 "/usr/include/bits/socket_type.h" 1 3 4
# 24 "/usr/include/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/bits/socket.h" 2 3 4
# 167 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 168 "/usr/include/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 183 "/usr/include/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 295 "/usr/include/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) struct cmsghdr *
__attribute__ ((__nothrow__ , __leaf__)) __cmsg_nxthdr (struct msghdr *__mhdr, struct cmsghdr *__cmsg)
{
  if ((size_t) __cmsg->cmsg_len < sizeof (struct cmsghdr))

    return (struct cmsghdr *) 0;

  __cmsg = (struct cmsghdr *) ((unsigned char *) __cmsg
          + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1)));
  if ((unsigned char *) (__cmsg + 1) > ((unsigned char *) __mhdr->msg_control
     + __mhdr->msg_controllen)
      || ((unsigned char *) __cmsg + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1))
   > ((unsigned char *) __mhdr->msg_control + __mhdr->msg_controllen)))

    return (struct cmsghdr *) 0;
  return __cmsg;
}




enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 368 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4



# 1 "/usr/include/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/asm/sockios.h" 2 3 4
# 5 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/asm/socket.h" 2 3 4
# 369 "/usr/include/bits/socket.h" 2 3 4
# 402 "/usr/include/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 39 "/usr/include/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 90 "/usr/include/sys/socket.h" 3 4
typedef union { struct sockaddr *__restrict __sockaddr__; struct sockaddr_at *__restrict __sockaddr_at__; struct sockaddr_ax25 *__restrict __sockaddr_ax25__; struct sockaddr_dl *__restrict __sockaddr_dl__; struct sockaddr_eon *__restrict __sockaddr_eon__; struct sockaddr_in *__restrict __sockaddr_in__; struct sockaddr_in6 *__restrict __sockaddr_in6__; struct sockaddr_inarp *__restrict __sockaddr_inarp__; struct sockaddr_ipx *__restrict __sockaddr_ipx__; struct sockaddr_iso *__restrict __sockaddr_iso__; struct sockaddr_ns *__restrict __sockaddr_ns__; struct sockaddr_un *__restrict __sockaddr_un__; struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __SOCKADDR_ARG __attribute__ ((__transparent_union__));


typedef union { const struct sockaddr *__restrict __sockaddr__; const struct sockaddr_at *__restrict __sockaddr_at__; const struct sockaddr_ax25 *__restrict __sockaddr_ax25__; const struct sockaddr_dl *__restrict __sockaddr_dl__; const struct sockaddr_eon *__restrict __sockaddr_eon__; const struct sockaddr_in *__restrict __sockaddr_in__; const struct sockaddr_in6 *__restrict __sockaddr_in6__; const struct sockaddr_inarp *__restrict __sockaddr_inarp__; const struct sockaddr_ipx *__restrict __sockaddr_ipx__; const struct sockaddr_iso *__restrict __sockaddr_iso__; const struct sockaddr_ns *__restrict __sockaddr_ns__; const struct sockaddr_un *__restrict __sockaddr_un__; const struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __CONST_SOCKADDR_ARG __attribute__ ((__transparent_union__));





struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__ , __leaf__));


extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));


extern int getsockname (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));
# 137 "/usr/include/sys/socket.h" 3 4
extern int connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);



extern int getpeername (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, __CONST_SOCKADDR_ARG __addr,
         socklen_t __addr_len);
# 174 "/usr/include/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, __SOCKADDR_ARG __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);







extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);







extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);







extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);






extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__ , __leaf__));




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__ , __leaf__));





extern int listen (int __fd, int __n) __attribute__ ((__nothrow__ , __leaf__));
# 243 "/usr/include/sys/socket.h" 3 4
extern int accept (int __fd, __SOCKADDR_ARG __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, __SOCKADDR_ARG __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 261 "/usr/include/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__ , __leaf__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__ , __leaf__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/bits/socket2.h" 1 3 4
# 23 "/usr/include/bits/socket2.h" 3 4
extern ssize_t __recv_chk (int __fd, void *__buf, size_t __n, size_t __buflen,
      int __flags);
extern ssize_t __recv_alias (int __fd, void *__buf, size_t __n, int __flags) __asm__ ("" "recv")
                          ;
extern ssize_t __recv_chk_warn (int __fd, void *__buf, size_t __n, size_t __buflen, int __flags) __asm__ ("" "__recv_chk")


     __attribute__((__warning__ ("recv called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recv (int __fd, void *__buf, size_t __n, int __flags)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __recv_chk (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags);

      if (__n > __builtin_object_size (__buf, 0))
 return __recv_chk_warn (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags);
    }
  return __recv_alias (__fd, __buf, __n, __flags);
}

extern ssize_t __recvfrom_chk (int __fd, void *__restrict __buf, size_t __n,
          size_t __buflen, int __flags,
          __SOCKADDR_ARG __addr,
          socklen_t *__restrict __addr_len);
extern ssize_t __recvfrom_alias (int __fd, void *__restrict __buf, size_t __n, int __flags, __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len) __asm__ ("" "recvfrom")


                                                   ;
extern ssize_t __recvfrom_chk_warn (int __fd, void *__restrict __buf, size_t __n, size_t __buflen, int __flags, __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len) __asm__ ("" "__recvfrom_chk")




     __attribute__((__warning__ ("recvfrom called with bigger length than size of " "destination buffer")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recvfrom (int __fd, void *__restrict __buf, size_t __n, int __flags,
   __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __recvfrom_chk (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags,
          __addr, __addr_len);
      if (__n > __builtin_object_size (__buf, 0))
 return __recvfrom_chk_warn (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags,
        __addr, __addr_len);
    }
  return __recvfrom_alias (__fd, __buf, __n, __flags, __addr, __addr_len);
}
# 281 "/usr/include/sys/socket.h" 2 3 4



# 55 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 22 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 48 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 2 3 4
# 23 "/usr/include/netinet/in.h" 2 3 4







typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/bits/in.h" 1 3 4
# 141 "/usr/include/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 211 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];

 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];

      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 239 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };



struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 376 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 388 "/usr/include/netinet/in.h" 2 3 4
# 503 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) __attribute__ ((__nothrow__ , __leaf__));


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     __attribute__ ((__nothrow__ , __leaf__));
# 533 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));



extern socklen_t inet6_rth_space (int __type, int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_reverse (const void *__in, void *__out) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_segments (const void *__bp) __attribute__ ((__nothrow__ , __leaf__));
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     __attribute__ ((__nothrow__ , __leaf__));





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));



# 56 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1919 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.h" 2
# 27 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2



# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.h" 1
# 31 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_llist.h" 1
# 32 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.h" 1
# 34 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.h" 1
# 21 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.h"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.h" 1
# 22 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.h" 2
# 35 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2





# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.h" 1
# 41 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.h" 1
# 42 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.h" 1
# 43 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_err.h" 1
# 44 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2




# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x" 1
# 115 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"

# 115 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef S8 Txt;

typedef U8 Ent;

typedef U8 Inst;

typedef struct entityId
{
   Ent ent;
   Inst inst;
} EntityId;



typedef S16 Elmnt;

typedef S16 ElmntInst1;

typedef S16 ElmntInst2;

typedef S16 ElmntInst3;

typedef struct elmntId
{
   Elmnt elmnt;
   ElmntInst1 elmntInst1;
   ElmntInst2 elmntInst2;
   ElmntInst3 elmntInst3;
} ElmntId;

typedef U8 Region;

typedef U8 Pool;

typedef U8 Prior;

typedef Prior Priority;

typedef U8 Route;

typedef U8 Data;

typedef U8 Selector;

typedef S16 Reason;

typedef U16 ProcId;

typedef U8 Event;

typedef U32 TranId;

typedef S16 IntNum;

typedef U16 TranNum;

typedef U16 CmIntfId;
typedef U16 CmIntfVer;
# 183 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct pst
{
   ProcId dstProcId;
   ProcId srcProcId;

   Ent dstEnt;
   Inst dstInst;
   Ent srcEnt;
   Inst srcInst;

   Prior prior;
   Route route;
   Event event;
   Region region;

   Pool pool;
   Selector selector;
   CmIntfVer intfVer;
} Pst;



typedef struct systemId
{
   S16 mVer;
   S16 mRev;
   S16 bVer;
   S16 bRev;
   Txt *ptNmb;
} SystemId;





typedef struct protAddr
{
   U16 protType;
   U8 len;
   U8 preLen;
   U8 address[16];





}ProtAddr;

typedef struct protAddrTbl
{
   U8 count;
   ProtAddr addr[4];
}ProtAddrTbl;



typedef struct addrs
{
   U8 length;
   U8 strg[20];
} Addrs;

typedef struct shrtAddr
{
   U8 length;
   U8 strg[32];
} ShrtAddrs;

typedef struct lngAddr
{
   U8 length;
   U8 strg[64];
} LngAddrs;



typedef struct bndCfg
{
   Txt *usrId;
   U8 bufOwnshp;
   U8 flcTyp;
   U8 wdw;
   Ent ent;
   Inst inst;
   Region region;
   Pool pool;
   Prior prior;
   Route route;
   Addrs sapAdr;
   Selector selector;
} BndCfg;
# 288 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct tskInit
{



   Ent ent;
   Inst inst;
   Region region;
   Pool pool;
   Reason reason;
   Bool cfgDone;
   Bool acnt;
   Bool usta;
   Bool trc;

   U32 dbgMask;
   Txt prntBuf[255];

   Txt *prntCirBuf;




   BndCfg lmBnd;
   ProcId procId;
   Pst lmPst;
# 325 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
} TskInit;


typedef S32 Cntr;

typedef U32 StsCntr;

typedef S16 LnkNmb;

typedef S8 VBit;

typedef S16 SuId;

typedef S16 SpId;

typedef S16 SuInstId;

typedef S16 SpInstId;

typedef U16 PortId;

typedef U8 Sapi;

typedef U8 Tei;

typedef U8 Ces;

typedef U32 Dlci;

typedef U16 CalRef;

typedef S16 Origin;

typedef U16 NwId;

typedef S16 Swtch;

typedef U8 Cause;

typedef U8 Dgn;

typedef S16 Action;

typedef S16 SeqS16;

typedef U16 SeqU16;

typedef S32 SeqS24;

typedef U32 SeqU24;

typedef U8 SetUpArb;

typedef U8 EvntType;

typedef U8 State;

typedef U8 Mode;

typedef S32 ConnId;

typedef U32 UConnId;

typedef U16 ProtId;

typedef U16 ChannelId;

typedef U8 Arr64U8[64];

typedef U16 Efa;

typedef U32 BitState;

typedef U8 CChanId;

typedef U16 MibOpCode;


typedef U16 MibStatus;

typedef U16 MibTblType;

typedef S32 MibReqId;

typedef U8 UstaType;
typedef S8 ChannelNo;
# 501 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef S16 Baud;

typedef S16 PhysIntType;

typedef S16 PathConnType;

typedef S16 Parity;

typedef S16 CharLength;

typedef S16 StopBits;



typedef U32 IpAddr;

typedef U16 Port;

typedef U8 Cmd;

typedef U8 Flags;

typedef U8 Ttl;

typedef U8 Prec;

typedef U32 Window;

typedef U8 MtpStatus;

typedef U8 Credit;



typedef U32 CirId;

typedef U16 Cic;

typedef U32 SiInstId;



typedef U32 BiInstId;



typedef U32 TpInstId;



typedef U32 Oui;
typedef U16 Pid;
typedef U32 LlcId;
# 716 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct octStrg
{
   S32 length;
   U8 val[132];
} OctStrg;

typedef struct tknHdr
{
   U8 pres;
   U8 spare1;
   U16 spare2;



} TknHdr;

typedef struct elmtHdr
{
   U8 pres;
   U8 actnInd;
   U16 compInd;



} ElmtHdr;



typedef struct tknU8
{
   U8 pres;
   U8 val;
   U16 spare1;



} TknU8;

typedef struct tknS8
{
   U8 pres;
   S8 val;
   U16 spare1;



} TknS8;

typedef struct tknU16
{
   U8 pres;
   U8 spare1;
   U16 val;



} TknU16;

typedef struct tknU32
{
   U8 pres;
   U8 spare1;
   U16 spare2;
   U32 val;
} TknU32;

typedef struct tknS32
{
   U8 pres;
   U8 spare1;
   U16 spare2;
   S32 val;
} TknS32;

typedef struct tknStrS
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(22 + 3) & 0xffc];

} TknStrS;

typedef struct tknStrM
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(32 + 3) & 0xffc];

} TknStrM;

typedef struct tknStr
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(132 + 3) & 0xffc];

} TknStr;

typedef struct tknStrE
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(255 + 3) & 0xffc];

} TknStrE;

typedef struct tknStrXL
{
   U16 len;
   U8 pres;
   U8 spare1;



   U8 *val;
} TknStrXL;

typedef struct tknStr4
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[4];

} TknStr4;

typedef struct tknStr12
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[12];

} TknStr12;

typedef struct tknStr32
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[32];
} TknStr32;

typedef struct tknStr64
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[64];
} TknStr64;

typedef struct tknStr132
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[132];

} TknStr132;

typedef struct tknStr256
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[256];
} TknStr256;

typedef struct tknOid
{
   U8 pres;
   U8 len;
   U16 spare1;






   U32 val[32];



} TknOid;

typedef struct tknBits
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(7 + 3) & 0xffc];

} TknBits;

typedef struct elmtStr
{
   ElmtHdr eh;
   TknStr str;
} ElmtStr;

typedef struct cdPtyNmb
{
   ElmtHdr eh;
   TknU8 nmbPlanId;
   TknU8 typeNmb0;



   TknStrS nmbDigits;

} CdPtyNmb;

typedef struct redirNmb
{
   ElmtHdr eh;
   TknU8 nmbPlanId;
   TknU8 typeNmb;
   TknU8 screenInd;
   TknU8 presInd;
   TknU8 rsnRedirect;
   TknStrS nmbDigits;
} RedirNmb;

typedef struct srvClass
{
   U8 type;
   union
   {
      struct
      {
         Bool cr;
         Bool de;
      } fr;
      struct
      {
         Prior prior;
      } ma;
   } s;
} SrvClass;



typedef struct _ip
{
   U8 ip_hl;
   Prec ip_tos;
   U16 ip_len;
   U16 ip_id;
   U16 ip_off;
   Ttl ip_ttl;
   U8 ip_p;
   U16 ip_sum;
   IpAddr ip_src;
   IpAddr ip_dst;
} Ip;
# 1518 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct smCfg
{
   Ent ent;
   Inst inst;
   Region region;
   Pool pool;
   Priority prior;
   Route route;
   Selector selector;
} SmCfg;

typedef struct mem
{
   Region region;
   Pool pool;
   U16 spare;
} Mem;

typedef Mem MemoryId;


typedef struct resp
{
   Selector selector;
   Priority prior;
   Route route;
   MemoryId mem;
}Resp;

typedef struct tds_header
{
   U16 msgLen;
   U8 msgType;
   U8 version;
   U16 seqNmb;
   EntityId entId;
   ElmntId elmId;

   TranId transId;
   Resp response;

} Header;

typedef struct tmrCfg
{
   Bool enb;
   U16 val;
} TmrCfg;

typedef struct asyncCfg
{
   StopBits stopBits;
   CharLength charLength;
   Parity rxParity;
   Parity txParity;
} AsyncCfg;




typedef struct dateTime
{
   U8 month;
   U8 day;
   U8 year;
   U8 hour;
   U8 min;
   U8 sec;
   U8 tenths;




} DateTime;


typedef U64 EpcTime;


typedef struct cmStatus
{
   U16 status;
   U16 reason;
}CmStatus;


typedef struct cmAlarm
{
   DateTime dt;
   U16 category;
   U16 event;
   U16 cause;
}CmAlarm;



typedef struct duration
{
   U8 days;
   U8 hours;
   U8 mins;
   U8 secs;
   U8 tenths;
} Duration;
# 1630 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct ssmsgb Buffer;
# 1655 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct tknBuf
{
   U8 pres;
   U8 spare1;
   U16 spare2;



   Buffer *val;
} TknBuf;



typedef U32 CmIpAddr;







extern S16 cmPkDateTime (DateTime *dateTime, Buffer *mBuf);
extern S16 cmPkDuration (Duration *duration, Buffer *mBuf);
extern S16 cmPkPtr (U32 ptr, Buffer *mBuf);
extern S16 cmPkEntityId (EntityId *entityId, Buffer *mBuf);
extern S16 cmPkElmntId (ElmntId *elmntId, Buffer *mBuf);
extern S16 cmPkMemoryId (MemoryId *memoryId, Buffer *mBuf);


extern S16 cmPkSystemId (SystemId *systemId, Buffer *mBuf);
extern S16 cmPkAddrs (Addrs *addrs, Buffer *mBuf);
extern S16 cmPkProtAddr (ProtAddr *protAddr, Buffer *mBuf);
extern S16 cmPkProtAddrTbl (ProtAddrTbl *protAddr, Buffer *mBuf);
extern S16 cmPkShrtAddrs (ShrtAddrs *addrs, Buffer *mBuf);
extern S16 cmPkAddrMask (U8 *mask, Buffer *mBuf);
extern S16 cmPkBndCfg (BndCfg *bndCfg, Buffer *mBuf);
extern S16 cmPkPst (Pst *pst, Buffer *mBuf);
extern S16 cmPkElmtHdr (ElmtHdr *m, Buffer *mBuf);
extern S16 cmPkTknU8 (TknU8 *tknU8, Buffer *mBuf);
extern S16 cmPkTknS8 (TknS8 *tknS8, Buffer *mBuf);
extern S16 cmPkTknU16 (TknU16 *tknU16, Buffer *mBuf);
extern S16 cmPkTknU32 (TknU32 *tknU32, Buffer *mBuf);
extern S16 cmPkTknStr (TknStr *tknStr, Buffer *mBuf);
extern S16 cmPkTknStrM (TknStrM *tknStr, Buffer *mBuf);
extern S16 cmPkTknStrS (TknStrS *tknStr, Buffer *mBuf);
extern S16 cmPkTknStrE (TknStrE *tknStr, Buffer *mBuf);

extern S16 cmPkTknStr4 (TknStr4 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr12 (TknStr12 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr32 (TknStr32 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr64 (TknStr64 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr132 (TknStr132 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr256 (TknStr256 *tknStr, Buffer *mBuf);

 S16 cmPkTknS32 (TknS32 *tknS32, Buffer *mBuf);
 S16 cmPkTknOid (TknOid *tknOid, Buffer *mBuf);
 S16 cmPkTknBuf (TknBuf *tknBuf, Buffer *mBuf);






extern S16 cmPkHeader (Header *header, Buffer *mBuf);
extern S16 cmPkSmCfg (SmCfg *smCfg, Buffer *mBuf);
extern S16 cmPkTmrCfg (TmrCfg *tmrCfg, Buffer *mBuf);
extern S16 cmPkCmStatus (CmStatus *status, Buffer *mBuf);
extern S16 cmPkCmAlarm (CmAlarm *alrm, Buffer *mBuf);





extern S16 cmUnpkDateTime (DateTime *dateTime, Buffer *mBuf);
extern S16 cmUnpkDuration (Duration *duration, Buffer *mBuf);
extern S16 cmUnpkPtr (U32 *ptr, Buffer *mBuf);
extern S16 cmUnpkEntityId (EntityId *entityId, Buffer *mBuf);
extern S16 cmUnpkElmntId (ElmntId *elmntId, Buffer *mBuf);
extern S16 cmUnpkMemoryId (MemoryId *memoryId, Buffer *mBuf);


extern S16 cmUnpkSystemId (SystemId *systemId, Buffer *mBuf);
extern S16 cmUnpkAddrs (Addrs *addrs, Buffer *mBuf);
extern S16 cmUnpkProtAddr (ProtAddr *protAddr, Buffer *mBuf);
extern S16 cmUnpkProtAddrTbl (ProtAddrTbl *protAddr, Buffer *mBuf);
extern S16 cmUnpkShrtAddrs (ShrtAddrs *addrs, Buffer *mBuf);
extern S16 cmUnpkAddrMask (U8 *mask, Buffer *mBuf);
extern S16 cmUnpkBndCfg (BndCfg *bndCfg, Buffer *mBuf);
extern S16 cmUnpkPst (Pst *pst, Buffer *mBuf);
extern S16 cmUnpkElmtHdr (ElmtHdr *m, Buffer *mBuf);
extern S16 cmUnpkTknU8 (TknU8 *tknU8, Buffer *mBuf);
extern S16 cmUnpkTknS8 (TknS8 *tknS8, Buffer *mBuf);
extern S16 cmUnpkTknU16 (TknU16 *tknU16, Buffer *mBuf);
extern S16 cmUnpkTknU32 (TknU32 *tknU32, Buffer *mBuf);
extern S16 cmUnpkTknStr (TknStr *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStrM (TknStrM *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStrS (TknStrS *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStrE (TknStrE *tknStr, Buffer *mBuf);

extern S16 cmUnpkTknStr4 (TknStr4 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr12 (TknStr12 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr32 (TknStr32 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr64 (TknStr64 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr132 (TknStr132 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr256 (TknStr256 *tknStr, Buffer *mBuf);

 S16 cmUnpkTknS32 (TknS32 *tknS32, Buffer *mBuf);
 S16 cmUnpkTknOid (TknOid *tknOid, Buffer *mBuf);
 S16 cmUnpkTknBuf (TknBuf *tknBuf, Buffer **mBuf);






extern S16 cmUnpkHeader (Header *header, Buffer *mBuf);
extern S16 cmUnpkSmCfg (SmCfg *smCfg, Buffer *mBuf);
extern S16 cmUnpkTmrCfg (TmrCfg *tmrCfg, Buffer *mBuf);
extern S16 cmUnpkCmStatus (CmStatus *status, Buffer *mBuf);
extern S16 cmUnpkCmAlarm (CmAlarm *alrm, Buffer *mBuf);
# 49 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x" 1
# 81 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 Status;

typedef U32 Ticks;




typedef S16 MsgLen;


typedef S16 Order;




typedef U32 Size;
typedef S32 PtrOff;


typedef U32 QLen;

typedef QLen BufQLen;

typedef S16 RegSize;

typedef S16 DPoolSize;

typedef U16 Random;

typedef S16 Seq;

typedef U32 CoreId;


typedef U32 ErrCls;

typedef U32 ErrCode;

typedef U32 ErrVal;

typedef S16 VectNmb;

typedef S16 Ttype;

typedef S8 Sema;
# 742 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 msOptInd;
extern S8 *msOptArg;
extern Txt **msArgv;
extern S16 msArgc;




typedef U8 SSTskId;




typedef S32 SSTskPrior;
# 765 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
struct ssmsgb
{
   S8 refCnt;
   struct ssmsgb *b_next;
   struct ssmsgb *b_prev;
   struct ssmsgb *b_cont;
   U8 *b_rptr;
   U8 *b_wptr;
   struct ssdatab *b_datap;
};


typedef struct ssQueue
{
   Buffer *head;
   Buffer *tail;
   QLen crntSize;

} Queue;



typedef struct sMemCtl
{
   U8 op;

   union
   {
      struct
      {
         Data *vaddr;
         Data **paddr;
      } vtop;

      struct
      {
         Size size;
         Status *status;
      } chkres;
   } u;

} SMemCtl;
# 831 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 (*SsAlloc) (Void *, Size *, U32, Data **);





typedef S16 (*SsFree) (Void *, Data *, Size);

typedef S16 (*SsCtl) (Void *, Event, SMemCtl *);




typedef struct sRegInfo
{
   Void *regCb;
   U32 flags;




   Data *start;
   Size size;
   SsAlloc alloc;
   SsFree free;
   SsCtl ctl;

} SRegInfo;
# 879 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x" 1
# 39 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm5.x" 1
# 29 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm5.x"
typedef struct cmTimer
{
   S16 tmrEvnt;
   U32 tqExpire;
   U32 cb;
   struct cmTimer *next;
   struct cmTimer *prev;
   U8 ent2bUpd;

   U16 entIdx;
} CmTimer;

typedef struct cmTqCp
{
   U32 nxtEnt;
   U32 tmrLen;
   CmTimer *tmp;
} CmTqCp;

typedef struct cmTqType
{
   CmTimer *first;
   CmTimer *tail;
} CmTqType;

typedef struct cmTmrArg
{
   CmTqCp *tqCp;
   CmTqType *tq;
   CmTimer *timers;
   U32 cb;
   S16 evnt;
   U32 wait;
   U8 tNum;
   U8 max;
} CmTmrArg;




typedef Void (*PFV) (U32, S16);

extern Void cmInitTimers (CmTimer* timers, U8 max);
extern Void cmPlcCbTq (CmTmrArg* arg);
extern Void cmRmvCbTq (CmTmrArg* arg);
extern Void cmPrcTmr (CmTqCp* tqCp, CmTqType* tq, PFV func);
extern Void cmRstCbTq (CmTmrArg* arg);
# 40 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.x" 1
# 32 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.x"
typedef S8 SsdTTskEntry;



typedef struct ssdSTskEntry
{
   pthread_t tId;
   Ent ent;
   Inst inst;
   pthread_mutex_t lock;


   U32 lwpId;

} SsdSTskEntry;




typedef struct ssdDrvrTskEntry
{
   Bool flag;

} SsdDrvrTskEntry;




typedef struct ssdTmrEntry
{
   CmTimer timers[1];

} SsdTmrEntry;



typedef S8 SsdDPoolEntry;



typedef S8 SsdSPoolEntry;



typedef S8 SsdPoolEntry;



typedef S8 SsdRegionEntry;





typedef struct ssdOs
{
   unsigned randSeed;

   Ticks sysTicks;

   pthread_t tmrHdlrTID;
   CmTqCp tmrTqCp;
   CmTqType tmrTq[45];

   sem_t ssStarted;

   FILE *conInFp;
   FILE *conOutFp;
   pthread_t conHdlrTID;



   FILE *fileOutFp;



   pthread_t isTskHdlrTID;
   int isFildes[2];

   Bool sigEvnt;

} SsdOs;


typedef struct mtBktCfg
{
   Size blkSize;
   U32 numBlks;
} MtBktCfg;

typedef struct mtRegCfg
{
   Region regionId;
   U16 numBkts;
   Size heapsize;
   MtBktCfg bkt[5];
} MtRegCfg;

typedef struct mtMemCfg
{
   U8 numRegions;
   MtRegCfg region[8];
} MtMemCfg;
# 153 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.x"
extern U32 gt[128];
# 41 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x" 2
# 880 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x" 2
# 918 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 (*PAIFS16) (Ent ent,Inst inst,Region region,Reason reason );





typedef S16 (*PAIFTMRS16) (Ent ent, Inst inst);
# 940 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 (*PATFS16) (Prior prior,Route route,Ent ent,Inst inst,Buffer *mBuf);



typedef S16 (*ActvTsk) (Pst *pst, Buffer *mBuf);

typedef struct uProc UProc;

typedef void (*ISTsk) (Inst inst);




struct uProc
{
   Inst inst;
   ProcId low;
   ProcId high;
   ActvTsk actvTsk;
   U16 isFlag;
   ISTsk isTsk;
};






extern S16 SChekMemUtilization (Region region,Bool *memAlarm);

extern Void prntMem (Data *strtAdr,S16 len);
extern Void prntMsg (Buffer *mBuf);
extern Void prntMsg1 (Buffer *mBuf,S16 src,S16 dst);
extern S16 tst (void );
extern S16 rdConQ (Data data);

extern S16 SPkS8 (S8 val,Buffer *mBuf);
extern S16 SPkU8 (U8 val,Buffer *mBuf);
extern S16 SPkS16 (S16 val,Buffer *mBuf);
extern S16 SPkU16 (U16 val,Buffer *mBuf);
extern S16 SPkS32 (S32 val,Buffer *mBuf);
extern S16 SPkU32 (U32 val,Buffer *mBuf);


extern S16 SPkF32 (F32 val,Buffer *mBuf);
extern S16 SPkF64 (F64 val,Buffer *mBuf);

extern S16 SUnpkS8 (S8 *val,Buffer *mBuf);
extern S16 SUnpkU8 (U8 *val,Buffer *mBuf);
extern S16 SUnpkS16 (S16 *val,Buffer *mBuf);
extern S16 SUnpkU16 (U16 *val,Buffer *mBuf);
extern S16 SUnpkS32 (S32 *val,Buffer *mBuf);
extern S16 SUnpkU32 (U32 *val,Buffer *mBuf);


extern S16 SUnpkF32 (F32 *val,Buffer *mBuf);
extern S16 SUnpkF64 (F64 *val,Buffer *mBuf);

extern S16 SPrint (Txt *buf);
extern S16 SDisplay (S16 chan,Txt *buf);
extern S16 SPrntMsg (Buffer *mBuf,S16 src,S16 dst);
extern S16 SInitQueue (Queue *q);

extern S16 SQueueFirst (Buffer *buf,Queue *q);
extern S16 SQueueLast (Buffer *buf,Queue *q);
extern S16 SDequeueFirst (Buffer * *bufPtr,Queue *q);
extern S16 SDequeueLast (Buffer * *bufPtr,Queue *q);

extern S16 SFlushQueue (Queue *q);
extern S16 SCatQueue (Queue *q1,Queue *q2,Order order);
extern S16 SFndLenQueue (Queue *q,QLen *lngPtr);
extern S16 SExamQueue (Buffer **bufPtr,Queue *q,QLen idx);
extern S16 SAddQueue (Buffer *buf,Queue *q,QLen idx);
extern S16 SRemQueue (Buffer **bufPtr,Queue *q,QLen idx);
# 1029 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetDBuf (Region region,Pool pool,Buffer * *bufPtr);
extern S16 SPutDBuf (Region region,Pool pool,Buffer *buf);
# 1046 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SPutMsgToRegion (Region region, Buffer *buf);
# 1073 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SPutMsg (Buffer *mBuf);
extern S16 SGetMsg (Region region, Pool pool, Buffer * *mBufPtr);
# 1090 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetSBuf (Region region,Pool pool, Data * *bufPtr, Size size);
extern S16 SPutSBuf (Region region, Pool pool, Data *buf, Size size);
# 1101 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetStaticBuffer (Region region,Pool pool, Data * *bufPtr, Size size, U8 memType);
extern S16 SPutStaticBuffer (Region region, Pool pool, Data *buf, Size size, U8 memType);
# 1114 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetSMem (Region region,Size size,Pool *poolPtr);
extern S16 SPutSMem (Region region,Pool pool);
extern S16 SInitMsg (Buffer *mBuf);
extern S16 SAddPreMsg (Data data,Buffer *mBuf);
extern S16 SAddPstMsg (Data data,Buffer *mBuf);

extern S16 SAddPreMsgMultInOrder (Data *src,MsgLen cnt,Buffer *mBuf);
extern S16 SRemPreMsg (Data *dataPtr,Buffer *mBuf);
extern S16 SRemPreMsgRegion (Region region, Data *dataPtr,Buffer *mBuf);
extern S16 SCatMsgRegion (Region region, Buffer *mBuf1,Buffer *mBuf2,Order order);
extern S16 SSegMsgRegion (Region region, Buffer *mBuf1,MsgLen idx,Buffer **mBuf2);
extern int SCreatePThread (pthread_t* tid, pthread_attr_t* attr, void *(*start_routine) (void *), void* arg);
extern S16 SRemPstMsg (Data *dataPtr,Buffer *mBuf);







extern S16 SAddPreMsgMult (Data *src,MsgLen cnt,Buffer *mBuf);
extern S16 SAddPstMsgMult (Data *src,MsgLen cnt,Buffer *mBuf);

extern S16 SGetPstMsgMult (MsgLen cnt,Buffer *mBuf);
extern S16 SRemPreMsgMult (Data *dst,MsgLen cnt,Buffer *mBuf);
extern S16 SRemPstMsgMult (Data *dst,MsgLen cnt,Buffer *mBuf);
extern S16 SRepMsg (Data data,Buffer *mBuf,MsgLen idx);
extern S16 SExamMsg (Data *dataPtr,Buffer *mBuf,MsgLen idx);

extern S16 SGetDataFrmMsg (Buffer *mBuf, Data *dataPtr, MsgLen idx, MsgLen dataLen);
extern S16 SFndLenMsg (Buffer *mBuf,MsgLen *lngPtr);
extern S16 SCatMsg (Buffer *mBuf1,Buffer *mBuf2,Order order);




extern S16 SSegMsg (Buffer *mBuf1,MsgLen idx,Buffer **mBuf2);

extern S16 SSwapMsg (Buffer *mBuf1, Buffer *mBuf2);
extern S16 SCpyMsgFix (Buffer *srcMbuf,MsgLen srcIdx,MsgLen cnt, Data *dstBuf,MsgLen *cCnt)
                                       ;
extern S16 SCpyFixMsg (Data *srcBuf,Buffer *dstMbuf, MsgLen dstIdx,MsgLen cnt,MsgLen *cCnt)
                                                   ;
extern S16 SCompressMsg (Buffer *mBuf);
# 1166 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SCpyMsgMsg (Buffer *mBuf, Region region, Pool pool, Buffer **dstBuf)
                             ;
extern S16 SAddMsgRef (Buffer *mBuf, Region region, Pool pool, Buffer **dstBuf)
                             ;
extern S16 SIncMsgRef(Buffer *srcBuf, Region dstRegion, Pool dstPool, Buffer **dstBuf);






extern S16 SChkRes (Region region,Pool pool,Status *status);
extern S16 SChkResUtl (Region region,U8 *wSum);
extern S16 SSetDateTime (DateTime *dt);
extern S16 SGetDateTime (DateTime *dt);






extern S16 SGetEpcTime (EpcTime *et);

extern S16 SGetTimeStamp ( S8 *ts);
extern S16 SGetSysTime (Ticks *sysTime);
extern S16 SGetRefTime (U32 refTime, U32 *sec, U32 *usec);
extern S16 SRandom (Random *value);
extern S16 SError (Seq seq,Reason reason);
extern Void SLogError (Ent ent, Inst inst, ProcId procId, Txt *file, S32 line, ErrCls errCls, ErrCode errCode, ErrVal errVal, Txt *errDesc)

                                                    ;

extern U32 SGetSystemTsk (Void);




extern S16 SRegInit (Ent ent,Inst inst,PAIFS16 initFnct);
extern S16 SRegActvTsk (Ent ent,Inst inst,Ttype ttype,Prior prior, ActvTsk actvTsk)
                                               ;




extern S16 SRegCfgTmr (Ent ent, Inst inst, S16 period, S16 units, PFS16 tmrFnct)



                                            ;


extern S16 SRegCfgTmrMt (Ent ent, Inst inst, S16 period, S16 units, PAIFTMRS16 tmrFnctMt)



                                                     ;

extern S16 SDeregCfgTmr (Ent ent, Inst inst, S16 period, S16 units, PFS16 tmrFnct)



                                              ;


extern S16 SDeregCfgTmrMt (Ent ent, Inst inst, S16 period, S16 units, PAIFTMRS16 tmrFnctMt)



                                                       ;
# 1251 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SPstTsk (Pst *pst, Buffer *mBuf);






extern S16 SRegDrvrTsk (Inst inst, ProcId low, ProcId high, ActvTsk actvTsk, ISTsk isTsk)
                                                            ;

extern S16 SDeregDrvrTsk (Inst channel);



extern S16 SRegRtrTsk (Route *, Cntr, ActvTsk);
extern S16 SDeregRtrTsk (Route *, Cntr);



extern S16 SAttachPtrToBuf ( Region region, Pool pool, Data *ptr, MsgLen totalLen, Buffer** mBuf )





  ;





typedef S8 SsAffinityMode;


typedef struct {
  U32 numCores;
  U32 threadsPerCore;
  U32 threadRegister[64];
} SCpuInfo;

extern S16 SRegCpuInfo (SCpuInfo *cpuInfo);
extern S16 SSetAffinity (SSTskId *tskId, SsAffinityMode mode, U32 coreId, SSTskId *tskAssociatedTskId);
extern S16 SGetAffinity (SSTskId *tskId, U32 *coreId);







extern S16 SAddDBufPst (Buffer *mBuf, Buffer *dBuf);
extern S16 SAddDBufPre (Buffer *mBuf, Buffer *dBuf);
extern S16 SRemDBufPst (Buffer *mBuf, Buffer **dBuf);
extern S16 SRemDBufPre (Buffer *mBuf, Buffer **dBuf);
extern S16 SGetDataRx (Buffer *dBuf, MsgLen pad, Data **dat, MsgLen *mLen);
extern S16 SGetDataTx (Buffer *dBuf, Data **dat, MsgLen *mLen);
extern S16 SUpdMsg (Buffer *mBuf, Buffer *dBuf, MsgLen mLen);
extern S16 SCacheFlush (U16 cache_type, Data *addr, Size size);
extern S16 SCacheInvalidate (U16 cache_type, Data *addr, Size size);
extern S16 SAlignDBufEven (Buffer *dBuf);
extern S16 SAlignDBuf (Buffer *dBuf, U32 align);
extern S16 SInitNxtDBuf (Buffer *mBuf);
extern S16 SGetNxtDBuf (Buffer *mBuf, Buffer **dBuf);
extern S16 SChkNxtDBuf (Buffer *mBuf);
extern S16 SSetIntPend (U16 id, Bool flag);
extern S16 SChkMsg (Buffer *mBuf);
extern S16 SDeregInitTskTmr (Ent ent,Inst inst);
extern S16 SExitTsk (void );
extern S16 SExitInt (void );
extern S16 SHoldInt (void );
extern S16 SRelInt (void );
extern S16 SEnbInt (void );
extern S16 SDisInt (void );
extern S16 SGetVect (VectNmb vectNmb,PIF *vectFnct);
extern S16 SPutVect (VectNmb vectNmb,PIF vectFnct);






extern S16 SInitSema (Region region, Sema *sema);
extern S16 SRelSema (Region region, Sema sema);
extern S16 SGetSema (Region region, Sema sema);
extern S16 SActvInit (Ent ent,Inst inst,Region region,Reason reason);
extern S16 SActvTsk (Prior prior,Route route,Ent srcEnt, Inst srcInst,Buffer *mBuf)
                                       ;
extern S16 SActvTmr (void );
extern S16 SGetOpt (int argc,char **argv,char *opts);



extern S16 SGetEntInst (Ent *ent, Inst *inst);
extern S16 SSetEntInst (Ent ent, Inst inst);
extern ProcId SFndProcId (void);
extern Void SSetProcId (ProcId pId);


extern S16 SGetDBufSiz (Region region, Pool pool, S16 *size);
extern S16 SGetStrtIdx (Region region, Pool pool, S16 *idx);
extern S16 SGetEndIdx (Region region, Pool pool, S16 *idx);
extern S16 SGetStrtPad (Region region, Pool pool, S16 *pad);
# 1381 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern Void SExit (Void);




extern S16 SRegTTsk (Ent ent, Inst inst, Ttype type, Prior prior, PAIFS16 initTsk, ActvTsk actvTsk)




                                           ;

extern S16 SRegCbTsk (Ent ent, Inst inst, ActvTsk actvTsk)

                                           ;
extern S16 SDeregTTsk (Ent ent, Inst inst);
# 1415 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SCreateSTsk (SSTskPrior tskPrior, SSTskId *tskId);
extern S16 SDestroySTsk (SSTskId tskId);



extern S16 SAttachTTsk (Ent ent, Inst inst, SSTskId tskId);
extern S16 SDetachTTsk (Ent ent, Inst inst);







extern S16 SRegRegion (Region region, SRegInfo *regInfo);
extern S16 SDeregRegion (Region region);
extern S16 SRegDynRegion (Region region, SRegInfo *regInfo);
# 1448 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SAlloc (Region region, Size *size, U32 flags, Data **ptr);
extern S16 SFree (Region region, Data *ptr, Size size);


extern S16 SGetBufRegionPool (Buffer *mBuf, Region *region, Pool *pool);
# 1474 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SThreadYield (void);


extern S16 SInitLock (pthread_mutex_t *lock,U8 type);
extern S16 SLock (pthread_mutex_t *lock);
extern S16 SUnlock (pthread_mutex_t *lock);
extern S16 SDestroyLock (pthread_mutex_t *lock);


extern S16 SInitSemaphore (sem_t *sem, U8 value);
extern S16 SWaitSemaphore (sem_t *sem);
extern S16 SPostSemaphore (sem_t *sem);
extern S16 SDestroySemaphore (sem_t *sem);
# 1569 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 smActvInit (Ent ent, Inst inst, Region region, Reason reason);
# 1580 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 smInitExt (void);


extern S16 smActvTsk (Pst *pst, Buffer *mBuf);
# 1632 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S8* SGetConfigPath (Void);


extern S16 SCpyPartMsg (Buffer *srcBuf, MsgLen idx, MsgLen cnt, Buffer *dstBuf);
extern S16 SRepPartMsg (Buffer *srcBuf, MsgLen idx, MsgLen cnt, Buffer *dstBuf);
extern S16 SMovPartMsg (Buffer *srcBuf, MsgLen idx, Buffer *dstBuf);
extern S16 SPkMsgMult (Data *src, MsgLen cnt, Buffer *mBuf);
extern S16 SGetReadPtr (Buffer *mBuf, U8** data, MsgLen *len);

typedef enum
{
   SS_SHARABLE_MEMORY,
   SS_NON_SHARABLE_MEMORY
}ssMemoryType;
# 1661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SStartTask (volatile U32 *startTime, U32 tarkId);
extern S16 SStopTask (volatile U32 startTime,U32 taskId);
# 1717 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern Void SIncrementTtiCount(Void);
extern Ticks SGetTtiCount(Void);
# 1732 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern Void ysPrntBkTrace(Void);
extern Void ssMlogInit(Void);
extern Void ssMlogIncrCounter(Void);


extern Void ssRegMainThread(Void);






extern S16 ssGetDBufOfSize(Region region,Size size,Buffer **dBuf);
# 50 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x" 1
# 31 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x"
typedef struct cmHashListCp CmHashListCp;




typedef S16 (* CmHashFunc) (CmHashListCp *hashListCp, U8 *key, U16 keyLen, U16 *idx)
                                                        ;


typedef struct cmListEnt CmListEnt;

struct cmListEnt
{
   CmListEnt *next;
   CmListEnt *prev;
};
# 62 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x"
typedef struct cmHashListEnt
{
   CmListEnt list;
   U8 *key;
   U16 keyLen;
   U16 hashVal;
} CmHashListEnt;



struct cmHashListCp
{

   CmListEnt *hl;



   Region region;
   Pool pool;
   U16 nmbBins;
   U16 binBitMask;
   U8 nmbBinBits;

   U16 nmbEnt;

   U16 offset;
   Bool dupFlg;
   U16 keyType;
   CmHashFunc hashFunc;
};




extern S16 cmHashListInit ( CmHashListCp *hashListCp, U16 nmbBins, U16 offset, Bool dupFlg, U16 keyType, Region region, Pool pool)






                                 ;

extern S16 cmHashListDeinit ( CmHashListCp *hashListCp)
                                        ;

extern S16 cmHashListInsert ( CmHashListCp *hashListCp, U32 entry, U8 *key, U16 keyLen)



                                   ;

extern S16 cmHashListDelete ( CmHashListCp *hashListCp, U32 entry)

                                  ;

extern S16 cmHashListFind ( CmHashListCp *hashListCp, U8 *key, U16 keyLen, U16 seqNmb, U32 *entry)




                                   ;

extern S16 cmHashListGetNext ( CmHashListCp *hashListCp, U32 prevEnt, U32 *entry)


                                   ;
# 140 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x"
extern S16 cmHashListQuery ( CmHashListCp *hashListCp, U8 queryType, U16 *result)


                                    ;



extern S16 cmHashListOAInsert ( CmHashListCp *hashListCp, U32 entry, U8 *key, U16 keyLen)



                                   ;
# 52 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_llist.x" 1
# 27 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_llist.x"
typedef struct cmLList CmLList;
typedef struct cmLListCp CmLListCp;


struct cmLList
{
   CmLList *next;
   CmLList *prev;
   U32 node;
};

struct cmLListCp
{
   CmLList *first;
   CmLList *last;
   CmLList *crnt;
   U32 count;
};

extern Void cmLListInit (CmLListCp *lList);
extern Void cmLListAdd2Head (CmLListCp *lList, CmLList *node);
extern Void cmLListAdd2Tail (CmLListCp *lList, CmLList *node);
extern Void cmLListInsCrnt (CmLListCp *lList, CmLList *node);

extern Void cmLListInsAfterCrnt (CmLListCp *lList, CmLList *node);
extern CmLList *cmLListDelFrm (CmLListCp *lList, CmLList *node);
extern Void cmLListCatLList ( CmLListCp *list1, CmLListCp *list2);
# 53 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_lib.x" 1
# 29 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_lib.x"
 U8 *cmMemcpy (U8 *tgt, const U8 *src, U32 len);
 S16 cmMemcmp (const U8 *s1, const U8 *s2, U32 len);
 U8 *cmMemset (U8 *src, U8 val, U32 len);

 S16 cmStrcmp (const U8 *s1, const U8 *s2);

 S16 cmStrncmp (const U8 *s1, const U8 *s2, MsgLen len);
 MsgLen cmStrlen (const U8 *s);
# 54 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 1
# 62 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
# 1 "/usr/include/sys/poll.h" 1 3 4
# 25 "/usr/include/sys/poll.h" 3 4
# 1 "/usr/include/bits/poll.h" 1 3 4
# 26 "/usr/include/sys/poll.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 29 "/usr/include/sys/poll.h" 2 3 4








# 36 "/usr/include/sys/poll.h" 3 4
typedef unsigned long int nfds_t;


struct pollfd
  {
    int fd;
    short int events;
    short int revents;
  };



# 57 "/usr/include/sys/poll.h" 3 4
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout);
# 66 "/usr/include/sys/poll.h" 3 4
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
    const struct timespec *__timeout,
    const __sigset_t *__ss);







# 1 "/usr/include/bits/poll2.h" 1 3 4
# 24 "/usr/include/bits/poll2.h" 3 4


extern int __poll_alias (struct pollfd *__fds, nfds_t __nfds, int __timeout) __asm__ ("" "poll")
                               ;
extern int __poll_chk (struct pollfd *__fds, nfds_t __nfds, int __timeout,
         unsigned int __fdslen);
extern int __poll_chk_warn (struct pollfd *__fds, nfds_t __nfds, int __timeout, unsigned int __fdslen) __asm__ ("" "__poll_chk")


  __attribute__((__warning__ ("poll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
poll (struct pollfd *__fds, nfds_t __nfds, int __timeout)
{
  if (__builtin_object_size (__fds, 2 > 1) != (unsigned int) -1)
    {
      if (! __builtin_constant_p (__nfds))
 return __poll_chk (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1));
      else if (__builtin_object_size (__fds, 2 > 1) / sizeof (*__fds) < __nfds)
 return __poll_chk_warn (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1));
    }

  return __poll_alias (__fds, __nfds, __timeout);
}



extern int __ppoll_alias (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss) __asm__ ("" "ppoll")

                                          ;
extern int __ppoll_chk (struct pollfd *__fds, nfds_t __nfds,
   const struct timespec *__timeout,
   const __sigset_t *__ss, unsigned int __fdslen);
extern int __ppoll_chk_warn (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss, unsigned int __fdslen) __asm__ ("" "__ppoll_chk")




  __attribute__((__warning__ ("ppoll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
ppoll (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout,
       const __sigset_t *__ss)
{
  if (__builtin_object_size (__fds, 2 > 1) != (unsigned int) -1)
    {
      if (! __builtin_constant_p (__nfds))
 return __ppoll_chk (__fds, __nfds, __timeout, __ss, __builtin_object_size (__fds, 2 > 1));
      else if (__builtin_object_size (__fds, 2 > 1) / sizeof (*__fds) < __nfds)
 return __ppoll_chk_warn (__fds, __nfds, __timeout, __ss,
     __builtin_object_size (__fds, 2 > 1));
    }

  return __ppoll_alias (__fds, __nfds, __timeout, __ss);
}



# 77 "/usr/include/sys/poll.h" 2 3 4
# 63 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 2
# 88 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
# 1 "/usr/include/netdb.h" 1 3 4
# 32 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4



struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) __attribute__ ((__nothrow__ , __leaf__));
extern void endrpcent (void) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbyname (const char *__name) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbynumber (int __number) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcent (void) __attribute__ ((__nothrow__ , __leaf__));


extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));



# 33 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 24 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 320 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 3)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 38 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/bits/netdb.h" 1 3 4
# 26 "/usr/include/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 43 "/usr/include/netdb.h" 2 3 4
# 53 "/usr/include/netdb.h" 3 4








extern int *__h_errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 92 "/usr/include/netdb.h" 3 4
extern void herror (const char *__str) __attribute__ ((__nothrow__ , __leaf__));


extern const char *hstrerror (int __err_num) __attribute__ ((__nothrow__ , __leaf__));




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (const char *__name);
# 155 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (const char *__name, int __af);
# 167 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 198 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (const char *__name);
# 237 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (const char *__name, const char *__proto);






extern struct servent *getservbyport (int __port, const char *__proto);
# 308 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (const char *__restrict __name,
       const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 374 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 395 "/usr/include/netdb.h" 3 4
extern int setnetgrent (const char *__netgroup);







extern void endnetgrent (void);
# 412 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 423 "/usr/include/netdb.h" 3 4
extern int innetgr (const char *__netgroup, const char *__host,
      const char *__user, const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 451 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   const char *__restrict __locuser,
   const char *__restrict __remuser,
   const char *__restrict __cmd, int *__restrict __fd2p);
# 463 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      const char *__restrict __locuser,
      const char *__restrict __remuser,
      const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 479 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    const char *__restrict __name,
    const char *__restrict __pass,
    const char *__restrict __cmd, int *__restrict __fd2p);
# 491 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       const char *__restrict __name,
       const char *__restrict __pass,
       const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 505 "/usr/include/netdb.h" 3 4
extern int ruserok (const char *__rhost, int __suser,
      const char *__remuser, const char *__locuser);
# 515 "/usr/include/netdb.h" 3 4
extern int ruserok_af (const char *__rhost, int __suser,
         const char *__remuser, const char *__locuser,
         sa_family_t __af);
# 528 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       const char *__remuser, const char *__locuser);
# 539 "/usr/include/netdb.h" 3 4
extern int iruserok_af (const void *__raddr, int __suser,
   const char *__remuser, const char *__locuser,
   sa_family_t __af);
# 551 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 560 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 662 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (const char *__restrict __name,
   const char *__restrict __service,
   const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) __attribute__ ((__nothrow__ , __leaf__));


extern const char *gai_strerror (int __ecode) __attribute__ ((__nothrow__ , __leaf__));





extern int getnameinfo (const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 692 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[__restrict],
     int __ent, struct sigevent *__restrict __sig);
# 703 "/usr/include/netdb.h" 3 4
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
   const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) __attribute__ ((__nothrow__ , __leaf__));


extern int gai_cancel (struct gaicb *__gaicbp) __attribute__ ((__nothrow__ , __leaf__));



# 89 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 2




# 92 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef CmIpAddr CmInetIpAddr;




typedef struct cmInetIpAddrTbl
{
   U16 count;
   CmInetIpAddr netAddr[16];
}CmInetIpAddrTbl;

typedef CmInetIpAddrTbl CmInetIpv4AddrArr;
# 113 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetIpAddrArr
{
   U8 type;
   union
   {
      CmInetIpv4AddrArr ipv4AddrArr;



   } u;

} CmInetIpAddrArr;



typedef struct cmInetCmnSockAddr
{
   U32 type;
   U32 len;
   union
   {
      struct sockaddr_in addr;



   }u;
}CmInetCmnSockAddr;
# 148 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef S32 CmInetFdType;
# 158 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct pollfd CmInetPollFd;

typedef struct cmInetFd
{
   CmInetFdType fd;
   U8 blocking;
   U8 type;




}CmInetFd;

typedef fd_set CmInetFdSet;
# 205 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetAddr1
{
   U16 port;
   CmInetIpAddr address;
} CmInetAddr;
typedef CmInetAddr CmInetIpv4Addr;


typedef struct cmInetMemInfo
{
   Region region;
   Pool pool;
} CmInetMemInfo;

typedef struct cmInetMCastInf
{
   CmInetIpAddr mCastAddr;
   CmInetIpAddr localAddr;
}CmInetMCastInf;



typedef struct cmInetNetAddr
{
   U8 type;
   union
   {
      CmInetIpAddr ipv4NetAddr;



   }u;
} CmInetNetAddr;
# 339 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetIpv4HdrParm
{
   TknU8 proto;
   TknU8 dfBit;
   TknU8 tos;
   TknU8 ttl;




} CmInetIpv4HdrParm;
typedef struct cmInetIpHdrParm
{
   U8 type;
   union
   {
      CmInetIpv4HdrParm hdrParmIpv4;



   } u;
} CmInetIpHdrParm;
# 372 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetFdSetInfo
{
   Bool initDone;
   Bool bigEndian;
   U16 arIdx;
   U32 numArElems;
   U8 ar[256];
} CmInetFdSetInfo;
# 556 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct iovec CmInetIovec;



typedef struct sockaddr CmInetSockAddr;
# 583 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct sockaddr_in6 CmInet6SockAddr;
typedef struct sockaddr_in CmInet4SockAddr;




typedef struct addrinfo CmInetAddrInfo;
# 599 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
extern S16 cmInetSocket (U8 type, CmInetFd *sockFd, U8 protocol);
# 613 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
extern S16 cmInetBind (CmInetFd *sockFd, CmInetAddr *myAddr);
extern S16 cmInetConnect (CmInetFd *sockFd, CmInetAddr *servAddr);
extern S16 cmInetListen (CmInetFd *sockFd, S16 backLog);
extern S16 cmInetAccept (CmInetFd *sockFd, CmInetAddr *fromAddr, CmInetFd *newSockFd)
                                                   ;
# 637 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
extern S16 cmInetRecvMsg (CmInetFd *sockFd, CmInetAddr *dstAddr, CmInetMemInfo *info, Buffer **mPtr, MsgLen *len, S32 flags)

                                                       ;


extern S16 cmInetSendDscpMsg (CmInetFd *sockFd, CmInetAddr *dstAddr, CmInetMemInfo *info, Buffer *mBuf, MsgLen *len, CmInetIpHdrParm *ipHdrParams, S16 flags)

                                                                        ;






extern S16 cmInetSendMsg (CmInetFd *sockFd, CmInetAddr *dstAddr, CmInetMemInfo *info, Buffer *mBuf, MsgLen *len, S16 flags)

                                          ;

extern S16 cmInetPeek (CmInetFd *sockFd, CmInetAddr *fromAddr, CmInetMemInfo *info, MsgLen dataPos, MsgLen dataLen, U8 *data)

                                                      ;

extern S16 cmInetPeekNew (CmInetFd *sockFd, CmInetAddr *fromAddr, CmInetMemInfo *info, MsgLen dataPos, MsgLen dataLen, U8 *data)

                                                      ;
extern S16 cmInetClose (CmInetFd *sockFd);
extern S16 cmInetShutdown (CmInetFd *sockFd, S32 howTo);
extern S16 cmInetSelect (CmInetFdSet *readFdS, CmInetFdSet *writeFdS, U32 *mSecTimeout, S16 *numFdS)
                                                             ;
extern S16 cmInetSetOpt (CmInetFd *sockFd, U32 level, U32 type, Ptr value)
                                        ;
extern S16 cmInetGetNumRead (CmInetFd *sockFd, U32 *dataLen);

extern S16 cmInetGetHostByName (S8 *hostName, CmInetIpAddrTbl *addrTbl);
extern S16 cmInetGetIpNodeByName (S8 *hostName, CmInetIpAddrArr *addrArr);
extern S16 cmInetAddr (S8 *asciiAddr, CmInetIpAddr *address);
extern S16 cmInetNtoa (CmInetIpAddr address, S8 **asciiAddr);
extern S16 cmInetPton (CmInetIpAddr *address, S8 *asciiAddr);







extern S16 cmInetFdSetInfoInit (CmInetFdSetInfo *fdSetInfo);
extern S16 cmInetGetFd (CmInetFdSetInfo *fdSetInfo, CmInetFdSet *fdSet, CmInetFdType *sockFd)
                                                   ;


extern S16 cmInetGetMemSize (S32 *size);
extern S16 cmInetInit (Void);
extern S16 cmInetDeInit (Void);
extern S16 cmInetGetSockName (CmInetFd *sockFd, CmInetAddr *locAddr);

extern S16 cmInetConvertStrToIpAddr (U16 len, U8 *val, CmInetNetAddr *address)
                                                                  ;
extern S16 cmInetAsciiToIpv4 (U8 numBytes, U8 *ipv4Addr, U16 len, U8 *val)
                                                     ;



extern S16 cmInetPoll (CmInetPollFd *pollFdArr,U32 idx,S16 *numFdS,U32 timeout);
extern S16 cmInetPollSetFd (CmInetFd *sockFd,CmInetPollFd *pollFdArr,S16 idx, U16 eventMask);
extern S16 cmInetPollFdIsSet (CmInetPollFd *pollFdArr, S16 idx, U16 eventMask);
extern S16 cmInetPollClearFdREvent (CmInetPollFd *pollFdArr, S16 idx, U16 eventMask);
extern S16 cmInetPollClearFdEvent (CmInetPollFd *pollFdArr,S16 idx, U16 eventMask);
extern S16 cmInetPollDelFd (CmInetPollFd *pollFdArr, S16 delIdx, S16 crntIdx);
extern S16 cmInetPollInitFdArr (CmInetPollFd *pollFdArr);
extern S16 cmInetNtop (U8 type,Void *address,S8 *asciiAddr,U32 len);





extern S32 cmInetGetAddrInfo (const S8* node, const S8* service, const CmInetAddrInfo *hints, CmInetAddrInfo **res)
                                                                                         ;
extern Void cmInetFreeAddrInfo (CmInetAddrInfo *res);
# 56 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x" 1
# 27 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 1
# 28 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x" 2
# 39 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef CmInetIpv4Addr CmIpv4TptAddr;
typedef CmInetIpAddr CmIpv4NetAddr;


typedef U8 CmInetIpAddr6[16];


typedef struct cmInetIpv6Addr
{
   U16 port;
   CmInetIpAddr6 ipv6NetAddr;
} CmInetIpv6Addr;



typedef CmInetIpv6Addr CmIpv6TptAddr;
typedef CmInetIpAddr6 CmIpv6NetAddr;




typedef struct cmNetAddr
{
   U8 type;
   union
   {
      CmIpv4NetAddr ipv4NetAddr;
      CmIpv6NetAddr ipv6NetAddr;
   }u;
} CmNetAddr;


typedef struct _cmNetAddrTbl
{
   U16 count;
   CmNetAddr netAddr[16];
}CmNetAddrTbl;
# 90 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmNetMCastInf
{
   CmNetAddr mCastAddr;
   CmNetAddr localAddr;
} CmNetMCastInf;







typedef struct cmTptAddr
{
   U8 type;
   union
   {
      CmIpv4TptAddr ipv4TptAddr;
      CmIpv6TptAddr ipv6TptAddr;



   }u;
} CmTptAddr;
# 136 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmSockOpts
{
   U32 level;
   U32 option;
   union
   {





      CmNetMCastInf mCastInfo;



      CmNetAddr lclAddr;
      U32 value;
# 167 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
   }optVal;
}CmSockOpts;


typedef struct cmSockParam
{
   U8 listenQSize;
   U8 numOpts;
   CmSockOpts sockOpts[8];
} CmSockParam;
# 199 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmTptParam
{
   U8 type;

   union
   {
      CmSockParam sockParam;
# 216 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
   } u;

} CmTptParam;



typedef struct cmIpv4HdrParm
{
   TknU8 proto;
   TknU8 dfBit;
   TknU8 tos;
   TknU8 ttl;




} CmIpv4HdrParm;
# 305 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmIpHdrParm
{
   U8 type;
   union
   {
      CmIpv4HdrParm hdrParmIpv4;



   }u;

} CmIpHdrParm;


typedef struct cmIpv4Hdr
{
   U8 hdrVer;
   U8 tos;
   S16 length;
   U16 id;
   S16 off;
   U8 ttl;
   U8 proto;
   U16 chkSum;
   U32 srcAddr;
   U32 destAddr;

} CmIpv4Hdr;
# 354 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmIcmpError
{
   U8 errType;
   U32 errCodeMask;

} CmIcmpError;


typedef struct cmIcmpv4Filter
{
   U8 icmpMsgFlag;
   U8 allMsg;
   U8 protocol;
   U8 num;

   CmIcmpError icmpError[5];

}CmIcmpv4Filter;
# 386 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmIcmpFilter
{
  U8 type;
  union
  {
    CmIcmpv4Filter icmpv4Filter;



  }u;

} CmIcmpFilter;


typedef struct cmIcmpv4Hdr
{
   U8 icmpType;
   U8 icmpCode;
   U16 chkSum;

   union
   {
      U8 ihPptr;
      U32 rdrctAddr;
      struct idSeq
      {
         S16 icdId;
         S16 icdSeq;
      } u1;
      U32 ihVoid;
   } u2;

   union
   {
      struct idTime
      {
         U32 itOtime;
         U32 itRtime;
         U32 itTtime;
      } s;
      CmIpv4Hdr icmpIpHdr;
      U32 id_mask;
   } u3;

} CmIcmpv4Hdr;
# 452 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
extern S16 cmPkCmIpv4TptAddr (CmIpv4TptAddr *pkParam, Buffer *mBuf);
extern S16 cmPkCmNetAddrTbl (CmNetAddrTbl *pkParam, Buffer *mBuf);
extern S16 cmPkCmNetAddr (CmNetAddr *pkParam, Buffer *mBuf);
extern S16 cmPkCmTptAddr (CmTptAddr *pkParam, Buffer *mBuf);



extern S16 cmPkCmTptParam (CmTptParam *pkParam, Buffer *mBuf);
extern S16 cmUnpkCmNetAddrTbl (CmNetAddrTbl *unpkParam, Buffer *mBuf);
extern S16 cmUnpkCmIpv4TptAddr (CmIpv4TptAddr *unpkParam, Buffer *mBuf);
extern S16 cmUnpkCmNetAddr (CmNetAddr *unpkParam, Buffer *mBuf);
extern S16 cmUnpkCmTptAddr (CmTptAddr *unpkParam, Buffer *mBuf);




extern S16 cmUnpkCmTptParam (CmTptParam *unpkParam, Buffer *mBuf);


extern S16 cmPkCmIpHdrParm (CmIpHdrParm *pkParam, Buffer *mBuf);







extern S16 cmUnpkCmIpHdrParm (CmIpHdrParm *unpkParam, Buffer *mBuf);
# 488 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
extern S16 cmPkCmIcmpFilter (CmIcmpFilter *pkParam, Buffer *mBuf);
extern S16 cmUnpkCmIcmpFilter (CmIcmpFilter *unpkParam, Buffer *mBuf);
# 57 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2





# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x" 1
# 31 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
typedef struct hiHdrInfo
{
   U32 hdrLen;
   U32 offLen;
   U32 lenLen;
   U32 flag;

} HiHdrInfo;
# 61 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
typedef struct hiGenCfg
{
   U16 numSaps;
   U32 numCons;
   U16 numFdsPerSet;
   U16 numFdBins;
   U8 numClToAccept;
   Bool permTsk;
   U16 schdTmrVal;
   U32 selTimeout;
# 79 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
   U8 numRawMsgsToRead;
   U8 numUdpMsgsToRead;


   Status poolStrtThr;
   Status poolDropThr;
   Status poolStopThr;

   Ticks timeRes;
   Pst lmPst;
# 103 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
   Region initRegion;
   Pool initPool;
} HiGenCfg;



typedef struct hiSapCfg
{
   SpId spId;
   Bool flcEnb;
   U32 txqCongStrtLim;
   U32 txqCongDropLim;
   U32 txqCongStopLim;
   U16 numBins;
# 141 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
   Priority uiPrior;
   Route uiRoute;
   Selector uiSel;
   MemoryId uiMemId;


   HiHdrInfo hdrInf[5];






} HiSapCfg;
# 190 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
typedef struct hiGenSts
{
   StsCntr numCons;
   StsCntr sockTxErr;
   StsCntr sockRxErr;
   StsCntr sockOpenErr;
   StsCntr sockBindErr;
   StsCntr sockCnctErr;
   StsCntr sockLstnErr;
   StsCntr sockSOptErr;
   StsCntr sockClosErr;
   StsCntr sockShutErr;
   StsCntr rxMsgVerErr;
   StsCntr numFlcInd;
   StsCntr numTxbytes;
   StsCntr numRxbytes;
   StsCntr numTxTcpMsg;
   StsCntr numRxTcpMsg;
   StsCntr numTxUdpMsg;
   StsCntr numRxUdpMsg;
   StsCntr numTxRawMsg;
   StsCntr numRxRawMsg;
# 222 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
} HiGenSts;




typedef struct hiSapSts
{
   SpId sapId;
   StsCntr numCons;
   StsCntr numTxbytes;
   StsCntr numRxbytes;
   StsCntr numTxTcpMsg;
   StsCntr numRxTcpMsg;
   StsCntr numTxUdpMsg;
   StsCntr numRxUdpMsg;
   StsCntr numTxRawMsg;
   StsCntr numRxRawMsg;
# 249 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
} HiSapSts;




typedef struct hiSapSta
{
   SpId spId;
   State state;







} HiSapSta;



typedef struct hiAlarmInfo
{
   SpId spId;
   U8 type;





   union
   {
      State state;
      State conState;
      Mem mem;
      U8 parType;




   } inf;

} HiAlarmInfo;





typedef struct hiDbgCntrl
{
   U32 dbgMask;

} HiDbgCntrl;





typedef struct hiTrcCntrl
{
   SpId sapId;
   S16 trcLen;

} HiTrcCntrl;





typedef struct hiCfg
{
   union
   {
      HiGenCfg hiGen;
      HiSapCfg hiSap;





   } s;

} HiCfg;
# 362 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
typedef struct hiSts
{
   DateTime dt;
   Duration dura;

   union
   {
      HiGenSts genSts;
      HiSapSts sapSts;







   } s;

} HiSts;


typedef struct hiSsta
{
   DateTime dt;

   union
   {
      SystemId sysId;
      HiSapSta sapSta;

   } s;

} HiSsta;




typedef struct hiUsta
{
   CmAlarm alarm;
   HiAlarmInfo info;

} HiUsta;




typedef struct hiTrc
{
   DateTime dt;
   U16 evnt;




} HiTrc;




typedef struct hiCntrl
{
   DateTime dt;
   U8 action;
   U8 subAction;

   union
   {
      HiTrcCntrl trcDat;
      ProcId dstProcId;
      Route route;
      Priority priority;
      SpId sapId;


      HiDbgCntrl hiDbg;

      U32 logMask;

   } ctlType;

} HiCntrl;




typedef struct hiMngmt
{
   Header hdr;
   CmStatus cfm;

   union
   {
      HiCfg cfg;
      HiSts sts;
      HiSsta ssta;
      HiUsta usta;
      HiTrc trc;
      HiCntrl cntrl;

   } t;

} HiMngmt;





typedef S16 (*LhiCfgReq) (Pst *pst, HiMngmt *cfg);
typedef S16 (*LhiCfgCfm) (Pst *pst, HiMngmt *cfg);
typedef S16 (*LhiCntrlReq) (Pst *pst, HiMngmt *cntrl);
typedef S16 (*LhiCntrlCfm) (Pst *pst, HiMngmt *cntrl);
typedef S16 (*LhiStsReq) (Pst *pst, Action action, HiMngmt *sts)
                                                    ;
typedef S16 (*LhiStsCfm) (Pst *pst, HiMngmt *sts);
typedef S16 (*LhiStaReq) (Pst *pst, HiMngmt *sta);
typedef S16 (*LhiStaInd) (Pst *pst, HiMngmt *sta);
typedef S16 (*LhiStaCfm) (Pst *pst, HiMngmt *sta);
typedef S16 (*LhiTrcInd) (Pst *pst, HiMngmt *trc, Buffer *mBuf)
                                                    ;





extern S16 HiMiLhiCfgReq (Pst *pst, HiMngmt *cfg);
extern S16 HiMiLhiCfgCfm (Pst *pst, HiMngmt *cfg);
extern S16 HiMiLhiCntrlReq (Pst *pst, HiMngmt *cntrl);
extern S16 HiMiLhiCntrlCfm (Pst *pst, HiMngmt *cntrl);
extern S16 HiMiLhiStsReq (Pst *pst, Action action, HiMngmt *sts)
                                                    ;
extern S16 HiMiLhiStsCfm (Pst *pst, HiMngmt *sts);
extern S16 HiMiLhiStaReq (Pst *pst, HiMngmt *sta);
extern S16 HiMiLhiStaCfm (Pst *pst, HiMngmt *sta);
extern S16 HiMiLhiStaInd (Pst *pst, HiMngmt *sta);
extern S16 HiMiLhiTrcInd (Pst *pst, HiMngmt *trc, Buffer *mBuf)
                                                    ;



extern S16 SmMiLhiCfgReq (Pst *pst, HiMngmt *cfg);
extern S16 SmMiLhiCfgCfm (Pst *pst, HiMngmt *cfg);
extern S16 SmMiLhiCntrlReq (Pst *pst, HiMngmt *cntrl);
extern S16 SmMiLhiCntrlCfm (Pst *pst, HiMngmt *cntrl);
extern S16 SmMiLhiStsReq (Pst *pst, Action action, HiMngmt *sts)
                                                    ;
extern S16 SmMiLhiStsCfm (Pst *pst, HiMngmt *sts);
extern S16 SmMiLhiStaReq (Pst *pst, HiMngmt *sta);
extern S16 SmMiLhiStaInd (Pst *pst, HiMngmt *sta);
extern S16 SmMiLhiStaCfm (Pst *pst, HiMngmt *sta);
extern S16 SmMiLhiTrcInd (Pst *pst, HiMngmt *trc, Buffer *mBuf)
                                                    ;






extern S16 cmPkLhiCfgReq (Pst *pst, HiMngmt *cfg);
extern S16 cmPkLhiCfgCfm (Pst *pst, HiMngmt *cfg);
extern S16 cmPkLhiCntrlReq (Pst *pst, HiMngmt *cntrl);
extern S16 cmPkLhiCntrlCfm (Pst *pst, HiMngmt *cntrl);
extern S16 cmPkLhiStsReq (Pst *pst, Action action, HiMngmt *sts);
extern S16 cmPkLhiStsCfm (Pst *pst, HiMngmt *sts);
extern S16 cmPkLhiStaReq (Pst *pst, HiMngmt *sta);
extern S16 cmPkLhiStaInd (Pst *pst, HiMngmt *sta);
extern S16 cmPkLhiTrcInd (Pst *pst, HiMngmt *trc, Buffer *mBuf);
extern S16 cmPkLhiStaCfm (Pst *pst, HiMngmt *sta);
# 542 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
extern S16 cmUnpkLhiCfgReq (LhiCfgReq func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiCfgCfm (LhiCfgCfm func, Pst *pst, Buffer *mBuf)
                                                  ;
extern S16 cmUnpkLhiCntrlReq (LhiCntrlReq func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiCntrlCfm (LhiCntrlCfm func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiStsReq (LhiStsReq func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiStsCfm (LhiStsCfm func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiStaReq (LhiStaReq func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiStaInd (LhiStaInd func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiStaCfm (LhiStaCfm func, Pst *pst, Buffer *mBuf)
                                                    ;
extern S16 cmUnpkLhiTrcInd (LhiTrcInd func, Pst *pst, Buffer *mBuf)
                                                    ;





extern S16 smHiActvTsk (Pst *pst, Buffer *mBuf);
extern S16 smHiActvInit (Ent ent, Inst inst, Region region, Reason reason)
                                                                    ;
# 582 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/lhi.x"
extern S16 hiActvInit (Ent ent, Inst inst, Region region, Reason reason)
                                                                    ;

extern S16 hiActvTsk (Pst *pst, Buffer *mBuf);
# 63 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.x" 1
# 31 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.x"
typedef S16 (*HitBndReq) (Pst *pst, SuId suId, SpId spId);
typedef S16 (*HitUbndReq) (Pst *pst, SpId spId, Reason reason);
typedef S16 (*HitServOpenReq) (Pst *pst, SpId spId, UConnId servConId, CmTptAddr *servTAddr, CmTptParam *tPar, CmIcmpFilter *icmpFilter, U8 srvcType)

                                                                            ;
typedef S16 (*HitConReq) (Pst *pst, SpId spId, UConnId suConId, CmTptAddr *remAddr, CmTptAddr *localAddr, CmTptParam *tPar, U8 srvcType)

                                                               ;
typedef S16 (*HitConRsp) (Pst *pst, SpId spId, UConnId suConId, UConnId spConId)
                                                 ;
typedef S16 (*HitDatReq) (Pst *pst, SpId spId, UConnId spConId, Buffer *mBuf)
                                              ;
typedef S16 (*HitUDatReq) (Pst *pst, SpId spId, UConnId spConId, CmTptAddr *remAddr, CmTptAddr *srcAddr, CmIpHdrParm *hdrParm, CmTptParam *tPar, Buffer *mBuf)


                                              ;
typedef S16 (*HitDiscReq) (Pst *pst, SpId spId, U8 choice, UConnId conId, Action action, CmTptParam *tPar)
                                                                 ;
typedef S16 (*HitConInd) (Pst *pst, SuId suId, UConnId servConId, UConnId spconId, CmTptAddr *peerAddr)
                                                                      ;
typedef S16 (*HitConCfm) (Pst *pst, SuId suId, UConnId suConId, UConnId spconId, CmTptAddr *localAddr)
                                                                       ;
typedef S16 (*HitBndCfm) (Pst *pst, SuId suId, U8 status);
typedef S16 (*HitDatInd) (Pst *pst, SuId suId, UConnId suconId, Buffer *mBuf)
                                              ;






typedef S16 (*HitUDatInd) (Pst *pst, SuId suId, UConnId suconId, CmTptAddr *srcAddr, CmTptAddr *destAddr, CmIpHdrParm *hdrParm, Buffer *mBuf)


                                              ;

typedef S16 (*HitDiscInd) (Pst *pst, SuId suId, U8 choice, UConnId conId, Reason reason)
                                               ;
typedef S16 (*HitDiscCfm) (Pst *pst, SuId suId, U8 choice, UConnId conId, Action action)
                                                              ;
typedef S16 (*HitFlcInd) (Pst *pst, SuId suId, UConnId suConId, Reason reason)
                                               ;
# 99 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.x"
extern S16 HiUiHitBndReq (Pst *pst, SuId suId, SpId spId);
extern S16 HiUiHitUbndReq (Pst *pst, SpId spId, Reason reason);

extern S16 HiUiHitServOpenReq (Pst *pst, SpId spId, UConnId servConId, CmTptAddr *servTAddr, CmTptParam *tPar, CmIcmpFilter *icmpFilter, U8 srvcType)

                                                                            ;
extern S16 HiUiHitConReq (Pst *pst, SpId spId, UConnId suConId, CmTptAddr *remAddr, CmTptAddr *localAddr, CmTptParam *tPar, U8 srvcType)

                                                                    ;
extern S16 HiUiHitConRsp (Pst *pst, SpId spId, UConnId suConId, UConnId spConId)
                                                      ;
extern S16 HiUiHitDatReq (Pst *pst, SpId spId, UConnId spConId, Buffer *mBuf)
                                                   ;
extern S16 HiUiHitUDatReq (Pst *pst, SpId spId, UConnId spConId, CmTptAddr *remAddr, CmTptAddr *srcAddr, CmIpHdrParm *hdrParm, CmTptParam *tPar, Buffer *mBuf)


                                                   ;
extern S16 HiUiHitDiscReq (Pst *pst, SpId spId, U8 choice, UConnId conId, Action action, CmTptParam *tPar)

                                                       ;
extern S16 HiUiHitConInd (Pst *pst, SuId suId, UConnId servConId, UConnId spConId, CmTptAddr *peerAddr)
                                                                           ;
extern S16 HiUiHitConCfm (Pst *pst, SuId suId, UConnId suConId, UConnId spConId, CmTptAddr *localAddr)
                                                                            ;
extern S16 HiUiHitBndCfm (Pst *pst, SuId suId, U8 status);
extern S16 HiUiHitDatInd (Pst *pst, SuId suId, UConnId suConId, Buffer *mBuf)
                                                   ;






extern S16 HiUiHitUDatInd (Pst *pst, SuId suId, UConnId suConId, CmTptAddr *srcAddr, CmTptAddr *destAddr, CmIpHdrParm *hdrParm, Buffer *mBuf)


                                                   ;

extern S16 HiUiHitDiscInd (Pst *pst, SuId suId, U8 choice, UConnId conId, Reason reason)
                                                                   ;
extern S16 HiUiHitDiscCfm (Pst *pst, SuId suId, U8 choice, UConnId conId, Action action)
                                                                   ;
extern S16 HiUiHitFlcInd (Pst *pst, SuId suId, UConnId suConId, Reason reason)
                                                                     ;
# 436 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.x"
extern S16 SbLiHitBndReq (Pst *pst, SuId suId, SpId spId);
extern S16 SbLiHitUbndReq (Pst *pst, SpId spId, Reason reason);


extern S16 SbLiHitServOpenReq (Pst *pst, SpId spId,UConnId servConId, CmTptAddr *servTAddr, CmTptParam *tPar, CmIcmpFilter *icmpFilter, U8 srvcType)

                                                                            ;
extern S16 SbLiHitUDatReq (Pst *pst, SpId spId, UConnId spConId, CmTptAddr *remAddr, CmTptAddr *srcAddr, CmIpHdrParm *hdrParm, CmTptParam *tPar, Buffer *mBuf)


                                                   ;
extern S16 SbLiHitDiscReq (Pst *pst, SpId spId, U8 choice, UConnId conId, Action action, CmTptParam *tPar)

                                                       ;
extern S16 SbLiHitConCfm (Pst *pst, SuId suId, UConnId suConId, UConnId spConId, CmTptAddr *localAddr)
                                                                            ;
extern S16 SbLiHitBndCfm (Pst *pst, SuId suId, U8 status);






extern S16 SbLiHitUDatInd (Pst *pst, SuId suId, UConnId suConId, CmTptAddr *srcAddr, CmTptAddr *remAddr, CmIpHdrParm *ipHdrParm, Buffer *mBuf)


                                                   ;

extern S16 SbLiHitDiscInd (Pst *pst, SuId suId, U8 choice, UConnId conId, Reason reason)
                                                                   ;
extern S16 SbLiHitDiscCfm (Pst *pst, SuId suId, U8 choice, UConnId conId, Action action)
                                                                   ;
# 665 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.x"
extern S16 EgLiHitBndReq (Pst *pst, SuId suId, SpId spId);

extern S16 EgLiHitUbndReq (Pst *pst, SpId spId, Reason reason);

extern S16 EgLiHitServOpenReq (Pst *pst, SpId spId, UConnId servConId, CmTptAddr *servTAddr, CmTptParam *tPar, CmIcmpFilter *icmpFilter, U8 srvcType)

                                                                       ;

extern S16 EgLiHitConCfm (Pst *pst, SpId spId, UConnId suConnId, UConnId spConnId, CmTptAddr *localAddr )
                                                                         ;

extern S16 EgLiHitUDatReq (Pst *pst, SpId spId, UConnId spConId, CmTptAddr *remAddr, CmTptAddr *srcAddr, CmIpHdrParm *hdrParm, CmTptParam *tPar, Buffer *mBuf)


                                                   ;
extern S16 EgLiHitDiscReq (Pst *pst, SpId spId, U8 choice, UConnId conId, Action action, CmTptParam *tPar)

                                                       ;

extern S16 EgLiHitBndCfm (Pst *pst, SuId suId, U8 status);
extern S16 EgLiHitUDatInd (Pst *pst, SuId suId, UConnId suConId, CmTptAddr *srcAddr, CmTptAddr *remAddr, CmIpHdrParm *ipHdrParm, Buffer *mBuf)


                                                   ;
extern S16 EgLiHitDiscInd (Pst *pst, SuId suId, U8 choice, UConnId conId, Reason reason)
                                                                   ;
extern S16 EgLiHitDiscCfm (Pst *pst, SuId suId, U8 choice, UConnId conId, Action action)
                                                                   ;
# 806 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.x"
extern S16 cmPkHitBndReq (Pst *pst, SuId suId, SpId spId);
extern S16 cmPkHitUbndReq (Pst *pst, SpId spId, Reason reason);
extern S16 cmPkHitServOpenReq (Pst *pst, SpId spId, UConnId servConId, CmTptAddr *servTAddr, CmTptParam *tPar, CmIcmpFilter *icmpFilter, U8 srvcType)

                                                                            ;
extern S16 cmPkHitConReq (Pst *pst, SpId spId, UConnId suConId, CmTptAddr *remAddr, CmTptAddr *localAddr, CmTptParam *tPar, U8 srvcType)

                                                                    ;
extern S16 cmPkHitConRsp (Pst *pst, SpId spId, UConnId suConId, UConnId spConId)
                                                      ;
extern S16 cmPkHitDatReq (Pst *pst, SpId spId, UConnId spConId, Buffer *mBuf)
                                                   ;
extern S16 cmPkHitUDatReq (Pst *pst, SpId spId, UConnId spConId, CmTptAddr *remAddr, CmTptAddr *srcAddr, CmIpHdrParm *ipHdrParm, CmTptParam *tPar, Buffer *mBuf)


                                                   ;
extern S16 cmPkHitDiscReq (Pst *pst, SpId spId, U8 choice, UConnId conId, Action action, CmTptParam *tPar)

                                                       ;
extern S16 cmPkHitConInd (Pst *pst, SuId suId, UConnId servConId, UConnId spConId, CmTptAddr *peerAddr)
                                                                           ;
extern S16 cmPkHitConCfm (Pst *pst, SuId suId, UConnId suConId, UConnId spConId, CmTptAddr *localAddr)
                                                                            ;
extern S16 cmPkHitBndCfm (Pst *pst, SuId suId, U8 status);
extern S16 cmPkHitDatInd (Pst *pst, SuId suId, UConnId suConId, Buffer *mBuf)
                                                   ;






extern S16 cmPkHitUDatInd (Pst *pst, SuId suId, UConnId suConId, CmTptAddr *arcAddr, CmTptAddr *destAddr, CmIpHdrParm *ipHdrParm, Buffer *mBuf)


                                                   ;

extern S16 cmPkHitDiscInd (Pst *pst, SuId suId, U8 choice, UConnId conId, Reason reason)
                                                                   ;
extern S16 cmPkHitDiscCfm (Pst *pst, SuId suId, U8 choice, UConnId conId, Action action)
                                                                   ;
extern S16 cmPkHitFlcInd (Pst *pst, SuId suId, UConnId suConId, Reason reason)
                                                                     ;
# 869 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/hit.x"
extern S16 cmUnpkHitBndReq (HitBndReq func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkHitUbndReq (HitUbndReq func, Pst *pst, Buffer *mBuf);

extern S16 cmUnpkHitServOpenReq (HitServOpenReq func, Pst *pst, Buffer *mBuf)
                                                   ;
extern S16 cmUnpkHitConReq (HitConReq func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkHitConRsp (HitConRsp func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkHitDatReq (HitDatReq func, Pst *pst, Buffer *mBuf);




extern S16 cmUnpkHitUDatReq (HitUDatReq func, Pst *pst, Buffer *mBuf);

extern S16 cmUnpkHitDiscReq (HitDiscReq func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkHitConInd (HitConInd func, Pst *pst, Buffer *mBuf)
                                                   ;
extern S16 cmUnpkHitConCfm (HitConCfm func, Pst *pst, Buffer *mBuf)
                                                   ;
extern S16 cmUnpkHitBndCfm (HitBndCfm func, Pst *pst, Buffer *mBuf)
                                                   ;
extern S16 cmUnpkHitDatInd (HitDatInd func, Pst *pst, Buffer *mBuf)
                                                   ;




extern S16 cmUnpkHitUDatInd (HitUDatInd func, Pst *pst, Buffer *mBuf)
                                                   ;


extern S16 cmUnpkHitDiscInd (HitDiscInd func, Pst *pst, Buffer *mBuf)
                                                   ;
extern S16 cmUnpkHitDiscCfm (HitDiscCfm func, Pst *pst, Buffer *mBuf)
                                                   ;
extern S16 cmUnpkHitFlcInd (HitFlcInd func, Pst *pst, Buffer *mBuf)
                                                   ;
# 64 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x" 1
# 32 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
typedef struct hiRxSts
{
   StsCntr numCons;
   StsCntr numRxBytes;
   StsCntr numRxTcpMsg;
   StsCntr numRxUdpMsg;
   StsCntr numRxRawMsg;
   StsCntr numRxTlsMsg;




} HiRxSts;




typedef struct hiTxSts
{
   StsCntr numCons;
   StsCntr numTxBytes;
   StsCntr numTxTcpMsg;
   StsCntr numTxUdpMsg;
   StsCntr numTxRawMsg;
   StsCntr numTxTlsMsg;




} HiTxSts;




typedef struct hiErrSts
{
   StsCntr sockTxErr;
   StsCntr sockRxErr;
   StsCntr sockOpenErr;
   StsCntr sockBindErr;
   StsCntr sockCnctErr;
   StsCntr sockLstnErr;
   StsCntr sockSOptErr;
   StsCntr sockClosErr;
   StsCntr sockShutErr;
   StsCntr rxMsgVerErr;
   StsCntr numFlcInd;

} HiErrSts;
# 113 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
typedef struct hiPendOp
{
   Bool flag;
   Header hdr;
   U8 action;
   Elmnt elmnt;
   U16 numRem;
   Pst lmPst;

} HiPendOp;
# 147 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
typedef struct hiSap
{
   SpId spId;
   SuId suId;
   State state;




   Bool resCongStrt;
   Bool resCongDrop;

   UConnId lstSpConId;

   HiSapCfg cfg;
   HiTxSts txSts;
   Bool trc;
   S16 trcLen;

   Pst uiPst;
   CmHashListCp conCbHlCp;

   HiPendOp pendOp;
# 180 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
   Ent contEnt;






   CmTimer congTimers[1];
} HiSap;



typedef struct hiConCb
{
   CmHashListEnt conCbHlEnt;





   CmHashListEnt rdFdHlEnt;
   CmHashListEnt wrFdHlEnt;
   CmLList icmpLstEnt;

   HiSap *sap;
   UConnId suConId;
   UConnId spConId;

   State state;
   U8 srvcType;
   U32 flag;
   U8 protocol;
   Bool priority;
   U8 flc;
   U16 fdGrpNum;

   CmInetFd conFd;
   CmTptAddr peerAddr;
   CmTptAddr locTptAddr;

   Queue txQ;
   U32 txQSize;

   Bool awaitHdr;
   U32 rxLen;
   U32 pendLen;
   Buffer *rxBuf;
   Bool hdrIncldFlag;

   U8 ipParamMask;
   U8 ipTos;
   U8 ipTtl;
   U8 mCastTtl;

   U8 icmpType;
   U16 icmpMask;
   U8 filterProtocol;
   U8 numFilters;
   CmIcmpError *icmpError;
# 300 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
} HiConCb;
# 319 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
typedef struct hiThrMsg
{





   S16 type;
   SpId spId;
   UConnId spConId;
   union
   {
      Reason reason;
      Action action;

   } disc;
# 343 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
} HiThrMsg;




typedef struct hiFdGrp
{
   U16 fdGrpNum;
   Bool procIcmp;




   U32 numFds;
   U16 numWrFds;
   CmHashListCp rdFdHlCp;
   CmHashListCp wrFdHlCp;
   CmInetFdSet readFdSet;
   CmInetFdSet writeFdSet;
   CmInetFdSetInfo fdSetInfo;

   HiRxSts genRxSts;
   HiRxSts *rxSts;

   CmInetFd servFd;
   CmInetAddr servAddr;
# 381 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
} HiFdGrp;
# 411 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
typedef struct _hiCb
{





   TskInit init;
   HiSap **saps;

   HiGenCfg cfg;
   HiErrSts errSts;

   U16 numFdGrps;
   HiFdGrp **fdGrps;

   CmInetFd resvConFd;





   CmInetFd icmpConFd;
   U8 icmpUsers;
   CmLListCp icmpLstCp;
# 459 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
   HiPendOp pendOp;
   U16 lastGrp;
# 487 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
   CmTimer timers[1];






   CmTqCp tqCp;
   CmTqType tq[12];







} HiCb;
# 512 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
extern HiCb hiCb;







typedef S8 HiLocalInf;
# 557 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
extern S16 hiRecvTsk (Pst *pst, Buffer *mBuf);
extern S16 hiGetSid (SystemId *sid);







extern S16 hiActvTmr (Void);


extern S16 hiTmrEvnt (U32 cb, S16 evnt);
extern S16 hiScanPermTsk (Pst *tPst, Buffer *mBuf);



extern Void hiSendLmCfm (Pst *pst, U8 cfmType, Header *hdr, U16 status, U16 reason, HiMngmt *cfm)

                                                                ;
extern Void hiSendAlarm (U16 cgy, U16 evnt, U16 cause, HiAlarmInfo *info)
                                                         ;
extern S16 hiCfgGen (HiGenCfg *hiGen);
extern S16 hiCfgSap (HiSapCfg *cfg);



extern S16 hiShutdown (Void);
extern S16 hiCntrlGen (Pst *pst, HiMngmt *cntrl, Header *hdr);
extern S16 hiCntrlSap (Pst *pst, HiMngmt *cntrl, Header *hdr);
extern S16 hiCntrlSapGrp (Pst *pst, HiMngmt *cntrl, Header *hdr);
extern S16 hiGetGenSts (HiGenSts *genSts);
extern S16 hiZeroGenSts (Void);
extern S16 hiGetSapSts (HiSapSts *sapSts, HiSap *sap);
extern S16 hiZeroSapSts (HiSap *sap);
extern Void hiTrcBuf (HiSap *sap, U16 evnt, Buffer *mBuf);
# 603 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
extern S16 hiAllocConCb (HiSap *sap, UConnId suConId, U8 srvcType, U8 *type, HiConCb **conCb)

                                                       ;
extern S16 hiCompleteConCb (HiConCb *conCb);
extern S16 hiAssignConCb (HiConCb *conCb, U8 type);
extern S16 hiFindConCb (HiSap *sap, UConnId spConId, HiConCb **conCb)
                                                       ;
extern S16 hiFindConCbSuConId (HiSap *sap, UConnId suConId, HiConCb **conCb)
                                                       ;
extern Void hiDoneWithConCb (HiConCb *conCb);
extern S16 hiEnqueueForTx (HiConCb *conCb, Buffer *mBuf);



extern Void hiProcThrDelCon (HiFdGrp *fdGrp, HiThrMsg *tMsg, CmInetFdSet *selRdFdSet, CmInetFdSet *selWrFdSet, S16 *setFds)

                                                                            ;
extern S16 hiSendThrMsg (U16 fdGrpNum, HiThrMsg *tMsg);
extern S16 hiProcThrMsg (HiFdGrp *fdGrp, CmInetFdSet *selRdFdSet, CmInetFdSet *selWrFdSet, S16 *setFds)
                                                                            ;



extern S16 hiChkRes (HiSap *sap);
extern Void hiChkFlc (HiConCb *conCb, U32 posLen, U32 negLen);



extern S16 hiCreateSock (Bool server, U8 type, CmTptAddr *tptAddr, CmTptParam *tPar, HiConCb *conCb)

                                                      ;
# 644 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi.x"
extern S16 hiSetSockOpt (HiConCb *conCb, CmTptParam *tPar);
extern S16 hiTxMsg (HiConCb *conCb, Buffer *mBuf, MsgLen *txLen, Buffer **qBuf, HiThrMsg *tMsg)

                                                      ;



extern S16 hiProcessIcmpReq (HiConCb *conCb, CmIcmpFilter *icmpFilter)
                                                                ;
extern S16 hiAddTPKTHdr (Buffer *mBuf, MsgLen *newLen);
extern S16 hiProcHdrParm (HiConCb *conCb, CmTptAddr *srcAddr, CmTptAddr *remAddr, CmIpHdrParm *hdrParm, Buffer *mBuf, MsgLen mLen)


                                                                 ;
# 65 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2



# 1 "/usr/include/linux/version.h" 1 3 4
# 69 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 2

extern U8 stopSchdTmr;
# 193 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiSockInit
(
Void
)



{
   S16 ret;


   ;;



   ret = cmInetInit();
   if (ret != 0)
      return((256 + 1));



   ret = cmInetSocket(
# 214 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        SOCK_DGRAM
# 214 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        , &hiCb.resvConFd, 0);;
   if (ret != 0)
   {
      cmInetDeInit();
     
                                                         ;
      return((256 + 3));
   }
# 250 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return(0);
}
# 269 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiInitFdGrp
(
HiFdGrp *fdGrp,
U16 fdGrpNum
)





{
   S16 ret;
   CmInetAddr servAddr;





   ;;



   fdGrp->fdGrpNum = fdGrpNum;



   { S16 _ret; _ret = SGetSBuf(hiCb.init.region, hiCb.init.pool, (Data **)&fdGrp->rxSts, hiCb.cfg.numSaps * sizeof (HiRxSts)); if (_ret == 0) cmMemset((U8*)fdGrp->rxSts, 0, hiCb.cfg.numSaps * sizeof (HiRxSts)); else fdGrp->rxSts = 0L; };
   if (!fdGrp->rxSts)
      return(1);



   ret = cmInetFdSetInfoInit(&fdGrp->fdSetInfo);
   if (ret != 0)
      goto hiInitFdGrpCleanup1;



   ret = cmHashListInit(&fdGrp->rdFdHlCp, hiCb.cfg.numFdBins,
                        ((U32)(&(((HiConCb *)0)->rdFdHlEnt))), 1,
                        5,
                        hiCb.init.region, hiCb.init.pool);
   if (ret != 0)
      goto hiInitFdGrpCleanup1;



   ret = cmHashListInit(&fdGrp->wrFdHlCp, hiCb.cfg.numFdBins,
                        ((U32)(&(((HiConCb *)0)->wrFdHlEnt))), 1,
                        5,
                        hiCb.init.region, hiCb.init.pool);
   if (ret != 0)
      goto hiInitFdGrpCleanup2;



   
# 325 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  do { int __d0, __d1; __asm__ __volatile__ ("cld; rep; " "stosl" : "=c" (__d0), "=D" (__d1) : "a" (0), "0" (sizeof (fd_set) / sizeof (__fd_mask)), "1" (&((
# 325 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  &fdGrp->readFdSet
# 325 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  )->fds_bits)[0]) : "memory"); } while (0)
# 325 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                    ;
   
# 326 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  do { int __d0, __d1; __asm__ __volatile__ ("cld; rep; " "stosl" : "=c" (__d0), "=D" (__d1) : "a" (0), "0" (sizeof (fd_set) / sizeof (__fd_mask)), "1" (&((
# 326 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  &fdGrp->writeFdSet
# 326 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  )->fds_bits)[0]) : "memory"); } while (0)
# 326 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                     ;



   fdGrp->numFds = 0;
   fdGrp->numWrFds = 0;
# 340 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   fdGrp->procIcmp = 0;
   if (fdGrpNum == 0)
      fdGrp->numFds++;
# 352 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   cmMemset((U8 *)&servAddr, 0, sizeof (CmInetAddr));;
   { (&servAddr)->address = 0x7f000001; (&servAddr)->port = 0; };
   ret = cmInetSocket(
# 354 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        SOCK_DGRAM
# 354 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        , &fdGrp->servFd, 0);;
   if (ret == 0)
   {
      cmInetBind(&fdGrp->servFd, &servAddr);
      if (ret == 0)
         ret = cmInetGetSockName(&fdGrp->servFd, &fdGrp->servAddr);
   }
   if (ret != 0)
      goto hiInitFdGrpCleanup3;


   
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ((void) (((
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  &fdGrp->readFdSet
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  )->fds_bits)[__extension__ ({ long int __d = (
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  (&fdGrp->servFd)->fd
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] |= ((__fd_mask) (1UL << ((
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  (&fdGrp->servFd)->fd
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ) % (8 * (int) sizeof (__fd_mask)))))))
# 365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                   ;


   fdGrp->numFds++;
# 406 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return(0);
# 426 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
hiInitFdGrpCleanup3:
   cmInetClose(&fdGrp->servFd);;
   cmHashListDeinit(&fdGrp->wrFdHlCp);

hiInitFdGrpCleanup2:
   cmHashListDeinit(&fdGrp->rdFdHlCp);

hiInitFdGrpCleanup1:
   SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)fdGrp->rxSts, hiCb.cfg.numSaps * sizeof (HiRxSts));;


   return(ret);
}
# 458 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiDeInitFdGrp
(
HiFdGrp *fdGrp,
U16 fdGrpNum
)





{
   S16 ret;
   HiConCb *conCb = 0L;


   ;;
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ((void) (((
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  &fdGrp->readFdSet
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  )->fds_bits)[__extension__ ({ long int __d = (
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  (&fdGrp->servFd)->fd
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  (&fdGrp->servFd)->fd
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ) % (8 * (int) sizeof (__fd_mask)))))))
# 499 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                   ;
   cmInetClose(&fdGrp->servFd);;
   cmMemset((U8 *)&fdGrp->servAddr, 0, sizeof (CmInetAddr));;


   
# 504 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  do { int __d0, __d1; __asm__ __volatile__ ("cld; rep; " "stosl" : "=c" (__d0), "=D" (__d1) : "a" (0), "0" (sizeof (fd_set) / sizeof (__fd_mask)), "1" (&((
# 504 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  &fdGrp->readFdSet
# 504 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  )->fds_bits)[0]) : "memory"); } while (0)
# 504 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                    ;
   
# 505 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  do { int __d0, __d1; __asm__ __volatile__ ("cld; rep; " "stosl" : "=c" (__d0), "=D" (__d1) : "a" (0), "0" (sizeof (fd_set) / sizeof (__fd_mask)), "1" (&((
# 505 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  &fdGrp->writeFdSet
# 505 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  )->fds_bits)[0]) : "memory"); } while (0)
# 505 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                     ;


   fdGrp->numFds = 0;




   while ((ret = cmHashListGetNext(&fdGrp->rdFdHlCp, 0L,
                     (U32 *)&conCb)) == 0)
      cmHashListDelete(&fdGrp->rdFdHlCp, (U32)conCb);

   fdGrp->numWrFds = 0;
   while ((ret = cmHashListGetNext(&fdGrp->wrFdHlCp, 0L,
                     (U32 *)&conCb)) == 0)
      cmHashListDelete(&fdGrp->wrFdHlCp, (U32)conCb);


   cmHashListDeinit(&fdGrp->wrFdHlCp);
   cmHashListDeinit(&fdGrp->rdFdHlCp);


   SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)fdGrp->rxSts, hiCb.cfg.numSaps * sizeof (HiRxSts));;


   return(0);
}
# 620 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static Void hiCompletePendOp
(
HiSap *sap
)




{
   Pst pst;
   Header hdr;
   HiMngmt cfmMsg;


   ;;



   if (!sap->pendOp.flag && !hiCb.pendOp.flag)
   {
      { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 640 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ,
                                                641
# 640 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiCompletePendOp(): invalid state!\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                 ;
      return;
   }



   cmMemcpy((U8 *)&hdr, (U8 *)&sap->pendOp.hdr, sizeof (Header));




   cmMemcpy((U8 *)&pst, (U8 *)&sap->pendOp.lmPst, sizeof (Pst));




   sap->contEnt = 0x0E;
   sap->state = 0x1;
   sap->pendOp.flag = 0;

   if (sap->pendOp.action == 7 || sap->pendOp.action == 36)
   {
      cmHashListDeinit(&sap->conCbHlCp);






      hiCb.saps[sap->spId] = 0L;
      SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)sap, sizeof (HiSap));;
   }







   if (hiCb.pendOp.flag)
   {
      if (hiCb.pendOp.action == 36)
         return;





      hiCb.pendOp.numRem--;
      if (hiCb.pendOp.numRem != 0)
      {





         return;
      }




   }



   hiSendLmCfm(&pst, 2, &hdr, 0, 0,
               &cfmMsg);


   return;
}
# 730 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiAllocSap
(
HiSapCfg *cfg
)




{
   S16 ret;

   HiSap *sap = 0L;


   ;;



   { S16 _ret; _ret = SGetSBuf(hiCb.init.region, hiCb.init.pool, (Data **)&sap, sizeof (HiSap)); if (_ret == 0) cmMemset((U8*)sap, 0, sizeof (HiSap)); else sap = 0L; };
   if (!sap)
      return(4);



   cmMemcpy((U8 *)&sap->cfg, (U8 *)cfg, sizeof (HiSapCfg));



   sap->spId = cfg->spId;
   sap->uiPst.selector = cfg->uiSel;
   sap->uiPst.prior = cfg->uiPrior;
   sap->uiPst.route = cfg->uiRoute;




   sap->uiPst.region = hiCb.init.region;
   sap->uiPst.pool = hiCb.init.pool;

   sap->uiPst.srcEnt = hiCb.init.ent;






   sap->suId = (SuId)0xFFFF;
   sap->uiPst.dstProcId = 0xFFFF;
   sap->uiPst.dstEnt = 0xFF;
   sap->uiPst.dstInst = 0xFF;
   sap->uiPst.srcProcId = 0xFFFF;
   sap->uiPst.srcInst = 0xFF;
   sap->uiPst.event = 0x00;






   sap->contEnt = 0xFF;
# 830 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   ret = cmHashListInit(&sap->conCbHlCp, cfg->numBins,
                        ((U32)(&(((HiConCb *)0)->conCbHlEnt))), 0,
                        5,
                        hiCb.init.region, hiCb.init.pool);
   if (ret != 0)
   {
      SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)sap, sizeof (HiSap));;
      return(4);
   }
# 864 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   hiCb.saps[sap->spId] = sap;



   sap->state = 0x1;



   cmInitTimers(sap->congTimers, 1);

   return(0);
}
# 905 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiCfgGen
(
HiGenCfg *hiGen
)




{
   S16 i, ret;
   Size sMemSize;
   S32 sockLibMemSize = 0;







   ;;
# 936 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (hiGen->numSaps < 1 || hiGen->numFdBins < 1)
      return(13);
# 950 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (hiCb.init.cfgDone)
   {



      cmMemcpy((U8 *)&hiCb.init.lmPst, (U8 *) &hiGen->lmPst, sizeof(Pst));

      hiCb.init.lmPst.srcProcId = hiCb.init.procId;
      hiCb.init.lmPst.srcEnt = hiCb.init.ent;
      hiCb.init.lmPst.srcInst = hiCb.init.inst;
      hiCb.init.lmPst.event = 0x00;



      return(0);
   }



   cmMemcpy((U8 *)&hiCb.cfg, (U8 *)hiGen, sizeof (HiGenCfg));



   if (hiCb.cfg.numFdsPerSet < 1)
      hiCb.cfg.numFdsPerSet = 1;
   if (hiCb.cfg.numClToAccept < 1)
      hiCb.cfg.numClToAccept = 1;
   if (hiCb.cfg.numUdpMsgsToRead < 1)
      hiCb.cfg.numUdpMsgsToRead = 1;
   if (hiCb.cfg.numRawMsgsToRead < 1)
      hiCb.cfg.numRawMsgsToRead = 1;
# 994 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   hiCb.numFdGrps = 1;



   hiCb.cfg.numFdsPerSet = (U16)hiCb.cfg.numCons;






   sMemSize = hiCb.cfg.numSaps * (sizeof (HiSap) + sizeof (U32));


   sMemSize += hiCb.cfg.numCons * sizeof (HiConCb);


   sMemSize += hiCb.cfg.numCons * sizeof(CmListEnt);


   cmInetGetMemSize(&sockLibMemSize);
   sMemSize += sockLibMemSize;


   sMemSize += hiCb.numFdGrps * (sizeof (HiFdGrp) + sizeof (U32));


   sMemSize += 2 * hiCb.numFdGrps *
                  hiCb.cfg.numFdsPerSet * sizeof(CmListEnt);
# 1033 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   { if ((&(hiCb.init))->dbgMask & (0x00000001)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,

                                                       "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 1033 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   ,

                                                       1035
# 1033 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "SGetSMem(region(%d), size(%ld), &pool(%p))\n", hiCb.init.region, sMemSize, &hiCb.init.pool); SPrint((&(hiCb.init))->prntBuf); } }

                                                        ;
# 1045 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   ret = SGetSMem(hiCb.init.region, (Size)sMemSize,
                  &hiCb.init.pool);
   if (ret != 0)
      return(4);




   { S16 _ret; _ret = SGetSBuf(hiCb.init.region, hiCb.init.pool, (Data **)&hiCb.saps, hiGen->numSaps * sizeof (U32)); if (_ret == 0) cmMemset((U8*)hiCb.saps, 0, hiGen->numSaps * sizeof (U32)); else hiCb.saps = 0L; };
   if (!hiCb.saps)
   {
      ret = 4;
      goto hiCfgGenCleanup1;
   }
   for (i = 0; i < (S16)hiCb.cfg.numSaps; i++)
     *(hiCb.saps + i) = 0L;





   cmMemcpy((U8 *)&hiCb.init.lmPst, (U8 *)&hiGen->lmPst,
            sizeof (Pst));
   hiCb.init.lmPst.srcProcId = hiCb.init.procId;
   hiCb.init.lmPst.srcEnt = hiCb.init.ent;
   hiCb.init.lmPst.srcInst = hiCb.init.inst;
   hiCb.init.lmPst.event = 0x00;



   hiCb.init.region = hiCb.cfg.initRegion;
   hiCb.init.pool = hiCb.cfg.initPool;
# 1092 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   { S16 _ret; _ret = SGetSBuf(hiCb.init.region, hiCb.init.pool, (Data **)&hiCb.fdGrps, hiCb.numFdGrps * sizeof (U32)); if (_ret == 0) cmMemset((U8*)hiCb.fdGrps, 0, hiCb.numFdGrps * sizeof (U32)); else hiCb.fdGrps = 0L; };
   if (!hiCb.fdGrps)
   {
      ret = 4;
      goto hiCfgGenCleanup3;
   }
   for (i = 0; i < hiCb.numFdGrps; i++)
      *(hiCb.fdGrps + i) = 0L;


   for (i = 0; i < hiCb.numFdGrps; i++)
   {
      { S16 _ret; _ret = SGetSBuf(hiCb.init.region, hiCb.init.pool, (Data **)&hiCb.fdGrps[i], sizeof (HiFdGrp)); if (_ret == 0) cmMemset((U8*)hiCb.fdGrps[i], 0, sizeof (HiFdGrp)); else hiCb.fdGrps[i] = 0L; };
      if (!hiCb.fdGrps[i])
      {
         ret = 4;
         goto hiCfgGenCleanup4;
      }
   }
# 1126 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   cmLListInit(&hiCb.icmpLstCp);
   hiCb.icmpUsers = 0;
# 1155 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   ret = hiSockInit();;
   if (ret != 0)
   {
      ret = (256 + 1);
      goto hiCfgGenCleanup5;
   }



   for (i = 0; i < hiCb.numFdGrps; i++)
   {
      ret = hiInitFdGrp(hiCb.fdGrps[i], i);
      if (ret != 0)
      {
         ret = 4;
         goto hiCfgGenCleanup6;
      }
   }



   hiCb.tqCp.tmrLen = 12;
# 1257 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (!hiCb.cfg.permTsk)
   {
# 1267 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      { if ((&(hiCb.init))->dbgMask & (0x00000001)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,

                                                                 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 1267 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ,

                                                                 1269
# 1267 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "SRegTmr(entity(%d), inst(%d), period(%d), tmrFunc)\n", hiCb.init.ent, hiCb.init.inst, hiCb.cfg.schdTmrVal); SPrint((&(hiCb.init))->prntBuf); } }

                                                                  ;

      ret = SRegCfgTmr(hiCb.init.ent,hiCb.init.inst,hiCb.cfg.schdTmrVal,100,hiActvTmr)
                                                   ;

      if (ret != 0)
      {
         ret = 7;
         i = hiCb.numFdGrps;
         goto hiCfgGenCleanup6;
      }


      cmInitTimers(hiCb.timers, 1);


      { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = hiCb.timers; _arg.cb = (U32)&hiCb; _arg.evnt = 1; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };







   SDetachTTsk((Ent)hiCb.init.ent, (Inst)(hiCb.init.inst + 1));
   SDeregTTsk ((Ent)hiCb.init.ent, (Inst)(hiCb.init.inst + 1));


   }

   else
 {
# 1320 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      { if ((&(hiCb.init))->dbgMask & (0x00000001)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,


                             "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 1320 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ,


                             1323
# 1320 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "SRegTmr(entity(%d), inst(%d), period(%d), tmrFunc(%lx))\n", hiCb.init.ent, hiCb.init.inst, 2, (U32)hiActvTmr); SPrint((&(hiCb.init))->prntBuf); } }


                              ;

      ret = SRegCfgTmr(hiCb.init.ent,hiCb.init.inst,2,100,hiActvTmr)
                                                      ;

      if (ret != 0 )
  {
   ret = 7;
         i = hiCb.numFdGrps;
   goto hiCfgGenCleanup6;
  }

 }




   hiCb.init.cfgDone = 1;


   return(0);
# 1371 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   i = hiCb.numFdGrps;

hiCfgGenCleanup6:
   while (--i >= 0)
      hiDeInitFdGrp(hiCb.fdGrps[i], i);
   { cmInetClose(&hiCb.resvConFd); cmInetDeInit(); };

   i = hiCb.numFdGrps;

hiCfgGenCleanup5:




hiCfgGenCleanup4:
   while (--i >= 0)
      SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)hiCb.fdGrps[i], sizeof (HiFdGrp));;
   SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)hiCb.fdGrps, hiCb.numFdGrps * sizeof (U32));;

hiCfgGenCleanup3:





   SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)hiCb.saps, hiGen->numSaps * sizeof (U32));;

hiCfgGenCleanup1:
   SPutSMem(hiCb.init.region, hiCb.init.pool);


   return(ret);
}
# 1424 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiCfgSap
(
HiSapCfg *cfg
)




{
   S16 ret;
   HiSap *sap;


   ;;
# 1452 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (cfg->numBins < 1)
      return(13);
# 1467 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   sap = hiCb.saps[cfg->spId];


   if (sap)
   {

      cmMemcpy((U8 *)sap->cfg.hdrInf, (U8 *)cfg->hdrInf,
               (5 * sizeof (HiHdrInfo)));
# 1501 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      return(0);
   }



   ret = hiAllocSap(cfg);


   return(ret);
}
# 1530 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 Void hiSendLmCfm
(
Pst *pst,
U8 cfmType,
Header *hdr,
U16 status,
U16 reason,
HiMngmt *cfm
)
# 1548 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
{
   Pst cfmPst;


   ;;


   cmMemset((U8 *)&cfmPst, 0, sizeof (Pst));;

   cfm->hdr.elmId.elmnt = hdr->elmId.elmnt;
   cfm->hdr.transId = hdr->transId;

   cfm->cfm.status = status;
   cfm->cfm.reason = reason;


   cfmPst.srcEnt = hiCb.init.ent;
   cfmPst.srcInst = hiCb.init.inst;
   cfmPst.srcProcId = hiCb.init.procId;
   cfmPst.dstEnt = pst->srcEnt;
   cfmPst.dstInst = pst->srcInst;
   cfmPst.dstProcId = pst->srcProcId;
   cfmPst.selector = hdr->response.selector;
   cfmPst.prior = hdr->response.prior;
   cfmPst.route = hdr->response.route;
   cfmPst.region = hdr->response.mem.region;
   cfmPst.pool = hdr->response.mem.pool;
# 1583 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   switch (cfmType)
   {
      case 1:
         HiMiLhiCfgCfm(&cfmPst, cfm);
         break;

      case 3:
         HiMiLhiStsCfm(&cfmPst, cfm);
         break;

      case 2:
         HiMiLhiCntrlCfm(&cfmPst, cfm);
         break;

      case 4:
         HiMiLhiStaCfm(&cfmPst, cfm);
         break;

      default:
         { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                               "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 1602 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ,
                                                               1603
# 1602 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiSendLmCfm(): unknown parameter cfmType\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                ;
         break;
   }


   return;
}
# 1627 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 Void hiSendAlarm
(
U16 cgy,
U16 evnt,
U16 cause,
HiAlarmInfo *info
)







{
   HiMngmt sm;


   ;;



   if (!hiCb.init.cfgDone)
   {
      { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 1651 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ,
                                                                 1652
# 1651 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiSendAlarm(): general configuration not done\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                  ;
      return;
   }



   if (hiCb.init.usta)
   {
      cmMemset((U8 *)&sm, 0, sizeof (HiMngmt));;

      sm.hdr.elmId.elmnt = 5;
      sm.hdr.elmId.elmntInst1 = -1;
      sm.hdr.elmId.elmntInst2 = -1;
      sm.hdr.elmId.elmntInst3 = -1;

      sm.t.usta.alarm.category = cgy;
      sm.t.usta.alarm.event = evnt;
      sm.t.usta.alarm.cause = cause;

      cmMemcpy((U8 *)&sm.t.usta.info,
               (U8 *)info, sizeof (HiAlarmInfo));

      (Void)SGetDateTime(&sm.t.usta.alarm.dt);





      HiMiLhiStaInd(&(hiCb.init.lmPst), &sm);



   }


   return;
}
# 1705 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 Void hiTrcBuf
(
HiSap *sap,
U16 evnt,
Buffer *mBuf
)






{
   HiMngmt mgt;

   Buffer *trcBuf = 0L;
   Buffer *tmpBuf;
   MsgLen mLen;
   HiAlarmInfo info;
   S16 ret = 0;


   ;;



   if (!hiCb.init.cfgDone)
      return;







   info.spId = sap->spId;
   info.type = 3;



   cmMemset((U8 *)&mgt, 0, sizeof (HiMngmt));;
   SGetDateTime(&mgt.t.trc.dt);
   mgt.t.trc.evnt = evnt;


   mLen = 0;

   SFndLenMsg(mBuf, &mLen);
   if (sap->trcLen == -1 || sap->trcLen >= mLen)

      ret = SAddMsgRef(mBuf, hiCb.init.lmPst.region,
                       hiCb.init.lmPst.pool, &trcBuf);
   else if (sap->trcLen > 0)
   {

      ret = SAddMsgRef(mBuf, hiCb.init.lmPst.region,
                       hiCb.init.lmPst.pool, &trcBuf);
      if (ret == 0)
      {
         ret = SSegMsg(trcBuf, sap->trcLen, &tmpBuf);
         if (ret == 0)
            { SPutMsg(tmpBuf); };
      }
   }
   else

      trcBuf = 0L;



   if (ret != 0)
   {
      info.inf.mem.region = hiCb.init.lmPst.region;
      info.inf.mem.pool = hiCb.init.lmPst.pool;




      hiSendAlarm(4, 13,
            0, &info);
      return;
   }







   HiMiLhiTrcInd(&hiCb.init.lmPst, &mgt, trcBuf);






   return;
}
# 1821 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiShutdown
(
Void
)



{
   S16 i;
   Ent ent;
   Inst inst;
   Region region;



   ;;
# 1876 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (!hiCb.cfg.permTsk)
   {
      { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = hiCb.timers; _arg.cb = (U32)&hiCb; _arg.evnt = 1; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };




      SDeregCfgTmr(hiCb.init.ent,hiCb.init.inst,hiCb.cfg.schdTmrVal,100,hiActvTmr)
                                                ;

   }

   else
 {
# 1901 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      SDeregCfgTmr(hiCb.init.ent,hiCb.init.inst,2,100,hiActvTmr)
                                                   ;


   }





   i = hiCb.numFdGrps;
   while (--i >= 0)
   {
      hiDeInitFdGrp(hiCb.fdGrps[i], i);
      SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)hiCb.fdGrps[i], sizeof (HiFdGrp));;
   }
   SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)hiCb.fdGrps, hiCb.numFdGrps * sizeof (U32));;



   { cmInetClose(&hiCb.resvConFd); cmInetDeInit(); };
# 1938 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)hiCb.saps, hiCb.cfg.numSaps * sizeof (U32));;



   SPutSMem(hiCb.init.region, hiCb.init.pool);

   ent = hiCb.init.ent;
   inst = hiCb.init.inst;
   region = hiCb.init.region;







   cmMemset((U8 *)&hiCb, 0, sizeof(HiCb));;




   hiActvInit(ent, inst, region, 6);




   return(20);
}
# 1988 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiCntrlGen
(
Pst *pst,
HiMngmt *cntrl,
Header *hdr
)






{
   S16 i, ret, r;
   U8 action, subAction;
   HiThrMsg tMsg;
   Bool invSubAction = 0;


   ;;


   action = cntrl->t.cntrl.action;
   subAction = cntrl->t.cntrl.subAction;

   switch (action)
   {
      case 36:

         if(hiCb.init.cfgDone != 1)
            return(0);
         if (hiCb.pendOp.flag)
            return((256 + 12));






         stopSchdTmr = 0;


         hiCb.pendOp.flag = 1;
         hiCb.pendOp.action = action;
         cmMemcpy((U8 *)&hiCb.pendOp.lmPst, (U8 *)pst, sizeof (Pst));
         cmMemcpy((U8 *)&hiCb.pendOp.hdr, (U8 *)hdr, sizeof (Header));
         hiCb.pendOp.numRem = hiCb.numFdGrps;






         ret = (256 + 9);
         tMsg.type = 0x9;
         for (i = 0; i < hiCb.numFdGrps; i++)
         {
            r = hiSendThrMsg(i, &tMsg);
            if (r != 0)
            {

               { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                        "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 2049 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
               ,
                                                                        2050
# 2049 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
               ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiCntrlSap(): send message to group thread failed\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                         ;
               ret = (256 + 10);
               break;
            }
         }





         return(ret);


      case 1:
         if (subAction == 3)
         {
            hiCb.init.usta = 1;
         }

         else if (subAction == 5)
         {
            hiCb.init.dbgMask |= cntrl->t.cntrl.ctlType.hiDbg.dbgMask;
         }







         else
            invSubAction = 1;
         break;


      case 2:
         if (subAction == 3)
         {
            hiCb.init.usta = 0;
         }

         else if (subAction == 5)
         {
            hiCb.init.dbgMask &= ~(cntrl->t.cntrl.ctlType.hiDbg.dbgMask);
         }







         else
            invSubAction = 1;
         break;


      default:
        
                                                             ;
         return(9);
   }

   if (invSubAction)
   {
     
                                                         ;
      return(10);
   }


   return(0);
}
# 2148 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiCntrlSap
(
Pst *pst,
HiMngmt *cntrl,
Header *hdr
)






{
   S16 ret;
   U8 action, subAction;
   U16 i;
   SpId sapId;
   HiSap *sap;
   HiThrMsg tMsg;
 U8 numTmr = 0;


   ;;


   action = cntrl->t.cntrl.action;
   subAction = cntrl->t.cntrl.subAction;
# 2188 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   sapId = (subAction == 1 ?
            cntrl->t.cntrl.ctlType.sapId :
            cntrl->t.cntrl.ctlType.trcDat.sapId);
# 2204 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   sap = hiCb.saps[sapId];
# 2228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (subAction == 4)
   {
      if (action == 1)
      {
         sap->trc = 1;
         sap->trcLen = cntrl->t.cntrl.ctlType.trcDat.trcLen;
         return(0);
      }
      else if (action == 31 || action == 2)
      {
         sap->trc = 0;
         return(0);
      }
      else
         return(9);
   }



   if (action == 31 || action == 7)
   {




      if (sap->pendOp.flag)
         return((256 + 12));



      sap->pendOp.flag = 1;
      sap->pendOp.action = action;
      sap->pendOp.elmnt = 2;




      cmMemcpy((U8 *)&sap->pendOp.lmPst, (U8 *)pst, sizeof (Pst));



      cmMemcpy((U8 *)&sap->pendOp.hdr, (U8 *)hdr, sizeof (Header));
      sap->contEnt = 0x0E;
# 2281 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   for(numTmr = 0; numTmr < 1 ; numTmr++)
   {
      if(sap->congTimers[numTmr].tmrEvnt == 2)
      {

         { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
      }
   }
# 2302 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      tMsg.type = 0xA;
      tMsg.spId = sap->spId;
      for (i = 0; i < hiCb.numFdGrps; i++)
      {
         ret = hiSendThrMsg(i, &tMsg);
         if (ret != 0)
         {

            { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                     "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 2310 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            ,
                                                                     2311
# 2310 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiCntrlSap(): send message to group thread failed\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                      ;
            return((256 + 10));
         }
      }

      return((256 + 9));
   }



  
                                                    ;
   return(9);
}
# 2348 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiCntrlSapGrp
(
Pst *pst,
HiMngmt *cntrl,
Header *hdr
)






{
   S16 ret;
   U8 action;
   U16 i, j;
   HiSap *sap;
   Bool found, anySap;
   HiThrMsg tMsg;
 U8 numTmr = 0;


   ;;


   action = cntrl->t.cntrl.action;
# 2388 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (hiCb.pendOp.flag)
      return((256 + 12));
   for (i = 0; i < hiCb.cfg.numSaps; i++)
   {
      sap = hiCb.saps[i];
      if (sap && sap->pendOp.flag)
         return((256 + 12));
   }
# 2405 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   anySap = 0;
   hiCb.pendOp.numRem = 0;
   for (i = 0; i < hiCb.cfg.numSaps; i++)
   {
      sap = hiCb.saps[i];
      if (!sap)
         continue;

      found = 0;
      switch (cntrl->t.cntrl.subAction)
      {
         case 6:
            if (sap->uiPst.dstProcId == cntrl->t.cntrl.ctlType.dstProcId)
               found = 1;
            break;

         case 7:
            if (sap->uiPst.route == cntrl->t.cntrl.ctlType.route)
               found = 1;
            break;

         case 8:
            if (sap->uiPst.prior == cntrl->t.cntrl.ctlType.priority)
               found = 1;
            break;

         default:
           
                                                                    ;




            return(10);
      }

      if (!found)
         continue;



      if (action == 7
          || (action == 31 && sap->state == 0x2))
      {

         anySap = 1;



         if (hiCb.pendOp.numRem == 0)
         {
            hiCb.pendOp.flag = 1;
            hiCb.pendOp.action = action;
            hiCb.pendOp.elmnt = 85;
         }
         hiCb.pendOp.numRem++;



         sap->pendOp.flag = 1;
         sap->pendOp.action = action;
         sap->pendOp.elmnt = 85;




   cmMemcpy((U8 *)&sap->pendOp.lmPst, (U8 *)pst, sizeof (Pst));



   cmMemcpy((U8 *)&sap->pendOp.hdr, (U8 *)hdr, sizeof (Header));
# 2486 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         for(numTmr = 0; numTmr < 1 ; numTmr++)
         {
             if(sap->congTimers[numTmr].tmrEvnt == 2)
             {

               { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
             }
         }
# 2507 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         tMsg.type = 0xA;
         tMsg.spId = sap->spId;
         for (j = 0; i < hiCb.numFdGrps; j++)
         {
            ret = hiSendThrMsg(j, &tMsg);
            if (ret != 0)
            {




               { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                     "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 2518 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
               ,
                                                                     2519
# 2518 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
               ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiCntrlSapGrp(): send message to thread failed\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                      ;
               return((256 + 10));
            }
         }
      }
   }







   if (!anySap)
      return((256 + 2));


   return((256 + 9));
}
# 2555 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiGetGenSts
(
HiGenSts *genSts
)




{
   S16 i;
   HiFdGrp *fdGrp;
   HiSap *sap;


   ;;


   cmMemset((U8 *)genSts, 0, sizeof (HiGenSts));;


   for (i = 0; i < hiCb.numFdGrps; i++)
   {
      fdGrp = hiCb.fdGrps[i];

      genSts->numCons += fdGrp->genRxSts.numCons;
      genSts->numRxTcpMsg += fdGrp->genRxSts.numRxTcpMsg;
      genSts->numRxUdpMsg += fdGrp->genRxSts.numRxUdpMsg;
      genSts->numRxbytes += fdGrp->genRxSts.numRxBytes;
      genSts->numRxRawMsg += fdGrp->genRxSts.numRxRawMsg;
   }


   for (i = 0; i < hiCb.cfg.numSaps; i++)
   {
      sap = hiCb.saps[i];
      if (sap == 0L)
         continue;

      genSts->numCons += sap->txSts.numCons;
      genSts->numTxTcpMsg += sap->txSts.numTxTcpMsg;
      genSts->numTxUdpMsg += sap->txSts.numTxUdpMsg;
      genSts->numTxbytes += sap->txSts.numTxBytes;
      genSts->numTxRawMsg += sap->txSts.numTxRawMsg;
   }


   genSts->sockTxErr = hiCb.errSts.sockTxErr;
   genSts->sockRxErr = hiCb.errSts.sockRxErr;
   genSts->sockOpenErr = hiCb.errSts.sockOpenErr;
   genSts->sockBindErr = hiCb.errSts.sockBindErr;
   genSts->sockCnctErr = hiCb.errSts.sockCnctErr;
   genSts->sockLstnErr = hiCb.errSts.sockLstnErr;
   genSts->sockSOptErr = hiCb.errSts.sockSOptErr;
   genSts->sockClosErr = hiCb.errSts.sockClosErr;
   genSts->sockShutErr = hiCb.errSts.sockShutErr;
   genSts->rxMsgVerErr = hiCb.errSts.rxMsgVerErr;
   genSts->numFlcInd = hiCb.errSts.numFlcInd;


   return(0);
}
# 2633 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiZeroGenSts
(
Void
)



{
   S16 i;
   HiSap *sap;
   HiThrMsg tMsg;


   ;;



   cmMemset((U8 *)&hiCb.errSts, 0, sizeof(HiErrSts));;;



   for (i = 0; i < hiCb.numFdGrps; i++)
   {
      tMsg.type = 0x7;
      hiSendThrMsg(i, &tMsg);
   }



   for (i = 0; i < hiCb.cfg.numSaps; i++)
   {
      sap = hiCb.saps[i];
      if (!sap)
         continue;

      sap->txSts.numTxBytes = 0; sap->txSts.numTxTcpMsg = 0; sap->txSts.numTxUdpMsg = 0; sap->txSts.numTxRawMsg = 0;;
   }


   return(0);
}
# 2691 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiGetSapSts
(
HiSapSts *sapSts,
HiSap *sap
)





{
   S16 i;
   HiFdGrp *fdGrp;


   ;;



   sapSts->sapId = sap->spId;



   for (i = 0; i < hiCb.numFdGrps; i++)
   {
      fdGrp = hiCb.fdGrps[i];

      sapSts->numCons += fdGrp->rxSts[sap->spId].numCons;
      sapSts->numRxTcpMsg += fdGrp->rxSts[sap->spId].numRxTcpMsg;
      sapSts->numRxUdpMsg += fdGrp->rxSts[sap->spId].numRxUdpMsg;
      sapSts->numRxbytes += fdGrp->rxSts[sap->spId].numRxBytes;
      sapSts->numRxRawMsg += fdGrp->rxSts[sap->spId].numRxRawMsg;
   }



   sapSts->numTxTcpMsg = sap->txSts.numTxTcpMsg;
   sapSts->numTxUdpMsg = sap->txSts.numTxUdpMsg;
   sapSts->numTxbytes = sap->txSts.numTxBytes;
   sapSts->numTxRawMsg = sap->txSts.numTxRawMsg;


   return(0);
}
# 2752 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiZeroSapSts
(
HiSap *sap
)




{
   S16 i;
   HiThrMsg tMsg;


   ;;



   sap->txSts.numTxBytes = 0; sap->txSts.numTxTcpMsg = 0; sap->txSts.numTxUdpMsg = 0; sap->txSts.numTxRawMsg = 0;;



   for (i = 0; i < hiCb.numFdGrps; i++)
   {
      tMsg.type = 0x8;
      tMsg.spId = sap->spId;
      hiSendThrMsg(i, &tMsg);
   }


   return(0);
}
# 2962 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiAllocConCb
(
HiSap *sap,
UConnId suConId,
U8 srvcType,
U8 *type,
HiConCb **conCb
)
# 2978 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
{
   U8 srvc;

   HiConCb *con = 0L;
   HiAlarmInfo alInfo;


   ;;



   { S16 _ret; _ret = SGetSBuf(hiCb.init.region, hiCb.init.pool, (Data **)&con, sizeof (HiConCb)); if (_ret == 0) cmMemset((U8*)con, 0, sizeof (HiConCb)); else con = 0L; };
   if (!con)
   {

      alInfo.type = 3;
      alInfo.inf.mem.region = hiCb.init.region;
      alInfo.inf.mem.pool = hiCb.init.pool;
      hiSendAlarm(4, 12,
                  0, &alInfo);
      return(1);
   }



   con->sap = sap;
   con->suConId = suConId;
   con->srvcType = srvcType;
   con->flag = 0x20;

   *type = 
# 3008 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                         SOCK_RAW
# 3008 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                    ;





   srvc = (srvcType & 0x0F);
   switch (srvc)
   {
      case 6:
         con->protocol = 
# 3018 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                        IPPROTO_RAW
# 3018 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                       ;
         break;

      case 8:
         con->protocol = 
# 3022 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                        IPPROTO_ICMP
# 3022 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                        ;
         break;

      case 9:
         con->priority = 1;
         con->srvcType = 7;


      case 7:
         con->protocol = 132;
         break;







      case 4:
         con->priority = 1;
         con->srvcType = 0;


      case 0:
      case 5:
         con->flag = 0x2;
         con->protocol = 
# 3048 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                        IPPROTO_UDP
# 3048 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                       ;
         *type = 
# 3049 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                SOCK_DGRAM
# 3049 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                             ;
         break;

      case 2:
      case 1:
      case 11:
      default:
         con->flag = 0x1;
         con->protocol = 
# 3057 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                        IPPROTO_TCP
# 3057 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                       ;
         *type = 
# 3058 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                SOCK_STREAM
# 3058 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                              ;
         break;
   }



   con->ipTos = 0;
   con->hdrIncldFlag = 0;
# 3085 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (*type == 
# 3085 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
               SOCK_STREAM
# 3085 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                             )

   {
      SInitQueue(&con->txQ);
# 3101 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   }



   *conCb = con;


   return(0);
}
# 3129 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiCompleteConCb
(
HiConCb *conCb
)




{
   S16 ret;
   U32 i;
   UConnId id;
   HiSap *sap;
   HiConCb *con;
   HiAlarmInfo alInfo;


   ;;


   ret = 0;


   sap = conCb->sap;



   id = ++sap->lstSpConId;
# 3167 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   for (i = 0; i < hiCb.cfg.numCons; i++)
   {

      if (id > hiCb.cfg.numCons)
         id = 1;


      if (cmHashListFind(&sap->conCbHlCp, (U8 *)&id, sizeof (UConnId),
            0, (U32 *)&con) == 1)
      {

         sap->lstSpConId = conCb->spConId = id;


         ret = cmHashListInsert(&sap->conCbHlCp, (U32)conCb,
                  (U8 *)&conCb->spConId, sizeof (UConnId));
         if (ret != 0)
         {

            alInfo.spId = sap->spId;
            alInfo.type = 0;
            hiSendAlarm(3, 4,
                        16, &alInfo);
         }


         break;
      }

      id++;
   }







   if (ret != 0 || i == hiCb.cfg.numCons)
   {
     
                                                       ;
      return(1);
   }
   return(0);
}
# 3233 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiAssignConCb
(
HiConCb *conCb,
U8 type
)





{
   S16 ret, fdGrpNum;
   HiThrMsg tMsg;
   Bool done = 0;


   ;;



   if (conCb->protocol == 
# 3253 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                         IPPROTO_ICMP
# 3253 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                         )
   {

      conCb->fdGrpNum = 0;
      tMsg.type = type;
      tMsg.spId = conCb->sap->spId;
      tMsg.spConId = conCb->spConId;
      ret = hiSendThrMsg(0, &tMsg);
      return(ret);
   }


   fdGrpNum = hiCb.lastGrp;




   ret = 1;




   if (fdGrpNum == hiCb.numFdGrps)
       fdGrpNum = 0;

   while (fdGrpNum < (S16)hiCb.numFdGrps && !done)
   {






      if (hiCb.fdGrps[fdGrpNum]->numFds < hiCb.cfg.numFdsPerSet)
      {

         conCb->fdGrpNum = fdGrpNum;
         hiCb.lastGrp = fdGrpNum + 1;
         done = 1;
      }





      fdGrpNum++;
   }


   if (done)
   {
      tMsg.type = type;
      tMsg.spId = conCb->sap->spId;
      tMsg.spConId = conCb->spConId;
      ret = hiSendThrMsg(conCb->fdGrpNum, &tMsg);
   }



   if (ret != 0)
   {
     
                                                         ;
      return(ret);
   }


   return(0);
}
# 3340 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiFindConCb
(
HiSap *sap,
UConnId spConId,
HiConCb **conCb
)






{
   S16 ret;


   ;;
# 3365 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   ret = cmHashListFind(&sap->conCbHlCp, (U8 *)&spConId, sizeof (UConnId),
                        0, (U32 *)conCb);
# 3378 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (ret != 0)
      *conCb = 0L;



   return(ret);
}
# 3403 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiFindConCbSuConId
(
HiSap *sap,
UConnId suConId,
HiConCb **conCb
)






{
   S16 ret;
   HiConCb *prevConCb;




   ;;
# 3431 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   *conCb = prevConCb = 0L;
   while ((ret = cmHashListGetNext(&sap->conCbHlCp, (U32)prevConCb,
               (U32 *)conCb)) == 0)
   {
      if ((*conCb)->suConId == suConId)
      {
# 3446 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         break;
      }

      prevConCb = *conCb;
      *conCb = 0L;
   }
# 3463 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return(*conCb == 0L ? 1 : 0);
}
# 3482 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 Void hiDoneWithConCb
(
HiConCb *conCb
)




{
   ;;
# 3500 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return;
}
# 3520 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiEnqueueForTx
(
HiConCb *conCb,
Buffer *mBuf
)





{
   S16 ret;
   MsgLen mLen;
   HiThrMsg tMsg;


   ;;


   mLen = 0;
   SFndLenMsg(mBuf, &mLen);
# 3549 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   SQueueLast(mBuf, &conCb->txQ);
   conCb->txQSize += mLen;
# 3559 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   tMsg.type = 0x6;
   tMsg.spId = conCb->sap->spId;
   tMsg.spConId = conCb->spConId;
   ret = hiSendThrMsg(conCb->fdGrpNum, &tMsg);


   return(ret);
}
# 3587 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiAddIcmpCon
(
HiConCb *conCb
)




{
   S16 ret;
   HiAlarmInfo alInfo;

   S16 msgType;
   U8 *numUsers, ver, prot;
   CmInetFd *fd;
   CmLListCp *lCp;
   HiThrMsg tMsg;
# 3622 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   ;;




   msgType = prot = 0;
   numUsers = 0L;
   fd = 0L;
   lCp = 0L;
# 3645 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (conCb->icmpType == 4)
   {
      ver = 4;
      prot = 
# 3648 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            IPPROTO_ICMP
# 3648 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                            ;
      numUsers = &hiCb.icmpUsers;
      fd = &hiCb.icmpConFd;
      lCp = &hiCb.icmpLstCp;
      msgType = 0xB;
   }
# 3672 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (numUsers != 0L && *numUsers == 0)
   {
      ret = cmInetSocket(
# 3674 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           SOCK_RAW
# 3674 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           , fd, prot);;
      if (ret != 0)
      {
         hiCb.errSts.sockOpenErr++;;
         alInfo.type = 0;
         hiSendAlarm(3, 4,
                     (256 + 4), &alInfo);




         return(ret);
      }


      tMsg.type = msgType;
      hiSendThrMsg(0, &tMsg);
   }



   conCb->icmpLstEnt.node=(U32) conCb;


   if(0L != lCp)
   {
      cmLListAdd2Tail(lCp, &conCb->icmpLstEnt);
   }


   if (numUsers != 0L)
      (*numUsers)++;
# 3922 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return(0);
}
# 3943 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static Void hiDelIcmpCon
(
HiConCb *conCb
)




{

   U8 msgType;
   U8 *numUsers;
   CmInetFd *fd;
   CmLListCp *lCp;
# 3973 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   HiThrMsg tMsg;



   ;;




   msgType = 0;
   numUsers = 0L;
   lCp = 0L;
# 3995 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (conCb->icmpType == 4)
   {
      msgType = 0xC;
      numUsers = &hiCb.icmpUsers;
      fd = &hiCb.icmpConFd;
      lCp = &hiCb.icmpLstCp;
   }
# 4016 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (0L != lCp)
   {
   cmLListDelFrm(lCp, &conCb->icmpLstEnt);
   }

   if(numUsers != 0L)
      (*numUsers)--;
# 4167 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
if (numUsers != 0L && *numUsers == 0)
{

   tMsg.type = msgType;
   hiSendThrMsg(0, &tMsg);
}
# 4206 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return;
}
# 4225 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static Void hiDelSapCons
(
HiSap *sap,
HiFdGrp *fdGrp
)





{
   S16 ret;
   HiConCb *conCb, *prevConCb;


   ;;
# 4250 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   conCb = prevConCb = 0L;

   while ((ret = cmHashListGetNext(&sap->conCbHlCp, (U32)prevConCb,
                                   (U32 *)&conCb))
          == 0)
   {

      if (conCb->fdGrpNum != fdGrp->fdGrpNum)
      {
         prevConCb = conCb;
         conCb = 0L;
         continue;
      }



      if ((conCb->icmpMask))
         hiDelIcmpCon(conCb);
      if (
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ((((
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         &fdGrp->readFdSet
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         )->fds_bits)[__extension__ ({ long int __d = (
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         (&conCb->conFd)->fd
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] & ((__fd_mask) (1UL << ((
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         (&conCb->conFd)->fd
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ) % (8 * (int) sizeof (__fd_mask)))))) != 0)
# 4268 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                           )
      {
         
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ((void) (((
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        &fdGrp->readFdSet
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        )->fds_bits)[__extension__ ({ long int __d = (
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ) % (8 * (int) sizeof (__fd_mask)))))))
# 4270 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                        ;
         fdGrp->numFds--;




      }
      cmHashListDelete(&fdGrp->rdFdHlCp, (U32)conCb);
      if (conCb->rxBuf)
      {
         { SPutMsg(conCb->rxBuf); };
         conCb->rxBuf = 0L;
      }
      if (
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ((((
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         &fdGrp->writeFdSet
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         )->fds_bits)[__extension__ ({ long int __d = (
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         (&conCb->conFd)->fd
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] & ((__fd_mask) (1UL << ((
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         (&conCb->conFd)->fd
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ) % (8 * (int) sizeof (__fd_mask)))))) != 0)
# 4283 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                            )
      {
         
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ((void) (((
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        &fdGrp->writeFdSet
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        )->fds_bits)[__extension__ ({ long int __d = (
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ) % (8 * (int) sizeof (__fd_mask)))))))
# 4285 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                         ;
         fdGrp->numWrFds--;
      }
      cmHashListDelete(&fdGrp->wrFdHlCp, (U32)conCb);
      if (conCb->flag & 0x1)
         SFlushQueue(&conCb->txQ);


      if (conCb->protocol != 
# 4293 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                            IPPROTO_ICMP
# 4293 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                            )
         cmInetClose(&conCb->conFd);;

      cmHashListDelete(&sap->conCbHlCp, (U32)conCb);


      if (conCb->icmpError)
         SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)conCb->icmpError, conCb->numFilters * sizeof (CmIcmpError));
                                  ;





      SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)conCb, sizeof (HiConCb));;



      prevConCb = conCb = 0L;
   }
# 4321 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return;
}
# 4346 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 Void hiProcThrDelCon
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg,
CmInetFdSet *selRdFdSet,
CmInetFdSet *selWrFdSet,
S16 *setFds
)
# 4362 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
{
   S16 ret;
   HiSap *sap;
   HiConCb *conCb, *tmpCon;


   ;;



   sap = hiCb.saps[tMsg->spId];
   if (!sap)
      return;



   ret = hiFindConCb(sap, tMsg->spConId, &conCb);
   if (ret != 0)
   {
      if (tMsg->type == 0x5 && sap->state == 0x2)
      {
            { HiUiHitDiscCfm(&sap->uiPst, sap->suId, (U8)2, (UConnId)tMsg->spConId, (Action)tMsg->disc.action); }
                                         ;
      }
      return;
   }



   if (setFds)
   {
      if (fdGrp->numWrFds
          && 
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
             ((((
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
             selWrFdSet
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
             )->fds_bits)[__extension__ ({ long int __d = (
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
             (&conCb->conFd)->fd
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
             ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] & ((__fd_mask) (1UL << ((
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
             (&conCb->conFd)->fd
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
             ) % (8 * (int) sizeof (__fd_mask)))))) != 0)
# 4394 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                        )
      {
         (*setFds)--;
         
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ((void) (((
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        selWrFdSet
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        )->fds_bits)[__extension__ ({ long int __d = (
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ) % (8 * (int) sizeof (__fd_mask)))))))
# 4397 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                 ;
      }
      if (
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ((((
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         selRdFdSet
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         )->fds_bits)[__extension__ ({ long int __d = (
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         (&conCb->conFd)->fd
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] & ((__fd_mask) (1UL << ((
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         (&conCb->conFd)->fd
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
         ) % (8 * (int) sizeof (__fd_mask)))))) != 0)
# 4399 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                    )
      {
         (*setFds)--;
         
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ((void) (((
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        selRdFdSet
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        )->fds_bits)[__extension__ ({ long int __d = (
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ) % (8 * (int) sizeof (__fd_mask)))))))
# 4402 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                 ;
      }
   }





   if ((conCb->icmpMask))
      hiDelIcmpCon(conCb);
# 4423 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (!(tMsg->type == 0x5
         && tMsg->disc.action == 2))
   {

      ret = cmHashListFind(&fdGrp->rdFdHlCp, (U8 *)&conCb->conFd.fd,
                           sizeof (CmInetFdType), 0, (U32 *)&tmpCon);
      if (ret == 0)
      {

         if (
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            ((((
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            &fdGrp->readFdSet
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            )->fds_bits)[__extension__ ({ long int __d = (
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            (&conCb->conFd)->fd
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] & ((__fd_mask) (1UL << ((
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            (&conCb->conFd)->fd
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            ) % (8 * (int) sizeof (__fd_mask)))))) != 0)
# 4432 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                              )
         {
            
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ((void) (((
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           &fdGrp->readFdSet
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           )->fds_bits)[__extension__ ({ long int __d = (
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           (&conCb->conFd)->fd
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           (&conCb->conFd)->fd
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ) % (8 * (int) sizeof (__fd_mask)))))))
# 4434 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                           ;
            fdGrp->numFds--;




         }
         cmHashListDelete(&fdGrp->rdFdHlCp, (U32)conCb);
         if (conCb->rxBuf)
         {
            { SPutMsg(conCb->rxBuf); };
            conCb->rxBuf = 0L;
         }





         if (tMsg->type == 0x5
             && tMsg->disc.action == 1)
         {
            { if (cmInetShutdown(&conCb->conFd, 0) != 0) hiCb.errSts.sockShutErr++;; };
            conCb->state = 0x4;
         }
      }
   }






   if (!(tMsg->type == 0x5
         && tMsg->disc.action == 1))
   {

      ret = cmHashListFind(&fdGrp->wrFdHlCp, (U8 *)&conCb->conFd.fd,
                           sizeof (CmInetFdType), 0, (U32 *)&tmpCon);
      if (ret == 0)
      {

         if (
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            ((((
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            &fdGrp->writeFdSet
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            )->fds_bits)[__extension__ ({ long int __d = (
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            (&conCb->conFd)->fd
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] & ((__fd_mask) (1UL << ((
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            (&conCb->conFd)->fd
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
            ) % (8 * (int) sizeof (__fd_mask)))))) != 0)
# 4475 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                               )
         {
            
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ((void) (((
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           &fdGrp->writeFdSet
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           )->fds_bits)[__extension__ ({ long int __d = (
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           (&conCb->conFd)->fd
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           (&conCb->conFd)->fd
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ) % (8 * (int) sizeof (__fd_mask)))))))
# 4477 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                            ;
            fdGrp->numWrFds--;
         }
         cmHashListDelete(&fdGrp->wrFdHlCp, (U32)conCb);
         if (conCb->flag & 0x1)
            SFlushQueue(&conCb->txQ);





         if (tMsg->type == 0x5
             && tMsg->disc.action == 2)
         {
            { if (cmInetShutdown(&conCb->conFd, 1) != 0) hiCb.errSts.sockShutErr++;; };
            conCb->state = 0x5;
         }
      }
   }
# 4506 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (tMsg->type == 0x4
       && conCb->sap->state == 0x2)
   {
      { if (conCb->sap->state == 0x2) { HiUiHitDiscInd(&conCb->sap->uiPst, conCb->sap->suId, (U8)1, (UConnId)conCb->suConId, (Reason)tMsg->disc.reason); } }
                                   ;
   }
   else if (tMsg->type == 0x5
            && conCb->sap->state == 0x2)
   {
      { HiUiHitDiscCfm(&conCb->sap->uiPst, conCb->sap->suId, (U8)1, (UConnId)conCb->suConId, (Action)tMsg->disc.action); }
                                   ;
   }







   if (tMsg->type == 0x5
       && tMsg->disc.action != 4)

   {
      hiDoneWithConCb(conCb);
      return;
   }


   sap->txSts.numCons--;;




   if (conCb->protocol != 
# 4539 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                         IPPROTO_ICMP
# 4539 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                         )
      cmInetClose(&conCb->conFd);;

   conCb->state = 0x7;
   hiDoneWithConCb(conCb);
   { cmHashListDelete(&conCb->sap->conCbHlCp, (U32)conCb); if (conCb->icmpError) SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)conCb->icmpError, conCb->numFilters * sizeof(CmIcmpError));; SPutSBuf(hiCb.init.region, hiCb.init.pool, (Data *)conCb, sizeof(HiConCb));; conCb = 0L; };

   return;
}
# 4565 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiProcThrAddCon
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg
)





{
   S16 ret;
   HiSap *sap;
   HiConCb *conCb;
   HiAlarmInfo alInfo;
   HiThrMsg hMsg;


   ;;



   sap = hiCb.saps[tMsg->spId];
   if (!sap)
      return(1);



   ret = hiFindConCb(sap, tMsg->spConId, &conCb);
   if (ret != 0)
      return(1);



   alInfo.spId = sap->spId;
   alInfo.type = 0;





   if ((conCb->icmpMask))
   {
      ret = hiAddIcmpCon(conCb);
      if (ret != 0)
      {
         hMsg.type = 0x4;
         hMsg.spId = tMsg->spId;
         hMsg.spConId = tMsg->spConId;
         hMsg.disc.reason = 14;
         goto hiProcThrAddConDone1;
      }
   }



   if (conCb->protocol == 
# 4621 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
                         IPPROTO_ICMP
# 4621 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                         )
   {
      if (tMsg->type == 0x2)
         { HiUiHitConCfm(&conCb->sap->uiPst, conCb->sap->suId, conCb->suConId, conCb->spConId, &conCb->locTptAddr); };
      goto hiProcThrAddConDone1;
   }
# 4637 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ret = cmHashListInsert(&fdGrp->rdFdHlCp, (U32)conCb,
               (U8 *)&conCb->conFd.fd, sizeof (CmInetFdType));
         if (ret != 0)
         {
            { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                            "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 4641 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            ,
                                                                            4642
# 4641 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
            ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiProcThrAddCon(): insertion into hash list failed\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                             ;
            hiSendAlarm(3, 4,
                  16, &alInfo);
            hMsg.type = 0x4;
            hMsg.spId = tMsg->spId;
            hMsg.spConId = tMsg->spConId;
            hMsg.disc.reason = 14;
            goto hiProcThrAddConDone2;
         }



         if (conCb->state != 0x1)
         {





            
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ((void) (((
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           &fdGrp->readFdSet
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           )->fds_bits)[__extension__ ({ long int __d = (
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           (&conCb->conFd)->fd
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] |= ((__fd_mask) (1UL << ((
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
           (&conCb->conFd)->fd
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
           ) % (8 * (int) sizeof (__fd_mask)))))))
# 4661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                           ;
         }


      fdGrp->numFds++;
# 4674 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (conCb->state == 0x2)
   {
      ret = cmHashListInsert(&fdGrp->wrFdHlCp, (U32)conCb,
                             (U8 *)&conCb->conFd.fd,
                             sizeof (CmInetFdType));
      if (ret != 0)
      {
         { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                   "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 4681 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ,
                                                                   4682
# 4681 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiProcThrAddCon(): insertion into hash list failed\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                    ;
         fdGrp->numFds--;




         
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ((void) (((
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        &fdGrp->readFdSet
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        )->fds_bits)[__extension__ ({ long int __d = (
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ) % (8 * (int) sizeof (__fd_mask)))))))
# 4688 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                        ;
         cmHashListDelete(&fdGrp->rdFdHlCp, (U32)conCb);
         hiSendAlarm(3, 4,
                     16, &alInfo);
         hMsg.type = 0x4;
         hMsg.spId = tMsg->spId;
         hMsg.spConId = tMsg->spConId;
         hMsg.disc.reason = 14;
         goto hiProcThrAddConDone2;
      }


      
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ((void) (((
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     &fdGrp->writeFdSet
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     )->fds_bits)[__extension__ ({ long int __d = (
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     (&conCb->conFd)->fd
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] |= ((__fd_mask) (1UL << ((
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     (&conCb->conFd)->fd
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ) % (8 * (int) sizeof (__fd_mask)))))))
# 4700 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                      ;
      fdGrp->numWrFds++;


   }




   else if (tMsg->type == 0x2)

      { HiUiHitConCfm(&conCb->sap->uiPst, conCb->sap->suId, conCb->suConId, conCb->spConId, &conCb->locTptAddr); };


hiProcThrAddConDone2:





hiProcThrAddConDone1:


   hiDoneWithConCb(conCb);



   if (ret != 0)
      hiProcThrDelCon(fdGrp, &hMsg, 0L, 0L, 0L);

   return(ret);
}
# 4750 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiProcThrRspCon
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg
)





{
   S16 ret;
   HiSap *sap;
   HiConCb *conCb;


   ;;



   sap = hiCb.saps[tMsg->spId];
   if (!sap)
      return(1);



   ret = hiFindConCb(sap, tMsg->spConId, &conCb);
   if (ret != 0)
      return(1);
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ((void) (((
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  &fdGrp->readFdSet
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  )->fds_bits)[__extension__ ({ long int __d = (
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  (&conCb->conFd)->fd
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] |= ((__fd_mask) (1UL << ((
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  (&conCb->conFd)->fd
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
  ) % (8 * (int) sizeof (__fd_mask)))))))
# 4787 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                  ;
# 4801 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   hiDoneWithConCb(conCb);


   return(ret);
}
# 4824 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiProcThrTxRdy
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg
)





{
   S16 ret;
   HiSap *sap;
   HiConCb *conCb, *tmpCon;
   HiThrMsg hMsg;
   HiAlarmInfo alInfo;


   ;;



   sap = hiCb.saps[tMsg->spId];
   if (!sap)
      return(1);



   ret = hiFindConCb(sap, tMsg->spConId, &conCb);
   if (ret != 0)
      return(1);



   ret = cmHashListFind(&fdGrp->wrFdHlCp, (U8 *)&conCb->conFd.fd,
                        sizeof (CmInetFdType), 0, (U32 *)&tmpCon);
   if (ret != 0)
   {

      ret = cmHashListInsert(&fdGrp->wrFdHlCp, (U32)conCb,
                             (U8 *)&conCb->conFd.fd, sizeof (CmInetFdType));
      if (ret == 0)
      {

         
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ((void) (((
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        &fdGrp->writeFdSet
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        )->fds_bits)[__extension__ ({ long int __d = (
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] |= ((__fd_mask) (1UL << ((
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
        (&conCb->conFd)->fd
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
        ) % (8 * (int) sizeof (__fd_mask)))))))
# 4868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                         ;
         fdGrp->numWrFds++;
      }
      else
      {
         { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                  "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 4873 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ,
                                                                  4874
# 4873 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiProcThrTxRdy(): insertion into hash list failed\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                   ;
         alInfo.spId = sap->spId;
         alInfo.type = 0;
         hiSendAlarm(3, 4,
                     16, &alInfo);
         hMsg.type = 0x4;
         hMsg.spId = tMsg->spId;
         hMsg.spConId = tMsg->spConId;
         hMsg.disc.reason = 14;
      }
   }



   hiDoneWithConCb(conCb);



   if (ret != 0)
      hiProcThrDelCon(fdGrp, &hMsg, 0L, 0L, 0L);


   return(ret);
}
# 4916 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static Void hiProcThrDisSap
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg
)





{
   HiSap *sap;
 S16 ret = 0;
 U16 result = 0;

   HiAlarmInfo alInfo;


   ;;


   sap = hiCb.saps[tMsg->spId];
   if (!sap)
      return;



   hiDelSapCons(sap, fdGrp);
# 4955 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
  ret = cmHashListQuery(&sap->conCbHlCp, 3, &result);
  if ((ret == 0) && (result == 0) && (sap->pendOp.flag))
  {
      hiCompletePendOp(sap);
    }
    else if ((fdGrp->fdGrpNum == (hiCb.numFdGrps - 1)) && sap->state == 0x1)
    {
       alInfo.inf.state = 0x1;
       alInfo.spId = tMsg->spId;
       alInfo.type = 1;
       hiSendAlarm(2, (256 + 3),
             (256 + 12), &alInfo);
    }

   return;
}
# 4989 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static S16 hiProcThrDie
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg
)





{
   S16 ret = 0;
   U16 i;
   HiSap *sap;
   Pst pst;
   HiMngmt cfmMsg;
 U8 numTmr = 0;
 U16 result = 0;


   ;;





   for (i = 0; i < hiCb.cfg.numSaps; i++)
   {
      sap = hiCb.saps[i];
      if (!sap)
         continue;



      sap->pendOp.flag = hiCb.pendOp.flag;
      sap->pendOp.action = hiCb.pendOp.action;




      cmMemcpy((U8 *)&sap->pendOp.lmPst, (U8 *)&hiCb.pendOp.lmPst,
               sizeof (Pst));



      cmMemcpy((U8 *)&sap->pendOp.hdr, (U8 *)&hiCb.pendOp.hdr,
               sizeof (Header));




      for(numTmr = 0; numTmr < 1 ; numTmr++)
      {
         if(sap->congTimers[numTmr].tmrEvnt == 2)
         {

            { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
          }
       }


      hiDelSapCons(sap, fdGrp);







      ret = cmHashListQuery(&sap->conCbHlCp, 3, &result);
      if ((ret == 0) && (result == 0))
  {
         hiCompletePendOp(sap);
  }
   }
# 5073 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   hiCb.pendOp.numRem--;
   if (hiCb.pendOp.numRem == 0)
   {

      cfmMsg.t.cntrl.action = 36;
      cfmMsg.hdr.elmId.elmnt = hiCb.pendOp.hdr.elmId.elmnt;
      cfmMsg.hdr.transId = hiCb.pendOp.hdr.transId;
      cfmMsg.cfm.status = 0;
      cfmMsg.cfm.reason = 0;

      pst.srcEnt = hiCb.init.ent;
      pst.srcInst = hiCb.init.inst;
      pst.srcProcId = hiCb.init.procId;
      pst.dstEnt = hiCb.pendOp.lmPst.srcEnt;
      pst.dstInst = hiCb.pendOp.lmPst.srcInst;
      pst.dstProcId = hiCb.pendOp.lmPst.srcProcId;
      pst.selector = hiCb.pendOp.hdr.response.selector;
      pst.prior = hiCb.pendOp.hdr.response.prior;
      pst.route = hiCb.pendOp.hdr.response.route;
      pst.region = hiCb.pendOp.hdr.response.mem.region;
      pst.pool = hiCb.pendOp.hdr.response.mem.pool;
# 5104 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ret = hiShutdown();


      HiMiLhiCntrlCfm(&pst, &cfmMsg);


      return(ret);
   }






   return(20);
}
# 5141 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static Void hiProcThrStartIcmp
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg
)





{
   ;;


   if (tMsg->type == 0xB)
   {


      
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ((void) (((
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     &fdGrp->readFdSet
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     )->fds_bits)[__extension__ ({ long int __d = (
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     (&hiCb.icmpConFd)->fd
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] |= ((__fd_mask) (1UL << ((
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     (&hiCb.icmpConFd)->fd
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ) % (8 * (int) sizeof (__fd_mask)))))))
# 5159 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                       ;


      fdGrp->procIcmp = 1;





   }
# 5187 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return;
}
# 5210 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
static Void hiProcThrStopIcmp
(
HiFdGrp *fdGrp,
HiThrMsg *tMsg
)





{
   ;;


   if (tMsg->type == 0xC)
   {


      
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ((void) (((
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     &fdGrp->readFdSet
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     )->fds_bits)[__extension__ ({ long int __d = (
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     (&hiCb.icmpConFd)->fd
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ); (__builtin_constant_p (__d) ? (0 <= __d && __d < 1024 ? (__d / (8 * (int) sizeof (__fd_mask))) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })] &= ~((__fd_mask) (1UL << ((
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     (&hiCb.icmpConFd)->fd
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c" 3 4
     ) % (8 * (int) sizeof (__fd_mask)))))))
# 5228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
                                                       ;


      cmInetClose(&hiCb.icmpConFd);;


      fdGrp->procIcmp = 0;







   }
# 5267 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   return;
}
# 5287 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiProcThrMsg
(
HiFdGrp *fdGrp,
CmInetFdSet *selRdFdSet,
CmInetFdSet *selWrFdSet,
S16 *setFds
)







{
   S16 ret;
   Buffer *mBuf;
   MsgLen mLen;
   CmTptAddr srcAddr;
   HiThrMsg tMsg;
   HiAlarmInfo alInfo;
   StsCntr numCons;
   HiLocalInf *lif;
# 5324 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   lif = 0L;




   ;;



   mLen = -1;

   { CmInetMemInfo memInfo; memInfo.region = hiCb.init.region; memInfo.pool = hiCb.init.pool; ret = cmInetRecvMsg(&fdGrp->servFd, &((&srcAddr))->u.ipv4TptAddr, &memInfo, &mBuf, &mLen, 0);; };
   if (ret == 1)
   {
      { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                           "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 5338 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ,
                                                           5339
# 5338 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiProcThrMsg(): receive failed on reserved fd\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                            ;
      alInfo.spId = -1;
      alInfo.type = 0;
      hiSendAlarm(3, 4,
                  0, &alInfo);
      return(1);
   }



   cmMemset((U8 *)&tMsg, 0, sizeof(HiThrMsg));
# 5359 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (0L != mBuf)
   {
   ret = SUnpkS16(&tMsg.type, mBuf);
   if (ret == 0)
   {
      ret = SUnpkS16(&tMsg.spId, mBuf);
      if (ret == 0)
      {
         ret = SUnpkU32(&tMsg.spConId, mBuf);
         if (ret == 0)
         {
            if (tMsg.type == 0x4)
            {
               ret = SUnpkS16(&tMsg.disc.reason, mBuf);
            }
            else if (tMsg.type == 0x5)
               ret = SUnpkS16(&tMsg.disc.action, mBuf);
         }
      }
   }
   }
      else
      {
         { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                   "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 5382 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ,
                                                   5383
# 5382 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiProcThrMsg(): mBuf is NULL\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                    ;
         return(1);
      }






   { SPutMsg(mBuf); };



   if (ret != 0)
   {
      { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                             "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 5398 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ,
                                                             5399
# 5398 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiProcThrMsg(): could not unpack thread message\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                              ;
      return(1);
   }



   ret = 0;
   switch (tMsg.type)
   {
      case 0x1:
      case 0x2:
         ret = hiProcThrAddCon(fdGrp, &tMsg);
         break;

      case 0x3:
         ret = hiProcThrRspCon(fdGrp, &tMsg);
         break;

      case 0x4:
      case 0x5:
         hiProcThrDelCon(fdGrp, &tMsg, selRdFdSet, selWrFdSet, setFds);
         break;

      case 0x6:
         ret = hiProcThrTxRdy(fdGrp, &tMsg);
         break;

      case 0xA:
         hiProcThrDisSap(fdGrp, &tMsg);
         break;

      case 0x9:
         ret = hiProcThrDie(fdGrp, &tMsg);
         break;

      case 0x7:
         numCons = fdGrp->genRxSts.numCons;
         cmMemset((U8 *)&fdGrp->genRxSts, 0, sizeof (HiRxSts));;
         fdGrp->genRxSts.numCons = numCons;
         break;

      case 0x8:
         numCons = fdGrp->rxSts[tMsg.spId].numCons;
         cmMemset((U8 *)&fdGrp->rxSts[tMsg.spId], 0, sizeof (HiRxSts));;
         fdGrp->rxSts[tMsg.spId].numCons = numCons;
         break;
# 5478 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
      case 0xB:



         hiProcThrStartIcmp(fdGrp, &tMsg);
         break;

      case 0xC:



         hiProcThrStopIcmp(fdGrp, &tMsg);
         break;

      default:
         { if ((&(hiCb.init))->dbgMask & (0x00000100)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                     "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 5493 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ,
                                                     5494
# 5493 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
         ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiProcThrMsg(): unknown message type\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                      ;
         ret = 1;
         break;
   }


   return(ret);
}
# 5520 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiSendThrMsg
(
U16 fdGrpNum,
HiThrMsg *tMsg
)





{
   S16 ret;
   HiFdGrp *fdGrp;
   Buffer *mBuf;
   MsgLen txLen;
   CmInetMemInfo memInfo;


   ;;



   fdGrp = hiCb.fdGrps[fdGrpNum];



   ret = SGetMsg(hiCb.init.region, hiCb.init.pool, &mBuf);
   if (ret != 0)
   {
     
                                                   ;
      return(1);
   }



   ret = 0;
   if (tMsg->type == 0x4)
   {
      ret = SPkS16(tMsg->disc.reason, mBuf);
   }
   else if (tMsg->type == 0x5)
      ret = SPkS16(tMsg->disc.action, mBuf);
   if (ret == 0)
   {
      ret = SPkU32(tMsg->spConId, mBuf);
      if (ret == 0)
      {
         ret = SPkS16(tMsg->spId, mBuf);
         if (ret == 0)
            ret = SPkS16(tMsg->type, mBuf);
      }
   }
# 5583 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (ret != 0)
   {
      { SPutMsg(mBuf); };
     
                                                           ;
      return(1);
   }



   memInfo.region = hiCb.init.region;
   memInfo.pool = hiCb.init.pool;






   ret = cmInetSendMsg(&fdGrp->servFd, &fdGrp->servAddr, &memInfo,
                       mBuf, &txLen, 0);
# 5612 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   { SPutMsg(mBuf); };


   return(ret);
}
# 5635 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiTmrEvnt
(
U32 cb,
S16 evnt
)





{
   ;;
# 5665 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   switch(evnt)
   {
      case 1:
      {
         hiRecvTsk(0L, 0L);




         { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = hiCb.timers; _arg.cb = (U32)&hiCb; _arg.evnt = 1; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
       break;
       }



       case 2:
       {



     { if ((&(hiCb.init))->dbgMask & (0x00000001)) { snprintf((&(hiCb.init))->prntBuf, 255, "[%s %d:0x%x:%x] %s:%d ", "TCP_UDP_CONVERGENCE_LAYER", (&(hiCb.init))->procId, (&(hiCb.init))->ent, (&(hiCb.init))->inst,
                                                                                             "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
# 5685 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     ,
                                                                                             5686
# 5685 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
     ); SPrint((&(hiCb.init))->prntBuf); sprintf (hiCb.init.prntBuf, "hiTmrEvnt() : check resource called >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n"); SPrint((&(hiCb.init))->prntBuf); } }
                                                                                              ;
         hiChkRes((HiSap*)cb);

       break;
       }


       default:
       {
        
                                                              ;

       break;
       }
     }


   return(0);
}
# 5737 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiActvTmr
(
Void
)




{
   ;;
# 5760 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   cmPrcTmr(&hiCb.tqCp, hiCb.tq, (PFV)hiTmrEvnt);


   return(0);
}
# 5782 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiScanPermTsk
(
Pst *pst,
Buffer *mBuf
)





{
   ;;



   if (mBuf)
      { SPutMsg(mBuf); };



   if (!hiCb.init.cfgDone)
      return(0);



   hiRecvTsk(pst, 0L);


   return(0);
}
# 6203 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 S16 hiChkRes
(
HiSap *sap
)




{
   S16 ret;
   Status status;
   HiAlarmInfo alInfo;
 U8 numTmr = 0;


   ;;



   ret = 0;
   alInfo.spId = sap->spId;
   alInfo.type = 3;
   alInfo.inf.mem.region = sap->uiPst.region;
   alInfo.inf.mem.pool = sap->uiPst.pool;
# 6236 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   status = 0;
   SChkRes(sap->uiPst.region, sap->uiPst.pool, &status);
# 6247 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
   if (!sap->resCongStrt)
   {

      if (status >= hiCb.cfg.poolStrtThr)
         goto hiChkResDone;


      else if (status >= hiCb.cfg.poolDropThr)
      {
         sap->resCongStrt = 1;


         hiSendAlarm(4, (256 + 15),
                     0, &alInfo);



         for(numTmr = 0; numTmr < 1 ; numTmr++)
         {
            if(sap->congTimers[numTmr].tmrEvnt == 2)
            {

               { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
               { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
            }
    else
            {
               { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
            }
         }

         goto hiChkResDone;
      }


      else
      {
         sap->resCongStrt = sap->resCongDrop = 1;


         hiSendAlarm(4, (256 + 16),
                     0, &alInfo);



         for(numTmr = 0; numTmr < 1 ; numTmr++)
         {
            if(sap->congTimers[numTmr].tmrEvnt == 2)
            {

               { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
               { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
            }
    else
            {
               { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
            }
         }

         ret = 1;
         goto hiChkResDone;
      }
   }




   else
   {

      if (!sap->resCongDrop)
      {

         if (status < hiCb.cfg.poolDropThr)
         {
            sap->resCongDrop = 1;


            hiSendAlarm(4, (256 + 16),
                        0, &alInfo);



           for(numTmr = 0; numTmr < 1 ; numTmr++)
           {
              if(sap->congTimers[numTmr].tmrEvnt == 2)
              {

                 { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
                 { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
              }else
              {
                 { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
              }
           }

            ret = 1;
            goto hiChkResDone;
         }


         else if (status >= hiCb.cfg.poolStopThr)
         {
            sap->resCongStrt = 0;


            hiSendAlarm(4, (256 + 17),
                        0, &alInfo);




           for(numTmr = 0; numTmr < 1 ; numTmr++)
           {
              if(sap->congTimers[numTmr].tmrEvnt == 2)
              {

                 { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
              }
           }
            goto hiChkResDone;
         }


         else
   {

           for(numTmr = 0; numTmr < 1 ; numTmr++)
           {
              if(sap->congTimers[numTmr].tmrEvnt == 2)
              {

                 { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
                 { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
              }else
              {
                 { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
              }
           }

            goto hiChkResDone;
   }
      }


      else
      {

         if (status >= hiCb.cfg.poolStopThr)
         {
            sap->resCongStrt = sap->resCongDrop = 0;


            hiSendAlarm(4, (256 + 17),
                        0, &alInfo);


           for(numTmr = 0; numTmr < 1 ; numTmr++)
           {
              if(sap->congTimers[numTmr].tmrEvnt == 2)
              {

                 { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
              }
           }
            goto hiChkResDone;
         }


         else
         {

           for(numTmr = 0; numTmr < 1 ; numTmr++)
           {
              if(sap->congTimers[numTmr].tmrEvnt == 2)
              {

                 { CmTmrArg _arg; _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = ((HiSap*)sap)->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 0; _arg.tNum = 0; _arg.max = 1; cmRmvCbTq(&_arg); };
                 { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
              }else
              {
                 { CmTmrArg _arg; if (1 != 0) { _arg.tq = hiCb.tq; _arg.tqCp = &(hiCb.tqCp); _arg.timers = sap->congTimers; _arg.cb = (U32)sap; _arg.evnt = 2; _arg.wait = 1; _arg.tNum = 0; _arg.max = 1; cmPlcCbTq(&_arg); } };
              }
           }
            ret = 1;
            goto hiChkResDone;
         }
      }
   }


hiChkResDone:






   return(ret);
}
# 6470 "/home/mrehwald/Desktop/Radisys/lte_enb/src/tucl/hi_bdy2.c"
 Void hiChkFlc
(
HiConCb *conCb,
U32 posLen,
U32 negLen
)






{
   HiSap *sap;
   U32 curSize, newSize;
   HiAlarmInfo alInfo;


   ;;



   sap = conCb->sap;



   alInfo.spId = sap->spId;
   alInfo.type = 0;




   curSize = conCb->txQSize;
   newSize = curSize + posLen - negLen;







   if (newSize > sap->cfg.txqCongStrtLim)
   {

      if (newSize > sap->cfg.txqCongDropLim)
      {

         if (!(conCb->flc & 0x2))
         {
            conCb->flc |= 0x2;


            { if (conCb->sap->cfg.flcEnb) { hiCb.errSts.numFlcInd++; HiUiHitFlcInd(&conCb->sap->uiPst, conCb->sap->suId, conCb->suConId, 3); } hiSendAlarm(4, (U16)(256 + 12), 0, &alInfo); }
                                 ;

         }
      }
      else
      {

         if (!(conCb->flc & 0x1))
         {
            conCb->flc |= 0x1;


            { if (conCb->sap->cfg.flcEnb) { hiCb.errSts.numFlcInd++; HiUiHitFlcInd(&conCb->sap->uiPst, conCb->sap->suId, conCb->suConId, 1); } hiSendAlarm(4, (U16)(256 + 11), 0, &alInfo); }
                                 ;

         }
      }
   }
   else if (newSize < sap->cfg.txqCongStopLim)
   {




      if (conCb->flc & 0x1 || conCb->flc & 0x2)
      {
         conCb->flc = 0;


         { if (conCb->sap->cfg.flcEnb) { hiCb.errSts.numFlcInd++; HiUiHitFlcInd(&conCb->sap->uiPst, conCb->sap->suId, conCb->suConId, 2); } hiSendAlarm(4, (U16)(256 + 13), 0, &alInfo); }
                              ;

      }
   }


   return;
}
