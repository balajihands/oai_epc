# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
# 39 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
# 1 "/usr/include/sys/types.h" 1 3 4
# 25 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 364 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 415 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 416 "/usr/include/sys/cdefs.h" 2 3 4
# 365 "/usr/include/features.h" 2 3 4
# 388 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4






# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/sys/types.h" 2 3 4



# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4



# 30 "/usr/include/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 122 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 30 "/usr/include/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
typedef unsigned int size_t;
# 147 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 216 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4






# 1 "/usr/include/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/bits/byteswap.h" 2 3 4
# 44 "/usr/include/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 217 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 22 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 46 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 48 "/usr/include/sys/select.h" 2 3 4
# 56 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 66 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 98 "/usr/include/sys/select.h" 3 4

# 108 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 120 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 133 "/usr/include/sys/select.h" 3 4

# 220 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 58 "/usr/include/sys/sysmacros.h" 3 4

# 223 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;
# 81 "/usr/include/bits/pthreadtypes.h" 3 4
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;





typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;





    int __kind;
# 111 "/usr/include/bits/pthreadtypes.h" 3 4
    unsigned int __nusers;
    __extension__ union
    {
      struct
      {
 short __espins;
 short __elision;



      } __elision_data;
      __pthread_slist_t __list;
    };

  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
# 202 "/usr/include/bits/pthreadtypes.h" 3 4
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    signed char __rwelision;

    unsigned char __pad2;
    int __writer;
  } __data;

  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4



# 40 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/usr/include/sys/time.h" 1 3 4
# 25 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 26 "/usr/include/sys/time.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 28 "/usr/include/sys/time.h" 2 3 4
# 37 "/usr/include/sys/time.h" 3 4

# 55 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };




typedef enum __itimer_which __itimer_which_t;






extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/sys/time.h" 3 4

# 41 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/usr/include/sys/socket.h" 1 3 4
# 24 "/usr/include/sys/socket.h" 3 4


# 1 "/usr/include/sys/uio.h" 1 3 4
# 25 "/usr/include/sys/uio.h" 3 4



# 1 "/usr/include/bits/uio.h" 1 3 4
# 43 "/usr/include/bits/uio.h" 3 4
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 56 "/usr/include/bits/uio.h" 3 4



extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


# 29 "/usr/include/sys/uio.h" 2 3 4
# 39 "/usr/include/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  ;
# 50 "/usr/include/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  ;
# 65 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
         __off_t __offset) ;
# 77 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
   __off_t __offset) ;
# 103 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset) ;
# 115 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset) ;




# 27 "/usr/include/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 29 "/usr/include/sys/socket.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 32 "/usr/include/sys/socket.h" 2 3 4






# 1 "/usr/include/bits/socket.h" 1 3 4
# 27 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 28 "/usr/include/bits/socket.h" 2 3 4





typedef __socklen_t socklen_t;




# 1 "/usr/include/bits/socket_type.h" 1 3 4
# 24 "/usr/include/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/bits/socket.h" 2 3 4
# 167 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 168 "/usr/include/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 183 "/usr/include/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 295 "/usr/include/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__ , __leaf__));
# 322 "/usr/include/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 368 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4



# 1 "/usr/include/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/asm/sockios.h" 2 3 4
# 5 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/asm/socket.h" 2 3 4
# 369 "/usr/include/bits/socket.h" 2 3 4
# 402 "/usr/include/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 39 "/usr/include/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 90 "/usr/include/sys/socket.h" 3 4
typedef union { struct sockaddr *__restrict __sockaddr__; struct sockaddr_at *__restrict __sockaddr_at__; struct sockaddr_ax25 *__restrict __sockaddr_ax25__; struct sockaddr_dl *__restrict __sockaddr_dl__; struct sockaddr_eon *__restrict __sockaddr_eon__; struct sockaddr_in *__restrict __sockaddr_in__; struct sockaddr_in6 *__restrict __sockaddr_in6__; struct sockaddr_inarp *__restrict __sockaddr_inarp__; struct sockaddr_ipx *__restrict __sockaddr_ipx__; struct sockaddr_iso *__restrict __sockaddr_iso__; struct sockaddr_ns *__restrict __sockaddr_ns__; struct sockaddr_un *__restrict __sockaddr_un__; struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __SOCKADDR_ARG __attribute__ ((__transparent_union__));


typedef union { const struct sockaddr *__restrict __sockaddr__; const struct sockaddr_at *__restrict __sockaddr_at__; const struct sockaddr_ax25 *__restrict __sockaddr_ax25__; const struct sockaddr_dl *__restrict __sockaddr_dl__; const struct sockaddr_eon *__restrict __sockaddr_eon__; const struct sockaddr_in *__restrict __sockaddr_in__; const struct sockaddr_in6 *__restrict __sockaddr_in6__; const struct sockaddr_inarp *__restrict __sockaddr_inarp__; const struct sockaddr_ipx *__restrict __sockaddr_ipx__; const struct sockaddr_iso *__restrict __sockaddr_iso__; const struct sockaddr_ns *__restrict __sockaddr_ns__; const struct sockaddr_un *__restrict __sockaddr_un__; const struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __CONST_SOCKADDR_ARG __attribute__ ((__transparent_union__));





struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__ , __leaf__));


extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));


extern int getsockname (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));
# 137 "/usr/include/sys/socket.h" 3 4
extern int connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);



extern int getpeername (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, __CONST_SOCKADDR_ARG __addr,
         socklen_t __addr_len);
# 174 "/usr/include/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, __SOCKADDR_ARG __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);







extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);







extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);







extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);






extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__ , __leaf__));




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__ , __leaf__));





extern int listen (int __fd, int __n) __attribute__ ((__nothrow__ , __leaf__));
# 243 "/usr/include/sys/socket.h" 3 4
extern int accept (int __fd, __SOCKADDR_ARG __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, __SOCKADDR_ARG __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 261 "/usr/include/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__ , __leaf__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__ , __leaf__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__ , __leaf__));
# 283 "/usr/include/sys/socket.h" 3 4

# 42 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 22 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 24 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) ;






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 873 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 874 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 995 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1007 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1018 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1028 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1039 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1060 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1083 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1093 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1114 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1166 "/usr/include/unistd.h" 3 4

# 43 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/usr/include/sys/epoll.h" 1 3 4
# 21 "/usr/include/sys/epoll.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 48 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 128 "/usr/include/stdint.h" 3 4
typedef unsigned int uintptr_t;
# 137 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 2 3 4
# 22 "/usr/include/sys/epoll.h" 2 3 4



# 1 "/usr/include/bits/sigset.h" 1 3 4
# 26 "/usr/include/sys/epoll.h" 2 3 4







# 1 "/usr/include/bits/epoll.h" 1 3 4
# 23 "/usr/include/bits/epoll.h" 3 4
enum
  {
    EPOLL_CLOEXEC = 02000000

  };
# 34 "/usr/include/sys/epoll.h" 2 3 4






enum EPOLL_EVENTS
  {
    EPOLLIN = 0x001,

    EPOLLPRI = 0x002,

    EPOLLOUT = 0x004,

    EPOLLRDNORM = 0x040,

    EPOLLRDBAND = 0x080,

    EPOLLWRNORM = 0x100,

    EPOLLWRBAND = 0x200,

    EPOLLMSG = 0x400,

    EPOLLERR = 0x008,

    EPOLLHUP = 0x010,

    EPOLLRDHUP = 0x2000,

    EPOLLEXCLUSIVE = 1u << 28,

    EPOLLWAKEUP = 1u << 29,

    EPOLLONESHOT = 1u << 30,

    EPOLLET = 1u << 31

  };
# 81 "/usr/include/sys/epoll.h" 3 4
typedef union epoll_data
{
  void *ptr;
  int fd;
  uint32_t u32;
  uint64_t u64;
} epoll_data_t;

struct epoll_event
{
  uint32_t events;
  epoll_data_t data;
} __attribute__ ((__packed__));








extern int epoll_create (int __size) __attribute__ ((__nothrow__ , __leaf__));



extern int epoll_create1 (int __flags) __attribute__ ((__nothrow__ , __leaf__));
# 115 "/usr/include/sys/epoll.h" 3 4
extern int epoll_ctl (int __epfd, int __op, int __fd,
        struct epoll_event *__event) __attribute__ ((__nothrow__ , __leaf__));
# 129 "/usr/include/sys/epoll.h" 3 4
extern int epoll_wait (int __epfd, struct epoll_event *__events,
         int __maxevents, int __timeout);







extern int epoll_pwait (int __epfd, struct epoll_event *__events,
   int __maxevents, int __timeout,
   const __sigset_t *__ss);


# 44 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 23 "/usr/include/sys/ioctl.h" 3 4



# 1 "/usr/include/bits/ioctls.h" 1 3 4
# 23 "/usr/include/bits/ioctls.h" 3 4
# 1 "/usr/include/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4



# 1 "/usr/include/linux/ioctl.h" 1 3 4



# 1 "/usr/include/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 1 "/usr/include/asm/ioctl.h" 2 3 4
# 5 "/usr/include/linux/ioctl.h" 2 3 4
# 5 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 1 "/usr/include/asm/ioctls.h" 2 3 4
# 24 "/usr/include/bits/ioctls.h" 2 3 4
# 27 "/usr/include/sys/ioctl.h" 2 3 4


# 1 "/usr/include/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/bits/ioctl-types.h" 3 4
# 1 "/usr/include/asm/ioctls.h" 1 3 4
# 25 "/usr/include/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/sys/ioctl.h" 2 3 4






# 1 "/usr/include/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/sys/ioctl.h" 2 3 4




extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4




# 1 "/usr/include/bits/errno.h" 1 3 4
# 24 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/bits/errno.h" 2 3 4
# 50 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 54 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;




# 68 "/usr/include/errno.h" 3 4
typedef int error_t;
# 46 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envopt.h" 1
# 47 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h" 1
# 172 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"

# 172 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef void *Ptr;
# 773 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef unsigned char Bool;


typedef char S8;




typedef unsigned char U8;

typedef short S16;
typedef unsigned short U16;


typedef long S32;
typedef unsigned long U32;





__extension__ typedef long long S64;
__extension__ typedef unsigned long long U64;
# 814 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef float F32;
typedef double F64;
# 831 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef void Void;



typedef S8 (*PFS8) (void );
typedef S16 (*PFS16) (void );
typedef S32 (*PFS32) (void );
typedef Void (*PFVOID) (void );
typedef Void ( *PIF) (void );
# 1850 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h"
typedef U32 MFTYPE;




typedef S8 *ARGTYPE;
# 48 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envind.h" 1
# 49 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.h" 1
# 50 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.h" 1
# 1918 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.h"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 1
# 46 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 28 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 29 "/usr/include/sched.h" 2 3 4





# 1 "/usr/include/time.h" 1 3 4
# 35 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 73 "/usr/include/bits/sched.h" 3 4

# 73 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));


extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));











struct __sched_param
  {
    int __sched_priority;
  };
# 119 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 202 "/usr/include/bits/sched.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 44 "/usr/include/sched.h" 2 3 4







extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));



# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 88 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 25 "/usr/include/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));


# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 222 "/usr/include/time.h" 2 3 4

extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));






extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 25 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4
# 35 "/usr/include/bits/setjmp.h" 3 4
typedef int __jmp_buf[6];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 114 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 155 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 190 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 228 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 494 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 506 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 540 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 680 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1)));
# 692 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  __attribute__ ((__regparm__ (1)));
# 715 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1)));
# 728 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  __attribute__ ((__regparm__ (1)));



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1))) __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 806 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 888 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1000 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1044 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1111 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1159 "/usr/include/pthread.h" 3 4

# 47 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/usr/include/semaphore.h" 1 3 4
# 29 "/usr/include/semaphore.h" 3 4
# 1 "/usr/include/bits/semaphore.h" 1 3 4
# 23 "/usr/include/bits/semaphore.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/semaphore.h" 2 3 4
# 36 "/usr/include/bits/semaphore.h" 3 4
typedef union
{
  char __size[16];
  long int __align;
} sem_t;
# 30 "/usr/include/semaphore.h" 2 3 4






extern int sem_init (sem_t *__sem, int __pshared, unsigned int __value)
     __attribute__ ((__nothrow__ , __leaf__));

extern int sem_destroy (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__));


extern sem_t *sem_open (const char *__name, int __oflag, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int sem_close (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__));


extern int sem_unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__));





extern int sem_wait (sem_t *__sem);






extern int sem_timedwait (sem_t *__restrict __sem,
     const struct timespec *__restrict __abstime);



extern int sem_trywait (sem_t *__sem) __attribute__ ((__nothrow__));


extern int sem_post (sem_t *__sem) __attribute__ ((__nothrow__));


extern int sem_getvalue (sem_t *__restrict __sem, int *__restrict __sval)
     __attribute__ ((__nothrow__ , __leaf__));



# 48 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 110 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 166 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 167 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 207 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 229 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 254 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 264 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 297 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 465 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 524 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 552 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 563 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 596 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 642 "/usr/include/stdio.h" 3 4

# 651 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 667 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 728 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 739 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 775 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 794 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 817 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 856 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 874 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 944 "/usr/include/stdio.h" 3 4

# 49 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm5.h" 1
# 50 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.h" 1
# 51 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2

# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 272 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 368 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 599 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 656 "/usr/include/string.h" 3 4

# 53 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2


# 1 "/usr/include/netinet/in.h" 1 3 4
# 27 "/usr/include/netinet/in.h" 3 4



typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/bits/in.h" 1 3 4
# 141 "/usr/include/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 211 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];

 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];

      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 239 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };



struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 376 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 388 "/usr/include/netinet/in.h" 2 3 4
# 503 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) __attribute__ ((__nothrow__ , __leaf__));


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     __attribute__ ((__nothrow__ , __leaf__));
# 533 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));



extern socklen_t inet6_rth_space (int __type, int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_reverse (const void *__in, void *__out) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_segments (const void *__bp) __attribute__ ((__nothrow__ , __leaf__));
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     __attribute__ ((__nothrow__ , __leaf__));





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));



# 56 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.h" 2
# 1919 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.h" 2
# 51 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.h" 1
# 52 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_llist.h" 1
# 53 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.h" 1
# 55 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.h" 1
# 21 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.h"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.h" 1
# 22 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.h" 2
# 56 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.h" 1
# 57 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2


# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x" 1
# 115 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"

# 115 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef S8 Txt;

typedef U8 Ent;

typedef U8 Inst;

typedef struct entityId
{
   Ent ent;
   Inst inst;
} EntityId;



typedef S16 Elmnt;

typedef S16 ElmntInst1;

typedef S16 ElmntInst2;

typedef S16 ElmntInst3;

typedef struct elmntId
{
   Elmnt elmnt;
   ElmntInst1 elmntInst1;
   ElmntInst2 elmntInst2;
   ElmntInst3 elmntInst3;
} ElmntId;

typedef U8 Region;

typedef U8 Pool;

typedef U8 Prior;

typedef Prior Priority;

typedef U8 Route;

typedef U8 Data;

typedef U8 Selector;

typedef S16 Reason;

typedef U16 ProcId;

typedef U8 Event;

typedef U32 TranId;

typedef S16 IntNum;

typedef U16 TranNum;

typedef U16 CmIntfId;
typedef U16 CmIntfVer;
# 183 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct pst
{
   ProcId dstProcId;
   ProcId srcProcId;

   Ent dstEnt;
   Inst dstInst;
   Ent srcEnt;
   Inst srcInst;

   Prior prior;
   Route route;
   Event event;
   Region region;

   Pool pool;
   Selector selector;
   CmIntfVer intfVer;
} Pst;



typedef struct systemId
{
   S16 mVer;
   S16 mRev;
   S16 bVer;
   S16 bRev;
   Txt *ptNmb;
} SystemId;





typedef struct protAddr
{
   U16 protType;
   U8 len;
   U8 preLen;
   U8 address[16];





}ProtAddr;

typedef struct protAddrTbl
{
   U8 count;
   ProtAddr addr[4];
}ProtAddrTbl;



typedef struct addrs
{
   U8 length;
   U8 strg[20];
} Addrs;

typedef struct shrtAddr
{
   U8 length;
   U8 strg[32];
} ShrtAddrs;

typedef struct lngAddr
{
   U8 length;
   U8 strg[64];
} LngAddrs;



typedef struct bndCfg
{
   Txt *usrId;
   U8 bufOwnshp;
   U8 flcTyp;
   U8 wdw;
   Ent ent;
   Inst inst;
   Region region;
   Pool pool;
   Prior prior;
   Route route;
   Addrs sapAdr;
   Selector selector;
} BndCfg;
# 288 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct tskInit
{



   Ent ent;
   Inst inst;
   Region region;
   Pool pool;
   Reason reason;
   Bool cfgDone;
   Bool acnt;
   Bool usta;
   Bool trc;

   U32 dbgMask;
   Txt prntBuf[255];

   Txt *prntCirBuf;




   BndCfg lmBnd;
   ProcId procId;
   Pst lmPst;
# 325 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
} TskInit;


typedef S32 Cntr;

typedef U32 StsCntr;

typedef S16 LnkNmb;

typedef S8 VBit;

typedef S16 SuId;

typedef S16 SpId;

typedef S16 SuInstId;

typedef S16 SpInstId;

typedef U16 PortId;

typedef U8 Sapi;

typedef U8 Tei;

typedef U8 Ces;

typedef U32 Dlci;

typedef U16 CalRef;

typedef S16 Origin;

typedef U16 NwId;

typedef S16 Swtch;

typedef U8 Cause;

typedef U8 Dgn;

typedef S16 Action;

typedef S16 SeqS16;

typedef U16 SeqU16;

typedef S32 SeqS24;

typedef U32 SeqU24;

typedef U8 SetUpArb;

typedef U8 EvntType;

typedef U8 State;

typedef U8 Mode;

typedef S32 ConnId;

typedef U32 UConnId;

typedef U16 ProtId;

typedef U16 ChannelId;

typedef U8 Arr64U8[64];

typedef U16 Efa;

typedef U32 BitState;

typedef U8 CChanId;

typedef U16 MibOpCode;


typedef U16 MibStatus;

typedef U16 MibTblType;

typedef S32 MibReqId;

typedef U8 UstaType;
typedef S8 ChannelNo;
# 501 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef S16 Baud;

typedef S16 PhysIntType;

typedef S16 PathConnType;

typedef S16 Parity;

typedef S16 CharLength;

typedef S16 StopBits;



typedef U32 IpAddr;

typedef U16 Port;

typedef U8 Cmd;

typedef U8 Flags;

typedef U8 Ttl;

typedef U8 Prec;

typedef U32 Window;

typedef U8 MtpStatus;

typedef U8 Credit;



typedef U32 CirId;

typedef U16 Cic;

typedef U32 SiInstId;



typedef U32 BiInstId;



typedef U32 TpInstId;



typedef U32 Oui;
typedef U16 Pid;
typedef U32 LlcId;
# 716 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct octStrg
{
   S32 length;
   U8 val[132];
} OctStrg;

typedef struct tknHdr
{
   U8 pres;
   U8 spare1;
   U16 spare2;



} TknHdr;

typedef struct elmtHdr
{
   U8 pres;
   U8 actnInd;
   U16 compInd;



} ElmtHdr;



typedef struct tknU8
{
   U8 pres;
   U8 val;
   U16 spare1;



} TknU8;

typedef struct tknS8
{
   U8 pres;
   S8 val;
   U16 spare1;



} TknS8;

typedef struct tknU16
{
   U8 pres;
   U8 spare1;
   U16 val;



} TknU16;

typedef struct tknU32
{
   U8 pres;
   U8 spare1;
   U16 spare2;
   U32 val;
} TknU32;

typedef struct tknS32
{
   U8 pres;
   U8 spare1;
   U16 spare2;
   S32 val;
} TknS32;

typedef struct tknStrS
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(22 + 3) & 0xffc];

} TknStrS;

typedef struct tknStrM
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(32 + 3) & 0xffc];

} TknStrM;

typedef struct tknStr
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(132 + 3) & 0xffc];

} TknStr;

typedef struct tknStrE
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(255 + 3) & 0xffc];

} TknStrE;

typedef struct tknStrXL
{
   U16 len;
   U8 pres;
   U8 spare1;



   U8 *val;
} TknStrXL;

typedef struct tknStr4
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[4];

} TknStr4;

typedef struct tknStr12
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[12];

} TknStr12;

typedef struct tknStr32
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[32];
} TknStr32;

typedef struct tknStr64
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[64];
} TknStr64;

typedef struct tknStr132
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[132];

} TknStr132;

typedef struct tknStr256
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[256];
} TknStr256;

typedef struct tknOid
{
   U8 pres;
   U8 len;
   U16 spare1;






   U32 val[32];



} TknOid;

typedef struct tknBits
{
   U8 pres;
   U8 len;
   U16 spare1;




   U8 val[(7 + 3) & 0xffc];

} TknBits;

typedef struct elmtStr
{
   ElmtHdr eh;
   TknStr str;
} ElmtStr;

typedef struct cdPtyNmb
{
   ElmtHdr eh;
   TknU8 nmbPlanId;
   TknU8 typeNmb0;



   TknStrS nmbDigits;

} CdPtyNmb;

typedef struct redirNmb
{
   ElmtHdr eh;
   TknU8 nmbPlanId;
   TknU8 typeNmb;
   TknU8 screenInd;
   TknU8 presInd;
   TknU8 rsnRedirect;
   TknStrS nmbDigits;
} RedirNmb;

typedef struct srvClass
{
   U8 type;
   union
   {
      struct
      {
         Bool cr;
         Bool de;
      } fr;
      struct
      {
         Prior prior;
      } ma;
   } s;
} SrvClass;



typedef struct _ip
{
   U8 ip_hl;
   Prec ip_tos;
   U16 ip_len;
   U16 ip_id;
   U16 ip_off;
   Ttl ip_ttl;
   U8 ip_p;
   U16 ip_sum;
   IpAddr ip_src;
   IpAddr ip_dst;
} Ip;
# 1518 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct smCfg
{
   Ent ent;
   Inst inst;
   Region region;
   Pool pool;
   Priority prior;
   Route route;
   Selector selector;
} SmCfg;

typedef struct mem
{
   Region region;
   Pool pool;
   U16 spare;
} Mem;

typedef Mem MemoryId;


typedef struct resp
{
   Selector selector;
   Priority prior;
   Route route;
   MemoryId mem;
}Resp;

typedef struct tds_header
{
   U16 msgLen;
   U8 msgType;
   U8 version;
   U16 seqNmb;
   EntityId entId;
   ElmntId elmId;

   TranId transId;
   Resp response;

} Header;

typedef struct tmrCfg
{
   Bool enb;
   U16 val;
} TmrCfg;

typedef struct asyncCfg
{
   StopBits stopBits;
   CharLength charLength;
   Parity rxParity;
   Parity txParity;
} AsyncCfg;




typedef struct dateTime
{
   U8 month;
   U8 day;
   U8 year;
   U8 hour;
   U8 min;
   U8 sec;
   U8 tenths;




} DateTime;


typedef U64 EpcTime;


typedef struct cmStatus
{
   U16 status;
   U16 reason;
}CmStatus;


typedef struct cmAlarm
{
   DateTime dt;
   U16 category;
   U16 event;
   U16 cause;
}CmAlarm;



typedef struct duration
{
   U8 days;
   U8 hours;
   U8 mins;
   U8 secs;
   U8 tenths;
} Duration;
# 1630 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct ssmsgb Buffer;
# 1655 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x"
typedef struct tknBuf
{
   U8 pres;
   U8 spare1;
   U16 spare2;



   Buffer *val;
} TknBuf;



typedef U32 CmIpAddr;







extern S16 cmPkDateTime (DateTime *dateTime, Buffer *mBuf);
extern S16 cmPkDuration (Duration *duration, Buffer *mBuf);
extern S16 cmPkPtr (U32 ptr, Buffer *mBuf);
extern S16 cmPkEntityId (EntityId *entityId, Buffer *mBuf);
extern S16 cmPkElmntId (ElmntId *elmntId, Buffer *mBuf);
extern S16 cmPkMemoryId (MemoryId *memoryId, Buffer *mBuf);


extern S16 cmPkSystemId (SystemId *systemId, Buffer *mBuf);
extern S16 cmPkAddrs (Addrs *addrs, Buffer *mBuf);
extern S16 cmPkProtAddr (ProtAddr *protAddr, Buffer *mBuf);
extern S16 cmPkProtAddrTbl (ProtAddrTbl *protAddr, Buffer *mBuf);
extern S16 cmPkShrtAddrs (ShrtAddrs *addrs, Buffer *mBuf);
extern S16 cmPkAddrMask (U8 *mask, Buffer *mBuf);
extern S16 cmPkBndCfg (BndCfg *bndCfg, Buffer *mBuf);
extern S16 cmPkPst (Pst *pst, Buffer *mBuf);
extern S16 cmPkElmtHdr (ElmtHdr *m, Buffer *mBuf);
extern S16 cmPkTknU8 (TknU8 *tknU8, Buffer *mBuf);
extern S16 cmPkTknS8 (TknS8 *tknS8, Buffer *mBuf);
extern S16 cmPkTknU16 (TknU16 *tknU16, Buffer *mBuf);
extern S16 cmPkTknU32 (TknU32 *tknU32, Buffer *mBuf);
extern S16 cmPkTknStr (TknStr *tknStr, Buffer *mBuf);
extern S16 cmPkTknStrM (TknStrM *tknStr, Buffer *mBuf);
extern S16 cmPkTknStrS (TknStrS *tknStr, Buffer *mBuf);
extern S16 cmPkTknStrE (TknStrE *tknStr, Buffer *mBuf);

extern S16 cmPkTknStr4 (TknStr4 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr12 (TknStr12 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr32 (TknStr32 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr64 (TknStr64 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr132 (TknStr132 *tknStr, Buffer *mBuf);
extern S16 cmPkTknStr256 (TknStr256 *tknStr, Buffer *mBuf);

 S16 cmPkTknS32 (TknS32 *tknS32, Buffer *mBuf);
 S16 cmPkTknOid (TknOid *tknOid, Buffer *mBuf);
 S16 cmPkTknBuf (TknBuf *tknBuf, Buffer *mBuf);






extern S16 cmPkHeader (Header *header, Buffer *mBuf);
extern S16 cmPkSmCfg (SmCfg *smCfg, Buffer *mBuf);
extern S16 cmPkTmrCfg (TmrCfg *tmrCfg, Buffer *mBuf);
extern S16 cmPkCmStatus (CmStatus *status, Buffer *mBuf);
extern S16 cmPkCmAlarm (CmAlarm *alrm, Buffer *mBuf);





extern S16 cmUnpkDateTime (DateTime *dateTime, Buffer *mBuf);
extern S16 cmUnpkDuration (Duration *duration, Buffer *mBuf);
extern S16 cmUnpkPtr (U32 *ptr, Buffer *mBuf);
extern S16 cmUnpkEntityId (EntityId *entityId, Buffer *mBuf);
extern S16 cmUnpkElmntId (ElmntId *elmntId, Buffer *mBuf);
extern S16 cmUnpkMemoryId (MemoryId *memoryId, Buffer *mBuf);


extern S16 cmUnpkSystemId (SystemId *systemId, Buffer *mBuf);
extern S16 cmUnpkAddrs (Addrs *addrs, Buffer *mBuf);
extern S16 cmUnpkProtAddr (ProtAddr *protAddr, Buffer *mBuf);
extern S16 cmUnpkProtAddrTbl (ProtAddrTbl *protAddr, Buffer *mBuf);
extern S16 cmUnpkShrtAddrs (ShrtAddrs *addrs, Buffer *mBuf);
extern S16 cmUnpkAddrMask (U8 *mask, Buffer *mBuf);
extern S16 cmUnpkBndCfg (BndCfg *bndCfg, Buffer *mBuf);
extern S16 cmUnpkPst (Pst *pst, Buffer *mBuf);
extern S16 cmUnpkElmtHdr (ElmtHdr *m, Buffer *mBuf);
extern S16 cmUnpkTknU8 (TknU8 *tknU8, Buffer *mBuf);
extern S16 cmUnpkTknS8 (TknS8 *tknS8, Buffer *mBuf);
extern S16 cmUnpkTknU16 (TknU16 *tknU16, Buffer *mBuf);
extern S16 cmUnpkTknU32 (TknU32 *tknU32, Buffer *mBuf);
extern S16 cmUnpkTknStr (TknStr *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStrM (TknStrM *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStrS (TknStrS *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStrE (TknStrE *tknStr, Buffer *mBuf);

extern S16 cmUnpkTknStr4 (TknStr4 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr12 (TknStr12 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr32 (TknStr32 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr64 (TknStr64 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr132 (TknStr132 *tknStr, Buffer *mBuf);
extern S16 cmUnpkTknStr256 (TknStr256 *tknStr, Buffer *mBuf);

 S16 cmUnpkTknS32 (TknS32 *tknS32, Buffer *mBuf);
 S16 cmUnpkTknOid (TknOid *tknOid, Buffer *mBuf);
 S16 cmUnpkTknBuf (TknBuf *tknBuf, Buffer **mBuf);






extern S16 cmUnpkHeader (Header *header, Buffer *mBuf);
extern S16 cmUnpkSmCfg (SmCfg *smCfg, Buffer *mBuf);
extern S16 cmUnpkTmrCfg (TmrCfg *tmrCfg, Buffer *mBuf);
extern S16 cmUnpkCmStatus (CmStatus *status, Buffer *mBuf);
extern S16 cmUnpkCmAlarm (CmAlarm *alrm, Buffer *mBuf);
# 60 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x" 1
# 81 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 Status;

typedef U32 Ticks;




typedef S16 MsgLen;


typedef S16 Order;




typedef U32 Size;
typedef S32 PtrOff;


typedef U32 QLen;

typedef QLen BufQLen;

typedef S16 RegSize;

typedef S16 DPoolSize;

typedef U16 Random;

typedef S16 Seq;

typedef U32 CoreId;


typedef U32 ErrCls;

typedef U32 ErrCode;

typedef U32 ErrVal;

typedef S16 VectNmb;

typedef S16 Ttype;

typedef S8 Sema;
# 742 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 msOptInd;
extern S8 *msOptArg;
extern Txt **msArgv;
extern S16 msArgc;




typedef U8 SSTskId;




typedef S32 SSTskPrior;
# 765 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
struct ssmsgb
{
   S8 refCnt;
   struct ssmsgb *b_next;
   struct ssmsgb *b_prev;
   struct ssmsgb *b_cont;
   U8 *b_rptr;
   U8 *b_wptr;
   struct ssdatab *b_datap;
};


typedef struct ssQueue
{
   Buffer *head;
   Buffer *tail;
   QLen crntSize;

} Queue;



typedef struct sMemCtl
{
   U8 op;

   union
   {
      struct
      {
         Data *vaddr;
         Data **paddr;
      } vtop;

      struct
      {
         Size size;
         Status *status;
      } chkres;
   } u;

} SMemCtl;
# 831 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 (*SsAlloc) (Void *, Size *, U32, Data **);





typedef S16 (*SsFree) (Void *, Data *, Size);

typedef S16 (*SsCtl) (Void *, Event, SMemCtl *);




typedef struct sRegInfo
{
   Void *regCb;
   U32 flags;




   Data *start;
   Size size;
   SsAlloc alloc;
   SsFree free;
   SsCtl ctl;

} SRegInfo;
# 879 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x" 1
# 39 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm5.x" 1
# 29 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm5.x"
typedef struct cmTimer
{
   S16 tmrEvnt;
   U32 tqExpire;
   U32 cb;
   struct cmTimer *next;
   struct cmTimer *prev;
   U8 ent2bUpd;

   U16 entIdx;
} CmTimer;

typedef struct cmTqCp
{
   U32 nxtEnt;
   U32 tmrLen;
   CmTimer *tmp;
} CmTqCp;

typedef struct cmTqType
{
   CmTimer *first;
   CmTimer *tail;
} CmTqType;

typedef struct cmTmrArg
{
   CmTqCp *tqCp;
   CmTqType *tq;
   CmTimer *timers;
   U32 cb;
   S16 evnt;
   U32 wait;
   U8 tNum;
   U8 max;
} CmTmrArg;




typedef Void (*PFV) (U32, S16);

extern Void cmInitTimers (CmTimer* timers, U8 max);
extern Void cmPlcCbTq (CmTmrArg* arg);
extern Void cmRmvCbTq (CmTmrArg* arg);
extern Void cmPrcTmr (CmTqCp* tqCp, CmTqType* tq, PFV func);
extern Void cmRstCbTq (CmTmrArg* arg);
# 40 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.x" 1
# 32 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.x"
typedef S8 SsdTTskEntry;



typedef struct ssdSTskEntry
{
   pthread_t tId;
   Ent ent;
   Inst inst;
   pthread_mutex_t lock;


   U32 lwpId;

} SsdSTskEntry;




typedef struct ssdDrvrTskEntry
{
   Bool flag;

} SsdDrvrTskEntry;




typedef struct ssdTmrEntry
{
   CmTimer timers[1];

} SsdTmrEntry;



typedef S8 SsdDPoolEntry;



typedef S8 SsdSPoolEntry;



typedef S8 SsdPoolEntry;



typedef S8 SsdRegionEntry;





typedef struct ssdOs
{
   unsigned randSeed;

   Ticks sysTicks;

   pthread_t tmrHdlrTID;
   CmTqCp tmrTqCp;
   CmTqType tmrTq[45];

   sem_t ssStarted;

   FILE *conInFp;
   FILE *conOutFp;
   pthread_t conHdlrTID;



   FILE *fileOutFp;



   pthread_t isTskHdlrTID;
   int isFildes[2];

   Bool sigEvnt;

} SsdOs;


typedef struct mtBktCfg
{
   Size blkSize;
   U32 numBlks;
} MtBktCfg;

typedef struct mtRegCfg
{
   Region regionId;
   U16 numBkts;
   Size heapsize;
   MtBktCfg bkt[5];
} MtRegCfg;

typedef struct mtMemCfg
{
   U8 numRegions;
   MtRegCfg region[8];
} MtMemCfg;
# 153 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/mt_ss.x"
extern U32 gt[128];
# 41 "/home/mrehwald/Desktop/Radisys/lte_enb/src/mt/ss_dep.x" 2
# 880 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x" 2
# 918 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 (*PAIFS16) (Ent ent,Inst inst,Region region,Reason reason );





typedef S16 (*PAIFTMRS16) (Ent ent, Inst inst);
# 940 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
typedef S16 (*PATFS16) (Prior prior,Route route,Ent ent,Inst inst,Buffer *mBuf);



typedef S16 (*ActvTsk) (Pst *pst, Buffer *mBuf);

typedef struct uProc UProc;

typedef void (*ISTsk) (Inst inst);




struct uProc
{
   Inst inst;
   ProcId low;
   ProcId high;
   ActvTsk actvTsk;
   U16 isFlag;
   ISTsk isTsk;
};






extern S16 SChekMemUtilization (Region region,Bool *memAlarm);

extern Void prntMem (Data *strtAdr,S16 len);
extern Void prntMsg (Buffer *mBuf);
extern Void prntMsg1 (Buffer *mBuf,S16 src,S16 dst);
extern S16 tst (void );
extern S16 rdConQ (Data data);

extern S16 SPkS8 (S8 val,Buffer *mBuf);
extern S16 SPkU8 (U8 val,Buffer *mBuf);
extern S16 SPkS16 (S16 val,Buffer *mBuf);
extern S16 SPkU16 (U16 val,Buffer *mBuf);
extern S16 SPkS32 (S32 val,Buffer *mBuf);
extern S16 SPkU32 (U32 val,Buffer *mBuf);


extern S16 SPkF32 (F32 val,Buffer *mBuf);
extern S16 SPkF64 (F64 val,Buffer *mBuf);

extern S16 SUnpkS8 (S8 *val,Buffer *mBuf);
extern S16 SUnpkU8 (U8 *val,Buffer *mBuf);
extern S16 SUnpkS16 (S16 *val,Buffer *mBuf);
extern S16 SUnpkU16 (U16 *val,Buffer *mBuf);
extern S16 SUnpkS32 (S32 *val,Buffer *mBuf);
extern S16 SUnpkU32 (U32 *val,Buffer *mBuf);


extern S16 SUnpkF32 (F32 *val,Buffer *mBuf);
extern S16 SUnpkF64 (F64 *val,Buffer *mBuf);

extern S16 SPrint (Txt *buf);
extern S16 SDisplay (S16 chan,Txt *buf);
extern S16 SPrntMsg (Buffer *mBuf,S16 src,S16 dst);
extern S16 SInitQueue (Queue *q);

extern S16 SQueueFirst (Buffer *buf,Queue *q);
extern S16 SQueueLast (Buffer *buf,Queue *q);
extern S16 SDequeueFirst (Buffer * *bufPtr,Queue *q);
extern S16 SDequeueLast (Buffer * *bufPtr,Queue *q);

extern S16 SFlushQueue (Queue *q);
extern S16 SCatQueue (Queue *q1,Queue *q2,Order order);
extern S16 SFndLenQueue (Queue *q,QLen *lngPtr);
extern S16 SExamQueue (Buffer **bufPtr,Queue *q,QLen idx);
extern S16 SAddQueue (Buffer *buf,Queue *q,QLen idx);
extern S16 SRemQueue (Buffer **bufPtr,Queue *q,QLen idx);
# 1029 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetDBuf (Region region,Pool pool,Buffer * *bufPtr);
extern S16 SPutDBuf (Region region,Pool pool,Buffer *buf);
# 1046 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SPutMsgToRegion (Region region, Buffer *buf);
# 1073 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SPutMsg (Buffer *mBuf);
extern S16 SGetMsg (Region region, Pool pool, Buffer * *mBufPtr);
# 1090 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetSBuf (Region region,Pool pool, Data * *bufPtr, Size size);
extern S16 SPutSBuf (Region region, Pool pool, Data *buf, Size size);
# 1101 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetStaticBuffer (Region region,Pool pool, Data * *bufPtr, Size size, U8 memType);
extern S16 SPutStaticBuffer (Region region, Pool pool, Data *buf, Size size, U8 memType);
# 1114 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SGetSMem (Region region,Size size,Pool *poolPtr);
extern S16 SPutSMem (Region region,Pool pool);
extern S16 SInitMsg (Buffer *mBuf);
extern S16 SAddPreMsg (Data data,Buffer *mBuf);
extern S16 SAddPstMsg (Data data,Buffer *mBuf);

extern S16 SAddPreMsgMultInOrder (Data *src,MsgLen cnt,Buffer *mBuf);
extern S16 SRemPreMsg (Data *dataPtr,Buffer *mBuf);
extern S16 SRemPreMsgRegion (Region region, Data *dataPtr,Buffer *mBuf);
extern S16 SCatMsgRegion (Region region, Buffer *mBuf1,Buffer *mBuf2,Order order);
extern S16 SSegMsgRegion (Region region, Buffer *mBuf1,MsgLen idx,Buffer **mBuf2);
extern int SCreatePThread (pthread_t* tid, pthread_attr_t* attr, void *(*start_routine) (void *), void* arg);
extern S16 SRemPstMsg (Data *dataPtr,Buffer *mBuf);







extern S16 SAddPreMsgMult (Data *src,MsgLen cnt,Buffer *mBuf);
extern S16 SAddPstMsgMult (Data *src,MsgLen cnt,Buffer *mBuf);

extern S16 SGetPstMsgMult (MsgLen cnt,Buffer *mBuf);
extern S16 SRemPreMsgMult (Data *dst,MsgLen cnt,Buffer *mBuf);
extern S16 SRemPstMsgMult (Data *dst,MsgLen cnt,Buffer *mBuf);
extern S16 SRepMsg (Data data,Buffer *mBuf,MsgLen idx);
extern S16 SExamMsg (Data *dataPtr,Buffer *mBuf,MsgLen idx);

extern S16 SGetDataFrmMsg (Buffer *mBuf, Data *dataPtr, MsgLen idx, MsgLen dataLen);
extern S16 SFndLenMsg (Buffer *mBuf,MsgLen *lngPtr);
extern S16 SCatMsg (Buffer *mBuf1,Buffer *mBuf2,Order order);




extern S16 SSegMsg (Buffer *mBuf1,MsgLen idx,Buffer **mBuf2);

extern S16 SSwapMsg (Buffer *mBuf1, Buffer *mBuf2);
extern S16 SCpyMsgFix (Buffer *srcMbuf,MsgLen srcIdx,MsgLen cnt, Data *dstBuf,MsgLen *cCnt)
                                       ;
extern S16 SCpyFixMsg (Data *srcBuf,Buffer *dstMbuf, MsgLen dstIdx,MsgLen cnt,MsgLen *cCnt)
                                                   ;
extern S16 SCompressMsg (Buffer *mBuf);
# 1166 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SCpyMsgMsg (Buffer *mBuf, Region region, Pool pool, Buffer **dstBuf)
                             ;
extern S16 SAddMsgRef (Buffer *mBuf, Region region, Pool pool, Buffer **dstBuf)
                             ;
extern S16 SIncMsgRef(Buffer *srcBuf, Region dstRegion, Pool dstPool, Buffer **dstBuf);






extern S16 SChkRes (Region region,Pool pool,Status *status);
extern S16 SChkResUtl (Region region,U8 *wSum);
extern S16 SSetDateTime (DateTime *dt);
extern S16 SGetDateTime (DateTime *dt);






extern S16 SGetEpcTime (EpcTime *et);

extern S16 SGetTimeStamp ( S8 *ts);
extern S16 SGetSysTime (Ticks *sysTime);
extern S16 SGetRefTime (U32 refTime, U32 *sec, U32 *usec);
extern S16 SRandom (Random *value);
extern S16 SError (Seq seq,Reason reason);
extern Void SLogError (Ent ent, Inst inst, ProcId procId, Txt *file, S32 line, ErrCls errCls, ErrCode errCode, ErrVal errVal, Txt *errDesc)

                                                    ;

extern U32 SGetSystemTsk (Void);




extern S16 SRegInit (Ent ent,Inst inst,PAIFS16 initFnct);
extern S16 SRegActvTsk (Ent ent,Inst inst,Ttype ttype,Prior prior, ActvTsk actvTsk)
                                               ;




extern S16 SRegCfgTmr (Ent ent, Inst inst, S16 period, S16 units, PFS16 tmrFnct)



                                            ;


extern S16 SRegCfgTmrMt (Ent ent, Inst inst, S16 period, S16 units, PAIFTMRS16 tmrFnctMt)



                                                     ;

extern S16 SDeregCfgTmr (Ent ent, Inst inst, S16 period, S16 units, PFS16 tmrFnct)



                                              ;


extern S16 SDeregCfgTmrMt (Ent ent, Inst inst, S16 period, S16 units, PAIFTMRS16 tmrFnctMt)



                                                       ;
# 1251 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SPstTsk (Pst *pst, Buffer *mBuf);






extern S16 SRegDrvrTsk (Inst inst, ProcId low, ProcId high, ActvTsk actvTsk, ISTsk isTsk)
                                                            ;

extern S16 SDeregDrvrTsk (Inst channel);



extern S16 SRegRtrTsk (Route *, Cntr, ActvTsk);
extern S16 SDeregRtrTsk (Route *, Cntr);



extern S16 SAttachPtrToBuf ( Region region, Pool pool, Data *ptr, MsgLen totalLen, Buffer** mBuf )





  ;





typedef S8 SsAffinityMode;


typedef struct {
  U32 numCores;
  U32 threadsPerCore;
  U32 threadRegister[64];
} SCpuInfo;

extern S16 SRegCpuInfo (SCpuInfo *cpuInfo);
extern S16 SSetAffinity (SSTskId *tskId, SsAffinityMode mode, U32 coreId, SSTskId *tskAssociatedTskId);
extern S16 SGetAffinity (SSTskId *tskId, U32 *coreId);







extern S16 SAddDBufPst (Buffer *mBuf, Buffer *dBuf);
extern S16 SAddDBufPre (Buffer *mBuf, Buffer *dBuf);
extern S16 SRemDBufPst (Buffer *mBuf, Buffer **dBuf);
extern S16 SRemDBufPre (Buffer *mBuf, Buffer **dBuf);
extern S16 SGetDataRx (Buffer *dBuf, MsgLen pad, Data **dat, MsgLen *mLen);
extern S16 SGetDataTx (Buffer *dBuf, Data **dat, MsgLen *mLen);
extern S16 SUpdMsg (Buffer *mBuf, Buffer *dBuf, MsgLen mLen);
extern S16 SCacheFlush (U16 cache_type, Data *addr, Size size);
extern S16 SCacheInvalidate (U16 cache_type, Data *addr, Size size);
extern S16 SAlignDBufEven (Buffer *dBuf);
extern S16 SAlignDBuf (Buffer *dBuf, U32 align);
extern S16 SInitNxtDBuf (Buffer *mBuf);
extern S16 SGetNxtDBuf (Buffer *mBuf, Buffer **dBuf);
extern S16 SChkNxtDBuf (Buffer *mBuf);
extern S16 SSetIntPend (U16 id, Bool flag);
extern S16 SChkMsg (Buffer *mBuf);
extern S16 SDeregInitTskTmr (Ent ent,Inst inst);
extern S16 SExitTsk (void );
extern S16 SExitInt (void );
extern S16 SHoldInt (void );
extern S16 SRelInt (void );
extern S16 SEnbInt (void );
extern S16 SDisInt (void );
extern S16 SGetVect (VectNmb vectNmb,PIF *vectFnct);
extern S16 SPutVect (VectNmb vectNmb,PIF vectFnct);






extern S16 SInitSema (Region region, Sema *sema);
extern S16 SRelSema (Region region, Sema sema);
extern S16 SGetSema (Region region, Sema sema);
extern S16 SActvInit (Ent ent,Inst inst,Region region,Reason reason);
extern S16 SActvTsk (Prior prior,Route route,Ent srcEnt, Inst srcInst,Buffer *mBuf)
                                       ;
extern S16 SActvTmr (void );
extern S16 SGetOpt (int argc,char **argv,char *opts);



extern S16 SGetEntInst (Ent *ent, Inst *inst);
extern S16 SSetEntInst (Ent ent, Inst inst);
extern ProcId SFndProcId (void);
extern Void SSetProcId (ProcId pId);


extern S16 SGetDBufSiz (Region region, Pool pool, S16 *size);
extern S16 SGetStrtIdx (Region region, Pool pool, S16 *idx);
extern S16 SGetEndIdx (Region region, Pool pool, S16 *idx);
extern S16 SGetStrtPad (Region region, Pool pool, S16 *pad);
# 1381 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern Void SExit (Void);




extern S16 SRegTTsk (Ent ent, Inst inst, Ttype type, Prior prior, PAIFS16 initTsk, ActvTsk actvTsk)




                                           ;

extern S16 SRegCbTsk (Ent ent, Inst inst, ActvTsk actvTsk)

                                           ;
extern S16 SDeregTTsk (Ent ent, Inst inst);
# 1415 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SCreateSTsk (SSTskPrior tskPrior, SSTskId *tskId);
extern S16 SDestroySTsk (SSTskId tskId);



extern S16 SAttachTTsk (Ent ent, Inst inst, SSTskId tskId);
extern S16 SDetachTTsk (Ent ent, Inst inst);







extern S16 SRegRegion (Region region, SRegInfo *regInfo);
extern S16 SDeregRegion (Region region);
extern S16 SRegDynRegion (Region region, SRegInfo *regInfo);
# 1448 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SAlloc (Region region, Size *size, U32 flags, Data **ptr);
extern S16 SFree (Region region, Data *ptr, Size size);


extern S16 SGetBufRegionPool (Buffer *mBuf, Region *region, Pool *pool);
# 1474 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SThreadYield (void);


extern S16 SInitLock (pthread_mutex_t *lock,U8 type);
extern S16 SLock (pthread_mutex_t *lock);
extern S16 SUnlock (pthread_mutex_t *lock);
extern S16 SDestroyLock (pthread_mutex_t *lock);


extern S16 SInitSemaphore (sem_t *sem, U8 value);
extern S16 SWaitSemaphore (sem_t *sem);
extern S16 SPostSemaphore (sem_t *sem);
extern S16 SDestroySemaphore (sem_t *sem);
# 1569 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 smActvInit (Ent ent, Inst inst, Region region, Reason reason);
# 1580 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 smInitExt (void);


extern S16 smActvTsk (Pst *pst, Buffer *mBuf);
# 1632 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S8* SGetConfigPath (Void);


extern S16 SCpyPartMsg (Buffer *srcBuf, MsgLen idx, MsgLen cnt, Buffer *dstBuf);
extern S16 SRepPartMsg (Buffer *srcBuf, MsgLen idx, MsgLen cnt, Buffer *dstBuf);
extern S16 SMovPartMsg (Buffer *srcBuf, MsgLen idx, Buffer *dstBuf);
extern S16 SPkMsgMult (Data *src, MsgLen cnt, Buffer *mBuf);
extern S16 SGetReadPtr (Buffer *mBuf, U8** data, MsgLen *len);

typedef enum
{
   SS_SHARABLE_MEMORY,
   SS_NON_SHARABLE_MEMORY
}ssMemoryType;
# 1661 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern S16 SStartTask (volatile U32 *startTime, U32 tarkId);
extern S16 SStopTask (volatile U32 startTime,U32 taskId);
# 1717 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern Void SIncrementTtiCount(Void);
extern Ticks SGetTtiCount(Void);
# 1732 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x"
extern Void ysPrntBkTrace(Void);
extern Void ssMlogInit(Void);
extern Void ssMlogIncrCounter(Void);


extern Void ssRegMainThread(Void);






extern S16 ssGetDBufOfSize(Region region,Size size,Buffer **dBuf);
# 61 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x" 1
# 31 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x"
typedef struct cmHashListCp CmHashListCp;




typedef S16 (* CmHashFunc) (CmHashListCp *hashListCp, U8 *key, U16 keyLen, U16 *idx)
                                                        ;


typedef struct cmListEnt CmListEnt;

struct cmListEnt
{
   CmListEnt *next;
   CmListEnt *prev;
};
# 62 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x"
typedef struct cmHashListEnt
{
   CmListEnt list;
   U8 *key;
   U16 keyLen;
   U16 hashVal;
} CmHashListEnt;



struct cmHashListCp
{

   CmListEnt *hl;



   Region region;
   Pool pool;
   U16 nmbBins;
   U16 binBitMask;
   U8 nmbBinBits;

   U16 nmbEnt;

   U16 offset;
   Bool dupFlg;
   U16 keyType;
   CmHashFunc hashFunc;
};




extern S16 cmHashListInit ( CmHashListCp *hashListCp, U16 nmbBins, U16 offset, Bool dupFlg, U16 keyType, Region region, Pool pool)






                                 ;

extern S16 cmHashListDeinit ( CmHashListCp *hashListCp)
                                        ;

extern S16 cmHashListInsert ( CmHashListCp *hashListCp, U32 entry, U8 *key, U16 keyLen)



                                   ;

extern S16 cmHashListDelete ( CmHashListCp *hashListCp, U32 entry)

                                  ;

extern S16 cmHashListFind ( CmHashListCp *hashListCp, U8 *key, U16 keyLen, U16 seqNmb, U32 *entry)




                                   ;

extern S16 cmHashListGetNext ( CmHashListCp *hashListCp, U32 prevEnt, U32 *entry)


                                   ;
# 140 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_hash.x"
extern S16 cmHashListQuery ( CmHashListCp *hashListCp, U8 queryType, U16 *result)


                                    ;



extern S16 cmHashListOAInsert ( CmHashListCp *hashListCp, U32 entry, U8 *key, U16 keyLen)



                                   ;
# 62 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_llist.x" 1
# 27 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_llist.x"
typedef struct cmLList CmLList;
typedef struct cmLListCp CmLListCp;


struct cmLList
{
   CmLList *next;
   CmLList *prev;
   U32 node;
};

struct cmLListCp
{
   CmLList *first;
   CmLList *last;
   CmLList *crnt;
   U32 count;
};

extern Void cmLListInit (CmLListCp *lList);
extern Void cmLListAdd2Head (CmLListCp *lList, CmLList *node);
extern Void cmLListAdd2Tail (CmLListCp *lList, CmLList *node);
extern Void cmLListInsCrnt (CmLListCp *lList, CmLList *node);

extern Void cmLListInsAfterCrnt (CmLListCp *lList, CmLList *node);
extern CmLList *cmLListDelFrm (CmLListCp *lList, CmLList *node);
extern Void cmLListCatLList ( CmLListCp *list1, CmLListCp *list2);
# 63 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_lib.x" 1
# 29 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_lib.x"
 U8 *cmMemcpy (U8 *tgt, const U8 *src, U32 len);
 S16 cmMemcmp (const U8 *s1, const U8 *s2, U32 len);
 U8 *cmMemset (U8 *src, U8 val, U32 len);

 S16 cmStrcmp (const U8 *s1, const U8 *s2);

 S16 cmStrncmp (const U8 *s1, const U8 *s2, MsgLen len);
 MsgLen cmStrlen (const U8 *s);
# 64 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 1
# 62 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
# 1 "/usr/include/sys/poll.h" 1 3 4
# 25 "/usr/include/sys/poll.h" 3 4
# 1 "/usr/include/bits/poll.h" 1 3 4
# 26 "/usr/include/sys/poll.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 29 "/usr/include/sys/poll.h" 2 3 4








# 36 "/usr/include/sys/poll.h" 3 4
typedef unsigned long int nfds_t;


struct pollfd
  {
    int fd;
    short int events;
    short int revents;
  };



# 57 "/usr/include/sys/poll.h" 3 4
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout);
# 66 "/usr/include/sys/poll.h" 3 4
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
    const struct timespec *__timeout,
    const __sigset_t *__ss);



# 63 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 2
# 88 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
# 1 "/usr/include/netdb.h" 1 3 4
# 32 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4



struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) __attribute__ ((__nothrow__ , __leaf__));
extern void endrpcent (void) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbyname (const char *__name) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbynumber (int __number) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcent (void) __attribute__ ((__nothrow__ , __leaf__));


extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));



# 33 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 24 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 320 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 3)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 38 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/bits/netdb.h" 1 3 4
# 26 "/usr/include/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 43 "/usr/include/netdb.h" 2 3 4
# 53 "/usr/include/netdb.h" 3 4








extern int *__h_errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 92 "/usr/include/netdb.h" 3 4
extern void herror (const char *__str) __attribute__ ((__nothrow__ , __leaf__));


extern const char *hstrerror (int __err_num) __attribute__ ((__nothrow__ , __leaf__));




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (const char *__name);
# 155 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (const char *__name, int __af);
# 167 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 198 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (const char *__name);
# 237 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (const char *__name, const char *__proto);






extern struct servent *getservbyport (int __port, const char *__proto);
# 308 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (const char *__restrict __name,
       const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 374 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 395 "/usr/include/netdb.h" 3 4
extern int setnetgrent (const char *__netgroup);







extern void endnetgrent (void);
# 412 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 423 "/usr/include/netdb.h" 3 4
extern int innetgr (const char *__netgroup, const char *__host,
      const char *__user, const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 451 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   const char *__restrict __locuser,
   const char *__restrict __remuser,
   const char *__restrict __cmd, int *__restrict __fd2p);
# 463 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      const char *__restrict __locuser,
      const char *__restrict __remuser,
      const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 479 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    const char *__restrict __name,
    const char *__restrict __pass,
    const char *__restrict __cmd, int *__restrict __fd2p);
# 491 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       const char *__restrict __name,
       const char *__restrict __pass,
       const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 505 "/usr/include/netdb.h" 3 4
extern int ruserok (const char *__rhost, int __suser,
      const char *__remuser, const char *__locuser);
# 515 "/usr/include/netdb.h" 3 4
extern int ruserok_af (const char *__rhost, int __suser,
         const char *__remuser, const char *__locuser,
         sa_family_t __af);
# 528 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       const char *__remuser, const char *__locuser);
# 539 "/usr/include/netdb.h" 3 4
extern int iruserok_af (const void *__raddr, int __suser,
   const char *__remuser, const char *__locuser,
   sa_family_t __af);
# 551 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 560 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 662 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (const char *__restrict __name,
   const char *__restrict __service,
   const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) __attribute__ ((__nothrow__ , __leaf__));


extern const char *gai_strerror (int __ecode) __attribute__ ((__nothrow__ , __leaf__));





extern int getnameinfo (const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 692 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[__restrict],
     int __ent, struct sigevent *__restrict __sig);
# 703 "/usr/include/netdb.h" 3 4
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
   const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) __attribute__ ((__nothrow__ , __leaf__));


extern int gai_cancel (struct gaicb *__gaicbp) __attribute__ ((__nothrow__ , __leaf__));



# 89 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 2




# 92 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef CmIpAddr CmInetIpAddr;




typedef struct cmInetIpAddrTbl
{
   U16 count;
   CmInetIpAddr netAddr[16];
}CmInetIpAddrTbl;

typedef CmInetIpAddrTbl CmInetIpv4AddrArr;
# 113 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetIpAddrArr
{
   U8 type;
   union
   {
      CmInetIpv4AddrArr ipv4AddrArr;



   } u;

} CmInetIpAddrArr;



typedef struct cmInetCmnSockAddr
{
   U32 type;
   U32 len;
   union
   {
      struct sockaddr_in addr;



   }u;
}CmInetCmnSockAddr;
# 148 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef S32 CmInetFdType;
# 158 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct pollfd CmInetPollFd;

typedef struct cmInetFd
{
   CmInetFdType fd;
   U8 blocking;
   U8 type;




}CmInetFd;

typedef fd_set CmInetFdSet;
# 205 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetAddr1
{
   U16 port;
   CmInetIpAddr address;
} CmInetAddr;
typedef CmInetAddr CmInetIpv4Addr;


typedef struct cmInetMemInfo
{
   Region region;
   Pool pool;
} CmInetMemInfo;

typedef struct cmInetMCastInf
{
   CmInetIpAddr mCastAddr;
   CmInetIpAddr localAddr;
}CmInetMCastInf;



typedef struct cmInetNetAddr
{
   U8 type;
   union
   {
      CmInetIpAddr ipv4NetAddr;



   }u;
} CmInetNetAddr;
# 339 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetIpv4HdrParm
{
   TknU8 proto;
   TknU8 dfBit;
   TknU8 tos;
   TknU8 ttl;




} CmInetIpv4HdrParm;
typedef struct cmInetIpHdrParm
{
   U8 type;
   union
   {
      CmInetIpv4HdrParm hdrParmIpv4;



   } u;
} CmInetIpHdrParm;
# 372 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct cmInetFdSetInfo
{
   Bool initDone;
   Bool bigEndian;
   U16 arIdx;
   U32 numArElems;
   U8 ar[256];
} CmInetFdSetInfo;
# 556 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct iovec CmInetIovec;



typedef struct sockaddr CmInetSockAddr;
# 583 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
typedef struct sockaddr_in6 CmInet6SockAddr;
typedef struct sockaddr_in CmInet4SockAddr;




typedef struct addrinfo CmInetAddrInfo;
# 599 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
extern S16 cmInetSocket (U8 type, CmInetFd *sockFd, U8 protocol);
# 613 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
extern S16 cmInetBind (CmInetFd *sockFd, CmInetAddr *myAddr);
extern S16 cmInetConnect (CmInetFd *sockFd, CmInetAddr *servAddr);
extern S16 cmInetListen (CmInetFd *sockFd, S16 backLog);
extern S16 cmInetAccept (CmInetFd *sockFd, CmInetAddr *fromAddr, CmInetFd *newSockFd)
                                                   ;
# 637 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x"
extern S16 cmInetRecvMsg (CmInetFd *sockFd, CmInetAddr *dstAddr, CmInetMemInfo *info, Buffer **mPtr, MsgLen *len, S32 flags)

                                                       ;


extern S16 cmInetSendDscpMsg (CmInetFd *sockFd, CmInetAddr *dstAddr, CmInetMemInfo *info, Buffer *mBuf, MsgLen *len, CmInetIpHdrParm *ipHdrParams, S16 flags)

                                                                        ;






extern S16 cmInetSendMsg (CmInetFd *sockFd, CmInetAddr *dstAddr, CmInetMemInfo *info, Buffer *mBuf, MsgLen *len, S16 flags)

                                          ;

extern S16 cmInetPeek (CmInetFd *sockFd, CmInetAddr *fromAddr, CmInetMemInfo *info, MsgLen dataPos, MsgLen dataLen, U8 *data)

                                                      ;

extern S16 cmInetPeekNew (CmInetFd *sockFd, CmInetAddr *fromAddr, CmInetMemInfo *info, MsgLen dataPos, MsgLen dataLen, U8 *data)

                                                      ;
extern S16 cmInetClose (CmInetFd *sockFd);
extern S16 cmInetShutdown (CmInetFd *sockFd, S32 howTo);
extern S16 cmInetSelect (CmInetFdSet *readFdS, CmInetFdSet *writeFdS, U32 *mSecTimeout, S16 *numFdS)
                                                             ;
extern S16 cmInetSetOpt (CmInetFd *sockFd, U32 level, U32 type, Ptr value)
                                        ;
extern S16 cmInetGetNumRead (CmInetFd *sockFd, U32 *dataLen);

extern S16 cmInetGetHostByName (S8 *hostName, CmInetIpAddrTbl *addrTbl);
extern S16 cmInetGetIpNodeByName (S8 *hostName, CmInetIpAddrArr *addrArr);
extern S16 cmInetAddr (S8 *asciiAddr, CmInetIpAddr *address);
extern S16 cmInetNtoa (CmInetIpAddr address, S8 **asciiAddr);
extern S16 cmInetPton (CmInetIpAddr *address, S8 *asciiAddr);







extern S16 cmInetFdSetInfoInit (CmInetFdSetInfo *fdSetInfo);
extern S16 cmInetGetFd (CmInetFdSetInfo *fdSetInfo, CmInetFdSet *fdSet, CmInetFdType *sockFd)
                                                   ;


extern S16 cmInetGetMemSize (S32 *size);
extern S16 cmInetInit (Void);
extern S16 cmInetDeInit (Void);
extern S16 cmInetGetSockName (CmInetFd *sockFd, CmInetAddr *locAddr);

extern S16 cmInetConvertStrToIpAddr (U16 len, U8 *val, CmInetNetAddr *address)
                                                                  ;
extern S16 cmInetAsciiToIpv4 (U8 numBytes, U8 *ipv4Addr, U16 len, U8 *val)
                                                     ;



extern S16 cmInetPoll (CmInetPollFd *pollFdArr,U32 idx,S16 *numFdS,U32 timeout);
extern S16 cmInetPollSetFd (CmInetFd *sockFd,CmInetPollFd *pollFdArr,S16 idx, U16 eventMask);
extern S16 cmInetPollFdIsSet (CmInetPollFd *pollFdArr, S16 idx, U16 eventMask);
extern S16 cmInetPollClearFdREvent (CmInetPollFd *pollFdArr, S16 idx, U16 eventMask);
extern S16 cmInetPollClearFdEvent (CmInetPollFd *pollFdArr,S16 idx, U16 eventMask);
extern S16 cmInetPollDelFd (CmInetPollFd *pollFdArr, S16 delIdx, S16 crntIdx);
extern S16 cmInetPollInitFdArr (CmInetPollFd *pollFdArr);
extern S16 cmInetNtop (U8 type,Void *address,S8 *asciiAddr,U32 len);





extern S32 cmInetGetAddrInfo (const S8* node, const S8* service, const CmInetAddrInfo *hints, CmInetAddrInfo **res)
                                                                                         ;
extern Void cmInetFreeAddrInfo (CmInetAddrInfo *res);
# 66 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x" 1
# 27 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_inet.x" 1
# 28 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x" 2
# 39 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef CmInetIpv4Addr CmIpv4TptAddr;
typedef CmInetIpAddr CmIpv4NetAddr;


typedef U8 CmInetIpAddr6[16];


typedef struct cmInetIpv6Addr
{
   U16 port;
   CmInetIpAddr6 ipv6NetAddr;
} CmInetIpv6Addr;



typedef CmInetIpv6Addr CmIpv6TptAddr;
typedef CmInetIpAddr6 CmIpv6NetAddr;




typedef struct cmNetAddr
{
   U8 type;
   union
   {
      CmIpv4NetAddr ipv4NetAddr;
      CmIpv6NetAddr ipv6NetAddr;
   }u;
} CmNetAddr;


typedef struct _cmNetAddrTbl
{
   U16 count;
   CmNetAddr netAddr[16];
}CmNetAddrTbl;
# 90 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmNetMCastInf
{
   CmNetAddr mCastAddr;
   CmNetAddr localAddr;
} CmNetMCastInf;







typedef struct cmTptAddr
{
   U8 type;
   union
   {
      CmIpv4TptAddr ipv4TptAddr;
      CmIpv6TptAddr ipv6TptAddr;



   }u;
} CmTptAddr;
# 136 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmSockOpts
{
   U32 level;
   U32 option;
   union
   {





      CmNetMCastInf mCastInfo;



      CmNetAddr lclAddr;
      U32 value;
# 167 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
   }optVal;
}CmSockOpts;


typedef struct cmSockParam
{
   U8 listenQSize;
   U8 numOpts;
   CmSockOpts sockOpts[8];
} CmSockParam;
# 199 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmTptParam
{
   U8 type;

   union
   {
      CmSockParam sockParam;
# 216 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
   } u;

} CmTptParam;



typedef struct cmIpv4HdrParm
{
   TknU8 proto;
   TknU8 dfBit;
   TknU8 tos;
   TknU8 ttl;




} CmIpv4HdrParm;
# 305 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmIpHdrParm
{
   U8 type;
   union
   {
      CmIpv4HdrParm hdrParmIpv4;



   }u;

} CmIpHdrParm;


typedef struct cmIpv4Hdr
{
   U8 hdrVer;
   U8 tos;
   S16 length;
   U16 id;
   S16 off;
   U8 ttl;
   U8 proto;
   U16 chkSum;
   U32 srcAddr;
   U32 destAddr;

} CmIpv4Hdr;
# 354 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmIcmpError
{
   U8 errType;
   U32 errCodeMask;

} CmIcmpError;


typedef struct cmIcmpv4Filter
{
   U8 icmpMsgFlag;
   U8 allMsg;
   U8 protocol;
   U8 num;

   CmIcmpError icmpError[5];

}CmIcmpv4Filter;
# 386 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
typedef struct cmIcmpFilter
{
  U8 type;
  union
  {
    CmIcmpv4Filter icmpv4Filter;



  }u;

} CmIcmpFilter;


typedef struct cmIcmpv4Hdr
{
   U8 icmpType;
   U8 icmpCode;
   U16 chkSum;

   union
   {
      U8 ihPptr;
      U32 rdrctAddr;
      struct idSeq
      {
         S16 icdId;
         S16 icdSeq;
      } u1;
      U32 ihVoid;
   } u2;

   union
   {
      struct idTime
      {
         U32 itOtime;
         U32 itRtime;
         U32 itTtime;
      } s;
      CmIpv4Hdr icmpIpHdr;
      U32 id_mask;
   } u3;

} CmIcmpv4Hdr;
# 452 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
extern S16 cmPkCmIpv4TptAddr (CmIpv4TptAddr *pkParam, Buffer *mBuf);
extern S16 cmPkCmNetAddrTbl (CmNetAddrTbl *pkParam, Buffer *mBuf);
extern S16 cmPkCmNetAddr (CmNetAddr *pkParam, Buffer *mBuf);
extern S16 cmPkCmTptAddr (CmTptAddr *pkParam, Buffer *mBuf);



extern S16 cmPkCmTptParam (CmTptParam *pkParam, Buffer *mBuf);
extern S16 cmUnpkCmNetAddrTbl (CmNetAddrTbl *unpkParam, Buffer *mBuf);
extern S16 cmUnpkCmIpv4TptAddr (CmIpv4TptAddr *unpkParam, Buffer *mBuf);
extern S16 cmUnpkCmNetAddr (CmNetAddr *unpkParam, Buffer *mBuf);
extern S16 cmUnpkCmTptAddr (CmTptAddr *unpkParam, Buffer *mBuf);




extern S16 cmUnpkCmTptParam (CmTptParam *unpkParam, Buffer *mBuf);


extern S16 cmPkCmIpHdrParm (CmIpHdrParm *pkParam, Buffer *mBuf);







extern S16 cmUnpkCmIpHdrParm (CmIpHdrParm *unpkParam, Buffer *mBuf);
# 488 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tpt.x"
extern S16 cmPkCmIcmpFilter (CmIcmpFilter *pkParam, Buffer *mBuf);
extern S16 cmUnpkCmIcmpFilter (CmIcmpFilter *unpkParam, Buffer *mBuf);
# 67 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x" 1
# 39 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
typedef struct cmDnsResponse CmDnsResponse;



typedef S16 (*USRTXFUNC) ( Ptr usrTxFuncParam, CmTptAddr *dnsAddr, Buffer *mBuf )



        ;


typedef S16 (*USRRXFUNC) ( Ptr usrEntry, CmDnsResponse *dnsRsp )


        ;


typedef struct cmDnsDbgInfo
{
   U32 dbgMask;
   Txt *prntBuf;
   U8 *layerName;
}CmDnsDbgInfo;


typedef struct cmDnsQueryInfo
{
   U8 qNameLen;
   U8 qName[256];
   U16 qType;
   U16 qclass;
   U8 service;
   U8 protocol;
}CmDnsQueryInfo;


typedef struct cmDnsReqIdLst
{
   U16 indx;
   Ptr usrPtr;
}CmDnsReqIdLst;


typedef struct cmDnsCb
{
   State state;

   CmTptAddr dnsTptAddr;







   USRTXFUNC txFunc;
   USRRXFUNC rxFunc;
   Mem sMem;
   EntityId tapaEnt;
   U16 entId;
   CmDnsDbgInfo dbgInfo;
   U16 requestIdLstSz;
   U16 nxtRequestId;
   U16 lastRequestId;
   Bool supportMt;
   pthread_mutex_t dnsReqLck;
   CmDnsReqIdLst **dnsReqLst;
}CmDnsCb;


typedef struct cmDnsCtrlMsgHdr
{
   U16 requestId;
   U8 msgType;
   U8 opCode;
   U8 isAuth;
   U8 isTrunc;
   U8 qryRecursive;
   U8 recurAvl;
   U8 responseCode;
   U16 qdCount;
   U16 anCount;
   U16 nsCount;
   U16 arCount;
}CmDnsCtrlMsgHdr;
# 150 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
typedef struct cmDns2782RR
{
   U8 service;
   U8 protocol;
   U8 nameLen;
   U8 name[256];
   U32 ttl;
   U16 qclass;
   U16 priority;
   U16 weight;
   U16 port;
   U8 targetLen;
   U8 target[256];

}CmDns2782RR;
# 175 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
typedef struct cmDns1035RR
{
   U8 nameLen;
   U8 name[256];
   U16 type;
   U16 qclass;
   U32 ttl;
   union
   {
     U32 ipAddress;
# 194 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
   }rdata;
}CmDns1035RR;

typedef union cmDnsRecord
{
   CmDns1035RR rsrcRcrd;
   CmDns2782RR srvRcrd;



}CmDnsRecord;


struct cmDnsResponse
{
   CmDnsCtrlMsgHdr header;
   CmDnsQueryInfo queryInfo;
   CmDnsRecord ans[10];
   CmDns1035RR auth[1];
   CmDns1035RR add[1];





};


typedef struct cmDnsSuppSrvcs
{
   S8 *service;
   U16 srvcLen;
}CmDnsSuppSrvcs;

extern CmDnsSuppSrvcs srvcs[9];

typedef struct cmDnsSuppProtos
{
   S8 *protocol;
   U16 protoLen;
}CmDnsSuppProtos;

extern CmDnsSuppProtos protos[6];







extern S16 cmDnsInitDnsCb ( CmDnsCb *dnsCb, CmDnsDbgInfo *dbgInfo, CmTptAddr *dnsTptAddr, USRTXFUNC txFunc, USRRXFUNC rxFunc, Mem *sMem, U16 entId, EntityId *tapaEnt, U16 reqIdLstSz )
# 254 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
       ;
# 272 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
extern Void cmDnsDeInitDnsCb ( CmDnsCb *dnsCb )

       ;


extern S16 cmDnsGenRslvReq ( CmDnsCb *dnsCb, Ptr dnsSocket, CmDnsQueryInfo *queryInfo, Ptr usrPtr, U16 *requestId, Mem *dMem )






      ;
# 297 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
extern S16 cmDnsPrcDnsRsp ( CmDnsCb *dnsCb, CmTptAddr *srcTptAddr, Buffer *mBuf )



      ;


extern S16 cmDnsDecodeHdr ( CmDnsResponse *dnsRsp, U8 *msg, U16 *indx )



      ;

extern S16 cmDnsDecodeQuery ( CmDnsCb *dnsCb, CmDnsResponse *dnsRsp, U8 *msg, U16 *indx )




      ;


extern S16 cmDnsDecodeRR ( CmDnsCb *dnsCb, CmDnsResponse *dnsRsp, U8 *msg, U16 *indx, U8 rrType, U16 *noOfRR, U16 maxRR )







      ;

extern S16 cmDnsDecode1035RR ( CmDns1035RR *rsrcRcrd, U8 *msg, U16 *indx, Bool *canonical )





      ;

extern S16 cmDnsDecode2782RR ( CmDnsCb *dnsCb, CmDns2782RR *srvRcrd, U8 *msg, U16 *indx, U16 rrIndex )





      ;
# 354 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_dns.x"
extern S16 cmDnsDecodeDmnName ( U8 *domain, U8 *msg, U16 *indx, U8 *nameLen )




      ;


extern S16 cmDnsDecode2782Name ( CmDnsCb *dnsCb, U8 *msg, U16 *indx, U8 *service, U8 *protocol )





      ;


extern S16 cmDnsCmpTptAddr ( CmTptAddr *addr1, CmTptAddr *addr2 )


      ;



extern Void cmDnsAbortRslvReq ( CmDnsCb *dnsCb, U16 requestId )


      ;


extern Ptr cmDnsGetUsrEntryFrmRsp ( CmDnsCb *dnsCb, CmDnsResponse *dnsRsp )


      ;
# 68 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 1
# 28 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envopt.h" 1
# 29 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envdep.h" 1
# 30 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/envind.h" 1
# 31 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2

# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.h" 1
# 33 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.h" 1
# 34 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tkns.h" 1
# 35 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_mblk.h" 1
# 36 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2




# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/gen.x" 1
# 41 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/ssi.x" 1
# 42 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tkns.x" 1
# 50 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_tkns.x"
typedef TknU8 TknPres;


typedef TknU8 TknBool;

typedef struct tknS16
{
   U8 pres;
   U8 spare1;
   S16 val;



} TknS16;


typedef struct tknStr8
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[8];
} TknStr8;


typedef struct tknStr16
{
   U8 pres;
   U8 len;
   U16 spare1;



   U8 val[16];
} TknStr16;

typedef struct tknStrOSXL
{
   U8 pres;
   U8 spare1;
   U16 len;



   U8 *val;
} TknStrOSXL;


typedef TknStr4 TknBStr32;


typedef TknStrOSXL TknStrBSXL;







typedef struct tknStrBMP4
{
   U8 pres;
   U8 len;
   U16 spare1;



   U16 val[4];
} TknStrBMP4;


typedef struct tknStrBMPXL
{
   U8 pres;
   U8 spare1;
   U16 len;



   U16 *val;
} TknStrBMPXL;







typedef struct tknStrUNI4
{
   U8 pres;
   U8 len;
   U16 spare1;



   U32 val[4];
} TknStrUNI4;

typedef struct tknStrUNIXL
{
   U8 pres;
   U8 spare1;
   U16 len;



   U32 *val;
} TknStrUNIXL;


extern S16 cmPkTknPres (TknPres *tknPres, Buffer *mBuf);
extern S16 cmPkTknS16 (TknS16 *tknS16, Buffer *mBuf);
extern S16 cmPkTknBStr32 (TknBStr32 *tknbStr32, Buffer *mBuf);
extern S16 cmPkTknStr8 (TknStr8 *tknStr8, Buffer *mBuf);
extern S16 cmPkTknStr16 (TknStr16 *tknStr16, Buffer *mBuf);
extern S16 cmPkTknStrOSXL (TknStrOSXL *tknStrOSXL, Buffer *mBuf);
extern S16 cmPkTknStrBSXL (TknStrBSXL *tknStrBSXL, Buffer *mBuf);
extern S16 cmPkTknStrBMP4 (TknStrBMP4 *tknStrBMP4, Buffer *mBuf);
extern S16 cmPkTknStrBMPXL (TknStrBMPXL *tknStrBMPXL, Buffer *mBuf);
extern S16 cmPkTknStrUNI4 (TknStrUNI4 *tknStrUNI4, Buffer *mBuf);
extern S16 cmPkTknStrUNIXL (TknStrUNIXL *tknStrUNIXL, Buffer *mBuf);




extern S16 cmUnpkTknPres (TknPres *tknPres, Buffer *mBuf);
extern S16 cmUnpkTknS16 (TknS16 *tknS16, Buffer *mBuf);
extern S16 cmUnpkTknBStr32 (TknBStr32 *tknBStr32, Buffer *mBuf);
extern S16 cmUnpkTknStr8 (TknStr8 *tknStr8, Buffer *mBuf);
extern S16 cmUnpkTknStr16 (TknStr16 *tknStr16, Buffer *mBuf);
extern S16 cmUnpkTknStrOSXL (TknStrOSXL *tknStrOSXL, Buffer *mBuf, Ptr ptr)
                                                ;
extern S16 cmUnpkTknStrBSXL (TknStrBSXL *tknStrBSXL, Ptr ptr, Buffer *mBuf)
                                                     ;
extern S16 cmUnpkTknStrBMP4 (TknStrBMP4 *tknStrBMP4, Buffer *mBuf);
extern S16 cmUnpkTknStrBMPXL (TknStrBMPXL *tknStrBMPXL, Buffer *mBuf, Ptr ptr)
                                                ;
extern S16 cmUnpkTknStrUNI4 (TknStrUNI4 *tknStrUNI4, Buffer *mBuf);
extern S16 cmUnpkTknStrUNIXL (TknStrUNIXL *tknStrUNIXL, Buffer *mBuf, Ptr ptr)
                                                ;
# 43 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_mblk.x" 1
# 30 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_mblk.x"
typedef struct cmMemCb
{
   Size maxSize;
   Mem sMem;
   U32 memAllocated;
   U32 initPtr;
   U32 runPtr;
} CmMemCb;




typedef struct cmMemList CmMemList;

struct cmMemList
{
   CmMemList *next;
   CmMemList *prev;

   Size size;
};





typedef struct cmMemListCp
{
   CmMemList *first;
   CmMemList *last;
   U32 count;
   CmMemCb memCb;
}CmMemListCp;




typedef struct cmMemStatus
{
   Mem sMem;
   U32 memBlkCnt;
   Size maxBlkSize;
   Size memAllocated;
} CmMemStatus;
# 93 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_mblk.x"
extern S16 cmAllocEvnt ( Size evntSize, Size maxBlkSize, Mem *sMem, Ptr *ptr)



                                              ;

extern Void cmInitMemCp ( CmMemListCp *memCp, Size maxBlkSize, Mem *sMem )


                                                 ;







extern S16 cmGetMem ( Ptr memPtr, Size size, Ptr *allocPtr)


                                               ;

extern Void cmFreeMem ( Ptr memPtr)
                                            ;

extern Void cmGetMemStatus ( Ptr memPtr, CmMemStatus *status)

                                                       ;
# 44 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/cm_lib.x" 1
# 45 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 2
# 70 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.h" 1
# 71 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_edm.h" 1
# 72 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.h" 1
# 423 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.h"
enum EG_DBG_PTR_TYPE
{
  EG_DBG_NONE,
  EG_DBG_UI,
  EG_DBG_CPM,
  EG_DBG_TUNN,
  EG_DBG_TSAP,
  EG_DBG_SSAP,
  EG_DBG_ENT,
  EG_DBG_CMTPTADDR,
  EG_DBG_CMNETADDR,
  EG_DBG_CMTNETDDRLST,
  EG_DBG_TPTSERV,
  EG_DBG_MNGMT,
  EG_DBG_BUF,
  EG_DBG_EVNT,
  EG_DBG_LI,
  EG_DBG_TPT
};
# 73 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x" 1
# 34 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.h" 1
# 35 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x" 2
# 49 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _legStr
{
    U16 length;
    Data buff[255];
}LegStr;





typedef enum _legEntity
{
   LEG_GTP_ENT_UNKNWN,
   LEG_GTP_ENT_MME,
   LEG_GTP_ENT_SGW,
   LEG_GTP_ENT_PGW,
   LEG_GTP_ENT_SGSN
# 80 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
}LegEntity;





typedef struct _legIeEntry
{
   U8 ieType;
   U8 dataType;
   U16 minLen;
   U16 maxLen;
}LegIeEntry;

typedef struct _legIeProperties LegIeProperties;
typedef struct _legGroupedIe LegGroupedIe;





struct _legGroupedIe
{
   U8 nmbGrpIe;
   U8 posIndex[10][256];
   LegIeProperties *ieProperties;
};





struct _legIeProperties
{
   U8 ieType;
   U8 ieClass;
   Bool ieList;
   U8 ieInst;
   LegGroupedIe *groupedIe;
};




typedef S16 (*EscFun) (Void *,U8 );
typedef struct _legMsgEntry
{
   U8 msgType;
   U8 posIndex[10][256];
   U8 nmbIeProp;
   LegIeProperties ieProperties[40];
   EscFun validateIe;
}LegMsgEntry;





typedef struct _egIeDictCfg
{
  LegIeEntry ieEntry[81];
  U16 posIdx[256];
  U8 nmbIe;

}EgIeDictCfg;





typedef struct _egGmDictCfg
{
  U8 intfType;
  U8 nmbMsg;
  LegMsgEntry *gmEntry;
}EgGmDictCfg;
# 179 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egGenCfg
{
# 206 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
   TmrCfg eguT3Timer;
   U8 nmbRetries;
   TmrCfg echoTmr;
   TmrCfg reOrderTmr;
   U16 pvtExtId;

   U32 pduWindSize;
   U8 maxNumOfIp;
   U8 nodeArch;
 Bool lclEchoSup;







   S16 timerRes;
   U16 nmbUSaps;
   U16 maxNmbTSaps;
   U16 nmbSrvs;
   Status resThreshUpper;
   Status resThreshLower;
   Pst lmPst;





}EgGenCfg;







typedef struct _egUSapCfg
{
   SpId sapId;




   Selector selector;
   MemoryId mem;
   Priority priority;
   Route route;
   Ent dstEnt;
   Inst dstInst;
   ProcId dstProcId;
   U8 flag;






}EgUSapCfg;







typedef struct _egTSapCfg
{
   SuId tSapId;
   SpId spId;
   U16 tptType;
   Selector selector;
   MemoryId mem;
   Priority priority;
   Route route;
   Ent dstEnt;
   Inst dstInst;
   ProcId dstProcId;
   TmrCfg tInitTmr;
   CmTptParam tptParam;






}EgTSapCfg;



typedef struct _egTSapReCfg
{
   CmTptParam tPar;

   U8 maxBndRetry;
   TmrCfg bndTmCfg;
} EgTSapReCfg;
# 313 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egIpInfo
{
   CmTptAddr srcIpAddr;
   SpId spId;
   U8 nodeType;
   Bool cfmStatus;
   U16 reason;
   LegStr echoReqPvtExtVal;

   LegStr echoRspPvtExtVal;

   LegStr errIndPvtExtVal;

}EgIpInfo;
# 336 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egIpAddrCfg
{
   U8 nmbIpAddr;
   EgIpInfo *ipInfo;
}EgIpAddrCfg;
# 351 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egTptSrvCfg
{
   SpId uSapId;
   U32 tptSrvId;
   SuId tSapId;
   CmTptAddr tptAddr;
   CmTptParam tptParam;
   S16 opnSrvRetryCnt;

   TmrCfg opnSrvTmr;





   TknStrOSXL hostName;
   U8 gtp_C_Or_U;

}EgTptSrvCfg;
# 380 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egCfg
{
  union
   {
      EgGenCfg gen;
      EgUSapCfg uSap;
      EgTSapCfg tSap;

      EgIpAddrCfg ipAddr;

      EgTptSrvCfg tptSrv;




   } s;

   union
   {
      EgTSapReCfg tSapReCfg;
   }r;

}EgCfg;







typedef struct _egDbgCntrl
{
   U32 genDbgMask;
}EgDbgCntrl;







typedef struct _egTrcCntrl
{
   union
   {
      SpId tSapId;
   }t;
   S16 trcLen;
   U32 trcMask;
}EgTrcCntrl;







typedef struct egIpAddrCntrl
{
   CmTptAddr ipAddr;
   SpId fromSpId;
   SpId toSpId;
}EgIpAddrCntrl;
# 451 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct egServerCntrl
{
   U8 type;




   union
   {
     U32 tptSrvId;
     CmTptAddr tptAddr;
   }t;
}EgServerCntrl;






typedef struct egSapCntrl
{
   SpId sapId;
}EgSapCntrl;







typedef struct _egCntrl
{
   DateTime dt;
   U8 action;
   U8 subAction;
   Bool flag;

   union
   {
      EgServerCntrl server;
      EgSapCntrl sap;
      EgTrcCntrl trcCntrl;

      EgDbgCntrl dbgCntrl;


      EgIpAddrCntrl ipAddress;


      U32 logMask;
 }s;
}EgCntrl;







typedef struct _egGenSta
{
   U32 memSize;
   U32 memAlloc;
   Bool resCong;
}EgGenSta;







typedef struct _egTSapSta
{
   SpId tSapId;
   S16 state;
# 537 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
}EgTSapSta;






typedef struct _egUSapSta
{
   SpId uSapId;
   S16 state;
}EgUSapSta;



typedef struct _egTptSrvSta
{
   SpId tSapId;
   U32 tptSrvId;
   Bool status;
   U8 state;
}EgTptSrvSta;



typedef struct _egTnlSta
{
   U32 teId;
   SpId spId;
   CmTptAddr srcIpAddr;

   CmTptAddr destIpAddr;

   Bool reOrderPrsnt;
}EgTnlSta;
# 580 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egSta
{
   DateTime dt;
   union
   {
      SystemId sysId;
      EgGenSta genSta;
      EgUSapSta uSapSta;
      EgTSapSta tSapSta;

      EgTptSrvSta tSrvrSta;
      EgTnlSta tnlSta;

   } s;
}EgSta;







typedef struct _egErrSts
{
   Cntr invVerRx;
   Cntr invProtTypeRx;
   Cntr invMsgRx;
   Cntr invMsgLenRx;
   Cntr invIeOrderRx;
   Cntr invIeLenRx;
   Cntr invIeFormatRx;
   Cntr invManIeLenRx;
   Cntr missMandIeRx;
   Cntr unSuppExtHdrRx;
   Cntr wrngExtHdrRx;
   Cntr msgUnableCompRx;
   Cntr msgUnableCompTx;
   Cntr missMandIeTx;
   Cntr memAllocFldTx;
   Cntr invMsgTx;
   Cntr invTeidTx;
   Cntr invTeidRx;
   Cntr errSeqNoTx;
   Cntr errSeqNoRx;
   Cntr tpduExcdTx;
   Cntr invDatTypeTx;
}EgErrSts;

typedef struct _egGenSts
{
   Cntr numTxMsg;
   Cntr numRxMsg;
   Cntr numActvTnls;


   Cntr numNrmlDataTunn;

   Cntr numFwdDataTunn;


   Cntr numErrInd;

   Cntr cntInvldTeidInd;
   Cntr rxDesgMsg;

   EgErrSts errSts;
}EgGenSts;







typedef struct MsgSts
{
   Cntr Tx;
   Cntr Rx;
}EgMsgSts;







typedef struct _egSapSts
{
   SpId sapId;
   Cntr totalMsgsTx;
   Cntr totalMsgsRx;
   EgMsgSts msgType[256];

}EgSapSts;
# 711 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egTnlSts
{
   U32 teId;
   SpId spId;
   CmTptAddr srcIpAddr;

   CmTptAddr destIpAddr;

   Cntr totalMsgsTx;
   Cntr totalMsgsRx;
   Bool reOrderPrsnt;
}EgTnlSts;
# 731 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egTptSrvrSts
{
   SpId spId;
   CmTptAddr lclAddr;
   Cntr totalMsgsTx;
   Cntr totalMsgsRx;
}EgTptSrvrSts;







typedef struct _egIpSts
{
   CmTptAddr IpAddr;
   SpId spId;
   U32 nmbPorts;
   U32 *portsLst;
   U32 nmbActvSrvrs;
   U32 nmbInactvSrvr;
   Cntr totalMsgsTx;
   Cntr totalMsgsRx;
}EgIpSts;







typedef struct _egSts
{
   DateTime dt;
   union
   {
     EgGenSts gen;
     EgSapSts usap;
     EgSapSts tsap;

     EgIpSts ipSts;
     EgTptSrvrSts tptSrvrSts;
     EgTnlSts tnlSts;




   }s;
}EgSts;
# 789 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef struct _egUstaDgnVal
{
   U8 type;
   union
   {
      Event event;
      SpId sapId;
      U32 connId;
      U8 choice;
      U8 ieType;
      CmTptAddr ipAddr;
      MemoryId mem;
   } t;
}EgUstaDgnVal;



typedef struct _egUstaDgn
{
   EgUstaDgnVal dgnVal[4];
}EgUstaDgn;



typedef struct _egUsta
{
   CmAlarm alarm;
   DateTime dt;
   EgUstaDgn dgn;
}EgUsta;







typedef struct _egTrc
{
   DateTime dt;
   U16 evnt;
   S16 length;
   CmTptAddr *srcAddr;
   CmTptAddr *remAddr;
}EgTrc;






typedef struct _egMngmt
{
   Header hdr;
   CmStatus cfm;
   union
   {
      EgCfg cfg;
      EgCntrl cntrl;
      EgSts sts;
      EgSta ssta;
      EgUsta usta;
      EgTrc trc;
   }u;
}EgMngmt;
# 862 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
typedef S16 (*LegCfgReq) ( Pst *pst, EgMngmt *cfgReq )

                                ;

typedef S16 (*LegCfgCfm) ( Pst *pst, EgMngmt *cfgCfm )


                               ;

typedef S16 (*LegStsReq) ( Pst *pst, Action action, EgMngmt *stsReq )



                               ;

typedef S16 (*LegStsCfm) ( Pst *pst, EgMngmt *stsCfm )


                               ;

typedef S16 (*LegStaReq) ( Pst *pst, EgMngmt *staReq )


                               ;

typedef S16 (*LegStaCfm) ( Pst *pst, EgMngmt *staCfm )


                               ;

typedef S16 (*LegStaInd) ( Pst *pst, EgMngmt *staInd )


                               ;

typedef S16 (*LegCntrlReq) ( Pst *pst, EgMngmt *cntrlReq )


                               ;

typedef S16 (*LegCntrlCfm) ( Pst *pst, EgMngmt *cntrlCfm )


                               ;

typedef S16 (*LegTrcInd) ( Pst *pst, EgMngmt *trcInd, Buffer *mBuf )



                               ;
# 937 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegCfgReq ( Pst *pst, EgMngmt *cfgReq )


                               ;
# 960 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegCfgCfm ( Pst *pst, EgMngmt *cfgCfm )


                               ;
# 990 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegStsReq ( Pst *pst, Action action, EgMngmt *stsReq )



                               ;
# 1017 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegStsCfm ( Pst *pst, EgMngmt *stsCfm )


                               ;
# 1046 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegStaReq ( Pst *pst, EgMngmt *staReq )


                               ;
# 1070 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegStaCfm ( Pst *pst, EgMngmt *staCfm )


                               ;
# 1098 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegStaInd ( Pst *pst, EgMngmt *staInd )


                               ;
# 1129 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegCntrlReq ( Pst *pst, EgMngmt *cntrlReq )


                               ;
# 1152 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegCntrlCfm ( Pst *pst, EgMngmt *cntrlCfm )


                               ;
# 1181 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
 S16 EgMiLegTrcInd ( Pst *pst, EgMngmt *trcInd, Buffer *mBuf )



                               ;




 S16 SmMiLegCfgReq ( Pst *pst, EgMngmt *cfgReq )


                               ;

 S16 SmMiLegCfgCfm ( Pst *pst, EgMngmt *cfgCfm )


                               ;

 S16 SmMiLegStsReq ( Pst *pst, Action action, EgMngmt *stsReq )



                               ;

 S16 SmMiLegStsCfm ( Pst *pst, EgMngmt *stsCfm )


                               ;

 S16 SmMiLegStaReq ( Pst *pst, EgMngmt *staReq )


                               ;

 S16 SmMiLegStaCfm ( Pst *pst, EgMngmt *staCfm )


                               ;

 S16 SmMiLegStaInd ( Pst *pst, EgMngmt *staInd )


                               ;

 S16 SmMiLegCntrlReq ( Pst *pst, EgMngmt *cntrlReq )


                               ;

 S16 SmMiLegCntrlCfm ( Pst *pst, EgMngmt *cntrlCfm )


                               ;

 S16 SmMiLegTrcInd ( Pst *pst, EgMngmt *trcInd, Buffer *mBuf )



                               ;




extern S16 cmPkLegCfgReq (Pst* pst, EgMngmt * cfgReq);
extern S16 cmPkLegCntrlReq (Pst* pst, EgMngmt * cntrlReq);
extern S16 cmPkLegStaReq (Pst* pst, EgMngmt * staReq);
extern S16 cmPkLegStsReq (Pst* pst, Action action, EgMngmt * stsReq);


extern S16 cmUnpkLegCfgReq (LegCfgReq func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkLegCntrlReq (LegCntrlReq func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkLegStaReq (LegStaReq func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkLegStsReq (LegStsReq func, Pst *pst, Buffer *mBuf);

extern S16 cmPkLegCfgCfm (Pst* pst, EgMngmt * cfgCfm);
extern S16 cmPkLegCntrlCfm (Pst* pst, EgMngmt * cntrlCfm);
extern S16 cmPkLegStsCfm (Pst* pst, EgMngmt * stsCfm);
extern S16 cmPkLegStaCfm (Pst* pst, EgMngmt * staCfm);

extern S16 cmUnpkLegCfgCfm (LegCfgCfm func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkLegCntrlCfm (LegCntrlCfm func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkLegStsCfm (LegStsCfm func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkLegStaCfm (LegStaCfm func, Pst *pst, Buffer *mBuf);

extern S16 cmPkLegStaInd (Pst* pst, EgMngmt * staInd);
extern S16 cmPkLegTrcInd (Pst* pst, EgMngmt * trcInd, Buffer * uBuf);

extern S16 cmUnpkLegStaInd (LegStaInd func, Pst *pst, Buffer *mBuf);
extern S16 cmUnpkLegTrcInd (LegTrcInd func, Pst *pst, Buffer *mBuf);

extern S16 cmPkEgGenCfg (EgGenCfg *genCfg, Buffer *mBuf, Pst *pst);
extern S16 cmPkEgUSapCfg (EgUSapCfg *usapCfg, Buffer *mBuf);
extern S16 cmPkEgTSapReCfg (EgTSapReCfg *tsapReCfg, Buffer *mBuf);
extern S16 cmPkEgTSapCfg (EgTSapCfg *tsapCfg, Buffer *mBuf);
extern S16 cmPkEgTptSrvCfg (EgTptSrvCfg *tsrvCfg, Buffer *mBuf);
extern S16 cmPkEgGmDictCfg (EgGmDictCfg *msgCfg, Buffer *mBuf);
extern S16 cmPkEgIeDictCfg (EgIeDictCfg *ieCfg, Buffer *mBuf);


extern S16 cmPkEgIpAddrCfg (EgIpAddrCfg *ipAddrCfg, Buffer *mBuf, Pst *pst);
extern S16 cmUnpkEgIpAddrCfg (EgIpAddrCfg *ipAddrCfg, Buffer *mBuf, Pst *pst);




extern S16 cmPkLegMsgEntry (LegMsgEntry *msg, Buffer *mBuf);
extern S16 cmPkLegIeProperties (LegIeProperties *ieProp, Buffer *mBuf);
extern S16 cmPkLegGroupedIe (LegGroupedIe *grpIe, Buffer *mBuf);
extern S16 cmPkLegIeEntry (LegIeEntry *ieEnt, Buffer *mBuf);

extern S16 cmUnpkEgGenCfg (EgGenCfg *genCfg, Buffer *mBuf, Pst *pst);
extern S16 cmUnpkEgUSapCfg (EgUSapCfg *usapCfg, Buffer *mBuf);
extern S16 cmUnpkEgTSapReCfg (EgTSapReCfg *tsapReCfg, Buffer *mBuf);
extern S16 cmUnpkEgTSapCfg (EgTSapCfg *tsapCfg, Buffer *mBuf);
extern S16 cmUnpkEgTptSrvCfg (EgTptSrvCfg *tsrvCfg, Buffer *mBuf);
extern S16 cmUnpkEgGmDictCfg (EgGmDictCfg *msgCfg, Buffer *mBuf);
extern S16 cmUnpkEgIeDictCfg (EgIeDictCfg *ieCfg, Buffer *mBuf);

extern S16 cmUnpkLegMsgEntry (LegMsgEntry *msg, Buffer *mBuf);
extern S16 cmUnpkLegIeProperties (LegIeProperties *ieProp, Buffer *mBuf);
extern S16 cmUnpkLegGroupedIe (LegGroupedIe *grpIe, Buffer *mBuf);
extern S16 cmUnpkLegIeEntry (LegIeEntry *ieEnt, Buffer *mBuf);

extern S16 cmPkEgTrcCntrl (EgTrcCntrl *trcCntrl, Buffer *mBuf);
extern S16 cmPkEgDbgCntrl (EgDbgCntrl *dbgCntrl, Buffer *mBuf);
extern S16 cmPkEgSapCntrl (EgSapCntrl *sapCntrl, Buffer *mBuf);
extern S16 cmPkEgServerCntrl (EgServerCntrl *srvCntrl, Buffer *mBuf);

extern S16 cmUnpkEgTrcCntrl (EgTrcCntrl *trcCntrl, Buffer *mBuf);
extern S16 cmUnpkEgDbgCntrl (EgDbgCntrl *dbgCntrl, Buffer *mBuf);
extern S16 cmUnpkEgSapCntrl (EgSapCntrl *sapCntrl, Buffer *mBuf);
extern S16 cmUnpkEgServerCntrl (EgServerCntrl *srvCntrl, Buffer *mBuf);

extern S16 cmPkEgGenSta (EgGenSta *genSta, Buffer *mBuf);
extern S16 cmPkEgUSapSta (EgUSapSta *usapSta, Buffer *mBuf);
extern S16 cmPkEgTSapSta (EgTSapSta *tsapSta, Buffer *mBuf);

extern S16 cmUnpkEgGenSta (EgGenSta *genSta, Buffer *mBuf);
extern S16 cmUnpkEgUSapSta (EgUSapSta *usapSta, Buffer *mBuf);
extern S16 cmUnpkEgTSapSta (EgTSapSta *tsapSta, Buffer *mBuf);

extern S16 cmPkEgGenSts (EgGenSts *genSts, Buffer *mBuf);
extern S16 cmPkEgMsgSts (EgMsgSts *msgSts, Buffer *mBuf);
extern S16 cmPkEgSapSts (EgSapSts *sapSts, Buffer *mBuf);

extern S16 cmUnpkEgGenSts (EgGenSts *genSts, Buffer *mBuf);
extern S16 cmUnpkEgMsgSts (EgMsgSts *msgSts, Buffer *mBuf);
extern S16 cmUnpkEgSapSts (EgSapSts *sapSts, Buffer *mBuf);

extern S16 cmPkEgUstaDgnVal (EgUstaDgnVal *dgnVal, Buffer *mBuf);
extern S16 cmPkEgUstaDgn (EgUstaDgn *dgn, Buffer *mBuf);

extern S16 cmUnpkEgUstaDgnVal (EgUstaDgnVal *dgnVal, Buffer *mBuf);
extern S16 cmUnpkEgUstaDgn (EgUstaDgn *dgn, Buffer *mBuf);


extern S16 cmPkLegStr (LegStr *legStr, Buffer *mBuf);
extern S16 cmUnpkLegStr (LegStr *legStr, Buffer *mBuf);
extern S16 cmPkEgIpAddrCntrl (EgIpAddrCntrl *ipCntrl, Buffer *mBuf);
extern S16 cmUnpkEgIpAddrCntrl (EgIpAddrCntrl *ipCntrl, Buffer *mBuf);
extern S16 cmPkEgIpAddrStsCfm (EgIpSts *ipSts, Buffer *mBuf, Pst *pst);
extern S16 cmPkEgSrvrStsCfm (EgTptSrvrSts *tSrvrSts, Buffer *mBuf);
extern S16 cmUnpkEgTnlStsCfm (EgTnlSts *tnlSts, Buffer *mBuf);
extern S16 cmUnpkEgSrvrStsCfm (EgTptSrvrSts *tSrvrSts, Buffer *mBuf);
extern S16 cmUnpkEgIpAddrStsCfm (EgIpSts *ipSts, Buffer *mBuf, Pst *pst);
extern S16 cmPkEgTnlStsCfm (EgTnlSts *tnlSts, Buffer *mBuf);
extern S16 cmPkEgIpAddrStsReq (EgIpSts *ipSts, Buffer *mBuf);
extern S16 cmPkEgSrvrStsReq (EgTptSrvrSts *tSrvrSts, Buffer *mBuf);
extern S16 cmPkEgTnlStsReq (EgTnlSts *tnlSts, Buffer *mBuf);
extern S16 cmUnpkEgIpAddrStsReq (EgIpSts *ipSts, Buffer *mBuf);
extern S16 cmUnpkEgSrvrStsReq (EgTptSrvrSts *tSrvrSts, Buffer *mBuf);
extern S16 cmUnpkEgTnlStsReq (EgTnlSts *tnlSts, Buffer *mBuf);
extern S16 cmPkEgSrvrStaReq (EgTptSrvSta *tserverSta, Buffer *mBuf);
extern S16 cmUnpkEgSrvrStaReq (EgTptSrvSta *tserverSta, Buffer *mBuf);
extern S16 cmPkEgTnlStaReq (EgTnlSta *tnlSta, Buffer *mBuf);
extern S16 cmUnpkEgTnlStaReq (EgTnlSta *tnlSta, Buffer *mBuf);
extern S16 cmUnpkEgTnlStaReq (EgTnlSta *tnlSta, Buffer *mBuf);
extern S16 cmUnpkEgSrvrStaCfm (EgTptSrvSta *tserverSta, Buffer *mBuf);
extern S16 cmPkEgTnlStaCfm (EgTnlSta *tnlSta, Buffer *mBuf);
extern S16 cmUnpkEgTnlStaCfm (EgTnlSta *tnlSta, Buffer *mBuf);
 S16 cmPkEgSrvrStaCfm (EgTptSrvSta *tserverSta, Buffer *mBuf);
# 1372 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
extern S16 smEgActvTsk (Pst *pst, Buffer *mBuf);




extern S16 smEgActvInit (Ent ent, Inst inst, Region region, Reason reason)
                                                                    ;
# 1387 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/leg.x"
extern S16 egActvInit (Ent ent, Inst inst, Region region, Reason reason);

extern S16 egActvTsk (Pst *pst, Buffer *mBuf);
# 74 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x" 1
# 34 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.h" 1
# 35 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x" 2
# 56 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef enum egtMsgType
{
   EGT_GTP_MSG_INVALID = 0,
# 137 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
   EGT_GTPU_MSG_ECHO_REQ = 1,
   EGT_GTPU_MSG_ECHO_RSP = 2,
   EGT_GTPU_MSG_ERROR_IND = 26,
   EGT_GTPU_MSG_SUPP_EXT_HDR_NTF = 31,
   EGT_GTPU_MSG_END_MARKER = 254,
   EGT_GTPU_MSG_GPDU,

   EGT_GTP_MSG_MAX
}EgtMsgType;
# 182 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef enum _egtIntfEnt
{
   EGT_INT_S1_U_ENB_GTP_U = 0,
   EGT_INT_S1_U_SGW_GTP_U,
   EGT_INT_S12_RNC_GTP_U,
   EGT_INT_S12_SGW_GTP_U,
   EGT_INT_S5_S8_SGW_GTP_U,
   EGT_INT_S5_S8_PGW_GTP_U = 5,
   EGT_INT_S5_S8_SGW_GTP_C,
   EGT_INT_S5_S8_PGW_GTP_C,
   EGT_INT_S5_S8_SGW_PMIPv6,
   EGT_INT_S5_S8_PGW_PMIPv6,
   EGT_INT_S11_MME_GTP_C = 10,
   EGT_INT_S11_S4_SGW_GTP_C,
   EGT_INT_S10_MME_GTP_C,
   EGT_INT_S3_MME_GTP_C,
   EGT_INT_S3_SGSN_GTP_C,
   EGT_INT_S4_SGSN_GTP_U = 15,
   EGT_INT_S4_SGW_GTP_U,
   EGT_INT_S4_SGSN_GTP_C,
   EGT_INT_S16_SGSN_GTP_C,
   EGT_INT_X2_DL_ENB_GTP_U,
   EGT_INT_X2_UL_ENB_GTP_U = 20,
   EGT_INT_RNC_GTP_U,
   EGT_INT_SGSN_GTP_U,
   EGT_INT_SGW_GTP_U,
# 228 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
   EGT_INT_ENTINVALID
}EgtIntfEnt;
# 253 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef enum _egtErrType
{
   EGT_ERR_NO_ERR,
   EGT_ERR_REQ_FAIL,
   EGT_ERR_TEID_EXHAUSTED,
   EGT_ERR_UNKNOWN_TEID_MSG,
   EGT_ERR_INV_INTF_TYPE,
   EGT_ERR_INV_TUNN_NET_EVNT,
   EGT_ERR_INV_TUNN_USR_EVNT,
   EGT_ERR_MSG_INV_INT,
   EGT_ERR_MSG_NO_MATCH,
   EGT_ERR_MSG_UNABLE_TO_COMPLY,
   EGT_ERR_MSG_MISS_MAND_IE,
   EGT_ERR_MSG_INV_LEN,
   EGT_ERR_MSG_INV_VERSION,
   EGT_ERR_MSG_INV_HDR,
   EGT_ERR_MSG_INV_TYPE,
   EGT_ERR_IE_UNKNOWN,
   EGT_ERR_IE_INV_LEN,
   EGT_ERR_INV_IE_TYPE,
   EGT_ERR_INV_IE_VAL,
   EGT_ERR_MEM_ALLOC_FAILED,
   EGT_ERR_INV_TEID,
   EGT_ERR_DFTL_SRV_NOT_PRSNT,
   EGT_ERR_TIMER_FAILED,
   EGT_ERR_MSG_SNDING_FAIL,
   EGT_ERR_INV_SAP,
   EGT_ERR_INV_IE_DATA_TYPE,
   EGT_ERR_UNKNOWN_TV,
   EGT_ERR_IE_NOT_ASCD_ORDER,
   EGT_ERR_UNSUPP_EXT_HDR,
   EGT_ERR_WRONG_EXT_HDR,
   EGT_ERR_MSG_INV_PTTYPE,
   EGT_ERR_MAN_IE_INV_LEN,
   EGT_ERR_NO_SEQ,
   EGT_ERR_MAX_TDPU_SIZE_EXCED,
   EGT_ERR_INV_DATA_TYPE,
   EGT_ERR_INV_PARAM,
   EGT_ERR_INV_DST_IP,
   EGT_ERR_MSG_NOT_ALLWD,
   EGT_ERR_DST_MULT_IP,
   EGT_ERR_INV_SRC_IP,
   EGT_ERR_INV_SRC_PORT,
   EGT_ERR_CAUSE_MEM_FAIL,
   EGT_ERR_INV_TEID_RCVD,
   EGT_ERR_PENDING_CNTRL_OP,
   EGT_ERR_END_MARKER_RCVD,
   EGT_ERR_MSG_INVOVR_LEN_PBMSG,



   EGT_ERR_MAX_RETRY_EXHAUSTED,
   EGT_ERR_INV_SEQ_NUM,

   EGT_ERR_INV_PIGGY_MSG,

   EGT_ERR_RSP_PIGGY_TMR_EXP,

   EGT_ERR_MAX_ERR

}EgtErrType;
# 420 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef struct _egDatStr132
{
   U16 length;
   U8 val[132];
   U16 spare1;



} EgDatStr132;
# 1252 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef struct _egPvtExt
{
   U16 entId;
   EgDatStr132 propVal;
} EgPvtExt;
# 1521 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef struct _egErrEvnt
{
   U32 localTeid;
   U32 transId;
   U32 remTeid;
   CmTptAddr remAddr;
   U8 intfType;


   U32 seqNo;
   EgtErrType errCause;
   U8 failedIeInst;
   U8 failedIeType;
   U8 failedMsgType;
} EgErrEvnt;





typedef struct _egUExtHdr
{
   TknU16 udpPort;
   TknU16 pdcpNmb;
} EgUExtHdr;





typedef struct _egUMsgHdr
{
   TknU8 nPduNmb;
   TknU32 seqNumber;
   EgUExtHdr extHdr;
   U32 teId;
   U8 msgType;
}EgUMsgHdr;

typedef struct _egUMsg EgUMsg;




struct _egUMsg
{






   CmMemListCp memCp;

   EgUMsgHdr msgHdr;
   CmTptAddr srcAddr;
   CmTptAddr remAddr;
   U32 lclTeid;
# 1588 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
   union
   {
      CmLListCp egIeList;
      Buffer *mBuf;
   }u;
# 1602 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
   EgUMsg *next;
};




typedef struct _egUIpAddr
{
   U8 addrType;
   union
   {
      CmIpAddr ipv4;



   } u;
} EgUIpAddr;



typedef struct _egUExtHdrTypeLst
{
   U8 noOfExtHdrs;
   U8 extType[2];
} EgUExtHdrTypeLst;



typedef struct _egUIe
{
# 1640 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
  CmLList node;
  U8 ieType;
  U8 dataType;
  union
  {
     U8 valUnSgnd8;
     U32 valUnSgnd32;
     EgPvtExt pvtExt;
     EgUIpAddr ipAddr;
     EgUExtHdrTypeLst extHdrTypeLst;
  }t;
} EgUIe;



typedef struct _egUStatus
{
   CmTptAddr srcAddr;
   CmTptAddr dstAddr;
   CmStatus cfmStatus;
} EgUStatus;



typedef struct _egUErrEvnt
{
   U32 localTeid;
   U32 remTeid;
   EgtErrType errCause;
   CmTptAddr srcAddr;
   CmTptAddr dstAddr;
   U32 diagInfo;
   U8 failedIeType;
   U8 failedMsgType;
} EgUErrEvnt;



typedef struct _egUTnlMgmt
{
   U8 action;
   U8 intfType;

   U8 dscp;
   Bool reOrderPres;


   U8 tunnelType;


   U32 teId;
   U32 remTeId;
   U8 reordAlgo;

   U16 expSeqNmb;
   CmTptAddr srcAddr;
   CmTptAddr dstIpAddr;
   CmTptAddr frmDstIpAddr;
   U16 maxTPduSize;
   CmStatus cfmStatus;
} EgUTnlMgmt;



typedef struct _egtUEvnt
{
   U8 event;
   union
   {
      EgUTnlMgmt tnlMgmt;
      EgUMsg *egMsg;
      EgUStatus status;
      EgUStatus uStaInd;
      EgUErrEvnt errInd;
   } u;
} EgtUEvnt;
# 1730 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef S16 (*EgtBndReq) ( Pst *pst, SuId suId, SpId spId)


                                  ;

typedef S16 (*EgtBndCfm) ( Pst *pst, SuId suId, U8 status)


                                    ;

typedef S16 (*EgtUbndReq) ( Pst *pst, SpId spId, Reason reason)


                                    ;
# 1839 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
typedef S16 (*EgtEguDatReq) ( Pst *pst, SpId spId, EgtUEvnt *datReq)


                                     ;


typedef S16 (*EgtEguDatInd) ( Pst *pst, SuId suId, EgtUEvnt *datInd)


                                     ;


typedef S16 (*EgtEguLclTnlMgmtReq) ( Pst *pst, SpId spId, EgtUEvnt *mgmtReq)


                                      ;


typedef S16 (*EgtEguLclTnlMgmtCfm) ( Pst *pst, SuId suId, EgtUEvnt *mgmtCfm)


                                      ;


typedef S16 (*EgtEguStaReq) ( Pst *pst, SpId spId, EgtUEvnt *staReq)


                                     ;


typedef S16 (*EgtEguStaCfm) ( Pst *pst, SuId suId, EgtUEvnt *staCfm)


                                     ;


typedef S16 (*EgtEguUStaInd) ( Pst *pst, SuId suId, EgtUEvnt *uStaInd)


                                      ;


typedef S16 (*EgtEguErrInd) ( Pst *pst, SuId suId, EgtUEvnt *errInd)


                                     ;
# 1919 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtBndReq ( Pst *pst, SuId suId, SpId spId);
# 1948 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtBndCfm ( Pst *pst, SuId suId, U8 status);
# 1971 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtUbndReq ( Pst *pst, SpId spId, Reason reason);
# 2405 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguDatReq (Pst *pst, SpId spId, EgtUEvnt *egtUEvnt);
# 2424 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguDatInd (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);
# 2443 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguLclTnlMgmtReq (Pst *pst, SpId spId, EgtUEvnt *egtUEvnt);
# 2469 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguLclTnlMgmtCfm (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);
# 2488 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguStaReq (Pst *pst, SpId spId, EgtUEvnt *egtUEvnt);
# 2515 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguStaCfm (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);
# 2534 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguUStaInd (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);
# 2553 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EgUiEgtEguErrInd (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);







extern S16 EuLiEgtBndReq ( Pst *pst, SuId suId, SpId spId);

extern S16 EuLiEgtBndCfm ( Pst *pst, SuId suId, U8 status);

extern S16 EuLiEgtUbndReq ( Pst *pst, SpId spId, Reason reason);
# 2611 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 EuLiEgtEguDatReq (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);
extern S16 EuLiEgtEguDatInd (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);

extern S16 EuLiEgtEguLclTnlMgmtReq (Pst *pst, SpId spId, EgtUEvnt *egtUEvnt);
extern S16 EuLiEgtEguLclTnlMgmtCfm (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);

extern S16 EuLiEgtEguStaReq (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);
extern S16 EuLiEgtEguStaCfm (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);

extern S16 EuLiEgtEguUStaInd (Pst *pst, SuId suId, EgtUEvnt *egtUEvnt);

extern S16 EuLiEgtEguErrInd (Pst *pst, SpId spId, EgtUEvnt *egtUEvnt);
# 2635 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 cmPkEgtBndReq
( Pst* pst, SuId suId, SpId spId )



  ;

extern S16 cmUnpkEgtBndReq
( EgtBndReq func, Pst *pst, Buffer *mBuf )



  ;

extern S16 cmPkEgtBndCfm
( Pst * pst, SuId suId, U8 status )



  ;

extern S16 cmUnpkEgtBndCfm
( EgtBndCfm func, Pst *pst, Buffer *mBuf )



  ;

extern S16 cmPkEgtUbndReq
( Pst * pst, SpId spId, Reason reason )



  ;

extern S16 cmUnpkEgtUbndReq
( EgtUbndReq func, Pst *pst, Buffer *mBuf )



  ;
# 2967 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 cmPkEgDatStr132
( EgDatStr132 *param, Buffer *mBuf )


  ;

extern S16 cmUnpkEgDatStr132
( EgDatStr132 *param, Buffer *mBuf )


  ;
# 3613 "/home/mrehwald/Desktop/Radisys/lte_enb/src/cm/egt.x"
extern S16 cmPkEgPvtExt
( EgPvtExt *param, Buffer *mBuf )


  ;

extern S16 cmUnpkEgPvtExt
( EgPvtExt *param, Buffer *mBuf )


  ;


extern S16 cmPkEgtEguDatReq ( Pst *pst, SpId spId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguDatReq ( EgtEguDatReq func, Pst *pst, Buffer *mBuf, Mem *memInfo )





  ;

extern S16 cmPkEgtEguDatInd ( Pst *pst, SuId suId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguDatInd ( EgtEguDatInd func, Pst *pst, Buffer *mBuf )




  ;

extern S16 cmPkEgtEguLclTnlMgmtReq ( Pst *pst, SpId spId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguLclTnlMgmtReq ( EgtEguLclTnlMgmtReq func, Pst *pst, Buffer *mBuf, Mem *memInfo )





  ;

extern S16 cmPkEgtEguLclTnlMgmtCfm ( Pst *pst, SuId suId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguLclTnlMgmtCfm ( EgtEguLclTnlMgmtCfm func, Pst *pst, Buffer *mBuf )




  ;

extern S16 cmPkEgtEguStaReq ( Pst *pst, SpId spId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguStaReq ( EgtEguStaReq func, Pst *pst, Buffer *mBuf, Mem *memInfo )





  ;

extern S16 cmPkEgtEguStaCfm ( Pst *pst, SuId suId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguStaCfm ( EgtEguStaCfm func, Pst *pst, Buffer *mBuf )




  ;

extern S16 cmPkEgtEguUStaInd ( Pst *pst, SuId suId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguUStaInd ( EgtEguUStaInd func, Pst *pst, Buffer *mBuf )




  ;

extern S16 cmPkEgtEguErrInd ( Pst *pst, SuId suId, EgtUEvnt *egtUEvnt )




  ;

extern S16 cmUnpkEgtEguErrInd ( EgtEguErrInd func, Pst *pst, Buffer *mBuf )




  ;

extern S16 cmPkEgUExtHdr ( EgUExtHdr *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUExtHdr ( EgUExtHdr *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgUMsgHdr ( EgUMsgHdr *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUMsgHdr ( EgUMsgHdr *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgUMsg ( EgUMsg *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUMsg ( EgUMsg *unpkStruct, Buffer *mBuf, Mem memInfo )




  ;

extern S16 cmPkEgUIpAddr ( EgUIpAddr *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUIpAddr ( EgUIpAddr *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgUExtHdrTypeLst ( EgUExtHdrTypeLst *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUExtHdrTypeLst ( EgUExtHdrTypeLst *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgUIeList ( CmLListCp *pkList, Buffer *mBuf, CmMemListCp *memCp )




  ;

extern S16 cmUnpkEgUIeList ( CmLListCp *unpkList, Buffer *mBuf, CmMemListCp *memCp )




  ;

extern S16 cmPkEgUIe ( EgUIe *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUIe ( EgUIe *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgUStatus ( EgUStatus *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUStatus ( EgUStatus *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgUErrEvnt ( EgUErrEvnt *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUErrEvnt ( EgUErrEvnt *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgUTnlMgmt ( EgUTnlMgmt *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgUTnlMgmt ( EgUTnlMgmt *unpkStruct, Buffer *mBuf )



  ;

extern S16 cmPkEgtUEvnt ( EgtUEvnt *pkStruct, Buffer *mBuf )



  ;

extern S16 cmUnpkEgtUEvnt ( EgtUEvnt *unpkStruct, Buffer *mBuf, Pst *pst )




  ;
# 75 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_edm.x" 1
# 32 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_edm.x"
typedef struct _egIeEntry
{
  U8 ieCode;
  U8 dataType;
  U16 minLen;
  U16 maxLen;

  Bool tvType;

}EgIeEntry;




typedef struct _egUIeProperties EgUIeProperties;



struct _egUIeProperties
{
   U8 ieType;
   U8 ieClass;
};



typedef struct _egUMsgEntry
{
   U8 msgType;
   U8 nmbIe;
   U8 nmbMandIe;
   EgUIeProperties ieProperties[3];
}EgUMsgEntry;



typedef struct _egUGmCb
{
   U16 posIdx[256];
   EgUMsgEntry gmEntry[6];
}EgUGmCb;



typedef struct _egUIeCb
{
   U16 posIdx[256];
   EgIeEntry ieEntry[6];
}EgUIeCb;



typedef struct _egUEdmCb
{
   EgUIeCb egIeCb;
   EgUGmCb egMsgCb;
}EgUEdmCb;
# 76 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x" 1
# 58 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
typedef struct egTSapCb EgTSapCb;
typedef struct egUSapCb EgUSapCb;
typedef struct egTunnCb EgTunnCb;
typedef struct egTptSrvCb EgTptSrvCb;
typedef struct _destAddrCb EgDestAddrCb;
typedef struct _ipCb EgIpCb;





typedef struct egTimer
{
   CmTimer tmr;
   U32 egCbPtr;
} EgTimer;





typedef struct _teIdCb EgTeIdCb;
typedef struct _egUThreadCb EgUThreadCb;

typedef struct _seqInfo
{
   Bool reOrder;
   U32 expSeqNmb;
   U32 curLastSeq;
   U32 lastRcvdSeq;
   U32 numRcvdPdus;
   U32 winStart;
   EgtUEvnt **pduArray;
}SeqInfo;


struct _teIdCb
{
   CmHashListEnt destTeIdEnt;

   CmHashListEnt egTeIdEnt;




   U8 tunnelType;

   U8 dscp;
   U8 reordAlgo;
   EgTimer reOrderTimer;
   U32 teId;
   SeqInfo *seqInfo;
   Bool endMarker;
   Bool reOrdering;
   Cntr totalMsgsTx;
   Cntr totalMsgsRx;
   EgUSapCb *uSapCb;

   EgDestAddrCb *dstAddrCb;
   EgTptSrvCb *tptSrvrCb;
   EgIpCb *ipCb;
   struct
   {
      U8 hdr[40];
      U8 cnt;
   }preEncHdr;
   U32 remTeid;


};

struct _destAddrCb
{
   CmHashListEnt destEnt;
   U32 echoReqSent;
   U8 intfType;


   U32 forwardingTunnCnt;
   U32 normaldataTunnCnt;

   CmTptAddr destIpAddr;
   Bool destReachable;


   Bool multicastAddr;
   CmHashListCp teIdLst;
   U16 maxTPduSize;
   S32 channel;
};

struct _ipCb
{
   CmHashListEnt ipCbOnUSapEnt;
   EgIpInfo ipAddrInfo;
   CmHashListCp tptServCbLst;
   EgIpSts ipStats;
   U16 status;
   CmHashListCp destAddrCbLst;
   Bool dfltPort;
   Bool encEchoAvail;
};

typedef struct _egUEchoReqCb
{
   CmHashListEnt echoEnt;
   U32 seqNo;
   SpId uSapId;
   Buffer *echoReqBuff;
   EgTptSrvCb *tptServerCb;
   CmTptAddr srcAddr;
   CmTptAddr destAddr;
}EgUEchoReqCb;

typedef struct egTptStat
{
   Cntr totalMsgsTx;
   Cntr totalMsgsRx;
}EgTptStat;


typedef struct _egUcb
{
   CmHashListCp echoReqHashList;
   CmTimer echoTimers;
   CmTimer n3t3Timers;
   EgUEdmCb edmUCb;
   Bool echoTmrStarted;

   U8 echoReqCntr;
}EgUcb;
# 210 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
typedef enum _egtMsgCat
{
   EG_GTPC_MSGCAT_REQUEST,
   EG_GTPC_MSGCAT_RESPONSE,
   EG_GTPC_MSGCAT_NOTFN,
   EG_GTPC_MSGCAT_ACKN,
   EG_GTPC_MSGCAT_COMMAND,
   EG_GTPC_MSGCAT_IND,
   EG_GTPC_MSGCAT_FAILIND,
   EG_GTPC_MSGCAT_RSP_ACK,
   EG_GTPC_MSGCAT_OTHER
}EgtMsgCat;



typedef enum _egModuleName
{
   EG_MOD_PCM,
   EG_MOD_PCM_USAP,
   EG_MOD_TPT,
   EG_MOD_EDM_GM,
   EG_MOD_EDM_IE,
   EG_MOD_CPM,
   EG_MOD_INVALID
}EgModuleName;


typedef enum _egTptSrvAct
{
   EG_TPT_TPTSRV_INVLD,
   EG_TPT_TPTSRV_CLOSE,
   EG_TPT_TPTSRV_OPEN,
   EG_TPT_TPTSRV_DISABLE,
   EG_TPT_TPTSRV_FREE
}EgTptSrvAct;




struct egUSapCb
{
   State state;
   SuId suId;
   Pst pst;
   EgUSapCfg cfg;
   EgSapSts sts;
   EgTSapCb *tSapCb;

   CmHashListCp ipCbHashList;
# 272 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
};
# 286 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
struct egTSapCb
{
   Pst pst;
   Ent contEnt;
   Bool cfgDone;
   SuId suId;
   SpId spId;
   State state;
   EgTSapCfg cfg;
   EgSapSts sts;
   EgTSapReCfg reCfg;
   U8 bndRetryCnt;
   U8 numSrvr;
   UConnId lastSuConnId;
   EgTptSrvCb **tptSrvCbLst;
   CmTimer timers[2];
   EgTimer bndTmr;
   U32 trcMask;
   S16 trcLen;
   Pst cfmPst;
   Header ctrlHdr;
   CmTptAddr tSapIpAddr;
   Bool ipCfgDone;
};






struct egTptSrvCb
{

   CmHashListEnt transportEnt;

   EgIpCb *ipCbPtr;
   EgTptStat stats;
   U16 portNum;
   U32 uSapId;
   Bool portStatus;
   Bool isdftlTptSrv;

   UConnId suConnId;
   UConnId spConnId;
   U8 state;
   TknStrOSXL hostName;
   EgTptSrvCfg cfg;
   EgUSapCb *uSapCb;
   EgTSapCb *tSapCb;
   EgTimer opnSrvTmrNode;
   S16 opnSrvCurRetryCnt;





};
# 367 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
typedef struct _egCb
{
   TskInit init;
   EgGenCfg genCfg;
   EgGenSts genSts;
   EgGenSta genSta;
   EgUSapCb **egtSapLst;



   EgTSapCb *tSapCb;




   CmTqCp egTqCp;
   CmTqType egTq[1024];
   U8 outOfRsrc;
   Bool shutdown;
   Bool ieCfgDone;

  EgUcb egUCb;
# 405 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
CmHashListCp egTeidHashListCp;

} EgCb;






typedef struct _eguEvnt
{
   U8 msgType;
   U16 seqNumber;
   U32 teid;
   CmTptAddr localAddr;
   CmTptAddr remAddr;
   EgTptSrvCb *srvCb;
   U8 intfType;
   S16 resultType;
   Region region;
   Pool pool;
   U8 failedIeInst;
   U8 failedIeType;
   U8 failedMsgType;
   U16 maxTPduSize;
   U16 tPduSize;
   Bool isEnc;
   U8 eventType;
   EgTeIdCb *teIdCb;
   EgDestAddrCb *destAddrCb;
   EgIpCb *ipCb;
   EgUSapCb *usap;
   EgTSapCb *tsap;
   EgMngmt *lmInfo;
   Bool errInd;

   Bool suppExtHdrNtf;

   Buffer *mBuf;
   EgUMsg *egMsg;
}EgUEvnt;







extern EgCb egCb;
# 465 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egTptInit ( Void );
# 474 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egTptDeInit ( Void );
# 488 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egTptState ( CmTptAddr localAddr, TknU8 *state);
# 503 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egTptProcessTsapServers ( EgTSapCb *tsapCb, EgTptSrvAct srvAction)

                                                    ;
# 519 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egTptOpenServer ( EgTptSrvCb *serverCb, U16 *reason)

                                                    ;
# 533 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egTptCloseServer ( EgTptSrvCb *serverCb )
                                                       ;
# 546 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egTptFreeServer ( EgTptSrvCb *serverCb )
                                                       ;
# 565 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egMiTptSrvOpenInd ( EgTptSrvCb *srvCb )

                 ;
# 582 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egMiTptSrvCloseInd ( EgTptSrvCb *serverCb, Bool fromLMI )

                                                              ;
# 600 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Data *egAlloc ( Size size )


  ;
# 621 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egFree ( Data *pCb, Size size )



  ;
# 649 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egSendLmAlarm ( U16 category, U16 event, U16 cause, EgUstaDgn *dgn )





  ;
# 681 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egSendLmCfm ( Pst *pst, Header *hdr, U8 type, EgMngmt *cfm )





  ;
# 711 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egSendLmCntrlCfm (Pst *pst, U16 status, U16 reason, Header *hdr)


                                                   ;
# 744 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egGenTrcInd ( EgTSapCb *tSapCb, S16 elmnt, CmTptAddr *srcAddr, CmTptAddr *destAddr, U16 evnt, Buffer *mBuf )







  ;





extern S16 egSchedTmr (Ptr egHandle, S16 tmrEvnt, Action action, U32 tmrVal)

                                                                ;

extern Void egTmrEvnt (Ptr cb, S16 event)
                                                ;

extern Void egCmInitTimer (EgTimer *tmr);

extern S16 egRegInitTmr (Void);

extern Void egRmvTmr ( U32 cbp, CmTimer *pTimerStruct, U8 tmrNum, U8 maxNmbTmrs)


                                                  ;




extern Void egCmPrntDbg ( U8 ptrType, void *ptr, S8 *name )


                                 ;

extern Void PrintEGTPStats (void )
                                  ;

extern Void ResetEGTPStats (void )
                                  ;





extern S16 egEdmDeInit ( Void )


  ;

extern S16 egAllocIntfLst ( U8 nmbIntf )


  ;


extern Size egGetIntfMem ( Void )


  ;
# 819 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egCpyCmTptAddr ( CmTptAddr *dst, CmTptAddr *src )


                                  ;
# 837 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egCmpTptAddr (CmTptAddr *one, CmTptAddr *two, Bool *addressMatch)

                                                                   ;






extern S16 egActvTmr (Void);




extern S16 egTptSendMsg (EgTptSrvCb *serverCb, CmTptAddr *destAddr, Buffer *mBuf, Pst *pst);

extern S16 egCpmInit (EgMngmt *cfgReq, EgModuleName module);

extern S16 egCpmDeinit (Void);

extern S16 egInitExt (Void);

extern S16 egGetSId (SystemId *sysId);
# 868 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egUpdateTxStatistics ( EgtMsgType msgType, EgSapSts *sts )


                                     ;
# 881 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern Void egUpdateRxStatistics ( EgtMsgType msgType, EgSapSts *sts )


                                          ;


extern S16 egTptUdpServerDatReq ( EgTptSrvCb *serverCb, CmTptAddr *destAddr, Buffer *mBuf, Pst *pst, U8 tos )




                                                      ;


extern S16 egUCpmProcLiMsg
(
 EgUEvnt *eguEvnt,
 Pst *pst
 );


extern S16 egFTunProcEguDatReq
(
EgtUEvnt *egtUEvnt,
EgUSapCb *usap,
Pst *pst
);

extern Void egUCpmProcUiMsg
(
EgUEvnt *eguEvnt,
Pst *pst
);

extern Void egFUCpmProcUiMsg
(
EgTeIdCb *teIdCb,
EgUMsg *egMsg,
Pst *pst
);


extern S16 egUFEncodeGmHdr
(
   U8 *preEncHdr,
   EgUMsgHdr *statHdr,
   U8 *hdrIndex
);

extern S16 egFpTunProcFwdEguDatReq
(
U32 lclTeid,
U32 remTeid,
U32 tPduSise,
Buffer *mBuf,
U32 pdcpSduId,
U32 pdcpSeqNo
);

extern S16 egFTunProcEguDatReq
(
EgtUEvnt *egtUEvnt,
EgUSapCb *usap,
Pst *pst
);

extern S16 egFUEncMsgReq
(
   EgtUEvnt *evntMsg,

   EgTeIdCb *teIdCb,
   Buffer **mBuffer
);
extern S16 egLiPrcBndCfm
(
SuId suId,
EgTSapCb *tsapCb,
U16 result
);
# 978 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egUEncMsgReq (EgUEvnt *evntMsg);
# 991 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
extern S16 egUDecMsgReq (EgUEvnt *evntMsg);

extern S16 egUTptGetMsg (EgTptSrvCb *serverCb, CmTptAddr *srcAddr, Buffer *mBuf, Pst *pst);
extern S16 egUCmCreateEvent (EgUEvnt **newEvent);
extern S16 egTunProcEguDatReq (EgtUEvnt *egtUEvnt, EgUSapCb *usap, Pst *pst);
extern S16 egTunProcEguTnlMgmtReq (EgtUEvnt *egtUEvnt, EgUSapCb *usap);
extern S16 egUTunnTeidMod (EgtUEvnt *egtUEvnt, EgIpCb *ipCb);
extern S16 egUTunnTeidDel (EgtUEvnt *egtUEvnt, EgIpCb *ipCb, EgUSapCb *usap);
extern S16 egUTunnTeidReordEna (EgtUEvnt *egtUEvnt, EgIpCb *ipCb);
extern S16 egUTunnTeidReordDis (EgtUEvnt *egtUEvnt, EgIpCb *ipCb, EgUSapCb *usap);
extern S16 egUTunnTeidAdd (EgtUEvnt *egtUEvnt, EgIpCb *ipCb);
extern S16 egTunProcEguStaReq (EgtUEvnt *egtUEvnt, EgUSapCb *usap);
extern S16 egUFreeUiEvnt (EgtUEvnt *egtUEvnt);
extern S16 egUCpmHdlEvt (EgUEvnt *eguEvnt, Pst *pst);
extern S16 egTnlFreeReOrderQReq (Inst threadId);
extern S16 egUTunnDeleteTunnel (EgUEvnt *eguEvnt);
extern S16 egUCmFreeEvent (EgUEvnt *event);


extern S16 egUPlatTunnTeidAdd (EgDestAddrCb *dstCb);
extern S16 egUPlatTunnTeidDel (EgDestAddrCb *dstCb);

extern S16 egReordRcvdEguMsgs (EgTeIdCb *teidCb, EgtUEvnt *egtuEvt);

extern Void egUCpmProcMsg (EgUEvnt *eguEvnt, Pst *pst);

extern S16 egUCpmHdlTeid (EgUEvnt *eguEvnt);

extern S16 egGetThrdId (EgTeIdCb **egTeidCb, S16 event, EgUThreadCb **pThrCb);

extern S16 egAssignThrd (EgTeIdCb *egTeidCb);

extern S16 egLdDistribute (Void);

extern S16 egFlushReordRcvdGtpuPdus (EgTeIdCb *teidCb);
extern S16 egFlushAllPackets (EgTeIdCb *teidCb);
extern S16 egFlushTillHole (EgTeIdCb *teidCb);

extern S16 egDeleteTun (EgTeIdCb *teidCb);
extern S16 egSchedreOrdTmr (Ptr egHandle, S16 tmrEvnt, Action action, U32 tmrVal);
extern S16 egUTunnReordCfm (EgUEvnt *eguEvnt);
extern S16 egUHndlT3N3TmrExpiry (Void);

extern S16 egUSendEchoReqOnLclPort (EgIpCb *ipCb, EgUEvnt *echoEvnt, U16 *echoSeqNo)
                                                    ;
extern S16 egUSendEchoReq (Void);
extern S16 egMiProcIpCb (EgIpCb *ipCb, SpId spId);
extern Void egUCpmProcEguDatReq (EgtUEvnt *egtUEvnt, EgUSapCb *usap, Pst *pst);
extern Void egUCpmProcEguStaReq (EgtUEvnt *egtUEvnt, EgUSapCb *usap);
extern Void egUCpmProcEguTnlMgmtReq (EgtUEvnt *egtUEvnt, EgUSapCb *usap );
extern S16 EgMiHdlCntrlCfmFrmWrkr (EgUEvnt *eguEvnt);
extern S16 egMiRmvEchoCb (EgUSapCb *uSapCb, EgIpCb *ipCb, EgTptSrvCb *srvCb, EgTSapCb *tSapCb, U8 type)
                                                                                    ;
extern S16 egMiGetIpCb (EgUSapCb *uSapCb, EgMngmt *cntrlReq, U8 eventType, U8 *nmbReq);
extern S16 egMiIpCbDeInit (CmHashListCp *IpCbHashList, Bool del);
extern S16 egHndlRecvFb (U8 *buf, U32 bufLen );
# 1066 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg.x"
 S16 egTptGetTsapFrmAddr ( CmTptAddr tptSrvAddr, EgTSapCb **tSapCb);


extern S16 SGetReadPtr(Buffer *mBuf, U8** data, MsgLen *len);
# 77 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h" 1
# 111 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern Void EgTLSendMsg(Bool param);







extern S16 SAttachPtrToBuf (Region region,Pool pool,Data *ptr,MsgLen totalLen,Buffer** mBuf)
                                          ;
# 131 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern void EgTLInitReq(Region region, Pool pool);
# 142 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern U32 EgTLReadMsg(U32 timeOut, U32 maxEvent);
# 166 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern void EgTLThShutdownReq(void);
# 197 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern S16 egTLSendSockMsg
(
CmInetFd *sockFd,
CmInetAddr *dstAddr,
CmInetMemInfo *info,
Buffer *mBuf,
MsgLen *len,
U8 tos
);
# 219 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern U32 EgTLBndReq
(
   Pst *pst,
   SuId suId,
   SpId spId
);
# 237 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern U32 EgTLUbndReq
(
   Pst *pst,
   SpId spId,
   Reason reason
);
# 252 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern U32 EgTLDiscServerReq
(
   UConnId conId
);


extern S16 EgLiHitBndCfm
(
 Pst *pst,
 SuId suId,
 U8 status
);


extern S16 EgLiHitConCfm
(
 Pst *pst,
 SuId suId,
 UConnId suConnId,
 UConnId spConnId,
 CmTptAddr *localAddr
);


extern S16 EgLiHitUDatInd
(
 Pst *pst,
 SuId suId,
 UConnId suConnId,
 CmTptAddr *srcAddr,
 CmTptAddr *remAddr,
 CmIpHdrParm *ipHdrParm,
 Buffer *mBuf
);
# 301 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern U32 EgTLDatReq
(
UConnId spConId,
CmTptAddr *remAddr,
CmTptAddr *srcAddr,
CmIpHdrParm *hdrParm,
Buffer *mBuf
);
# 324 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.h"
extern U32 EgTLOpenServerReq
(
Pst *pst,
SpId spId,
UConnId servConId,
CmTptAddr *servTAddr
);
# 78 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2
# 1 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.x" 1
# 29 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.x"
typedef struct _egTLmsgQueue
{
   CmTptAddr dstAddr;
   Buffer *mBuf;
   MsgLen msglen;



   U8 tos;
   Bool flag;
}EgTLMsgQueue;
# 51 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.x"
typedef struct _egTLserverCb
{
   CmTptAddr serverAddress;
   EgTLMsgQueue msgQueue[256];
   EgTLMsgQueue egtpMsgQueue[256];
   U32 front;
   U32 rear;
   U32 egtpPktFront;
   U32 egtpPktRear;
   U32 qLen;
   U32 egtpPktQLen;
   U32 srvConId;
   U32 sockFd;



   U8 sockType;
   Bool isSocketNonBlocking;
   U32 latestFront;
   U32 latestRear;
}EgTLServerCb;
# 88 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.x"
typedef struct _egDlPktCntrl
{
   U32 maxNumPacketsToRead;
   U32 oldDlTimeCnt;
   U32 numPacketProcessed;
   U32 dlTimeWindowCnt;
   U32 dlTimeWindow;
   U32 totalTime;
}EgDlPktCntrl;
# 111 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.x"
typedef struct _egUlPktCntrl
{
   U32 maxNumPacketsToSend;
   U32 oldUlTimeCnt;
   U32 numPacketSent;
   U32 ulTimeWindowCnt;
   U32 ulTimeWindow;
}EgUlPktCntrl;
# 132 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.x"
typedef struct _egUlQueueCntrl
{
   U32 queueFullCnt;
   U32 queueNotFullCnt;
}EgUlQueueCntrl;
# 147 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.x"
typedef struct _egTLCb
{
   EgTLServerCb servers[1];
   CmInetMemInfo memInfo;
   U32 ePollFd;
   U32 maxMsgToread;
   Pst egPst;
   EgUlQueueCntrl egUlQueueCntrl;
   EgDlPktCntrl dlPktCntrl;
   EgUlPktCntrl ulPktCntrl;
   U32 isCpuBasedContrl;
}EgTLCb;

 EgTLCb egTLCb;



typedef enum _egTLsockType
{
   TH_SERVER = 1,
   TH_CLIENT,
   TH_MAX
}EgTLSockType;

typedef struct _packetInfo
{
   U32 numOfPktsRcvd;
   U32 numBytesRcvd;
   U32 numOfPktsSent;
   U32 numBytesSent;
}PacketInfo;
# 79 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 2







U32 g_egtpSockDropsDueToReason19;





extern Void EgTLSendEgtpMsg(Bool);
# 101 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
U32 egTLUplnkSocket;

 S16 egFpTunProcEguDatReq
 (
 U32 lclTeid,
 U32 remTeid,
 U8 tos,
 U32 tPduSise,
 Buffer *mBuf
 );
# 125 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
PacketInfo packetData;
# 137 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
static U32 egTLCloseServerReq
(
U32 connId
);
# 161 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
static S16 egTLBuildSendIovec
(
    Buffer *mBuf,
    MsgLen msgLen,
    CmInetIovec txArr[],
    S16 numDBufs,
    S16 *numIovElems,
    U32 *strtEndDBufNum,
    MsgLen *ioLen
);
# 375 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
static S16 egTLRecvMsgFromSocket
(
U32 sockFd,
CmTptAddr *remAddr,
CmInetMemInfo memInfo,
Buffer **mBuf
);


static U32 egTLQueueAddOne(U32 idx);
# 403 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
static U32 egTLQueueAddOne(U32 idx)
{

   return((idx + 1) & (256 - 1));
}
# 456 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 U32 EgTLOpenServerReq
(
Pst *pst,
SpId spId,
UConnId servConId,
CmTptAddr *servTAddr
)







{
    Pst cfmPst;
    struct sockaddr_in srcAddr;
    struct sockaddr_in *sockAddrPtr;



    U32 sizeOfAddr;

    S32 ret= (-1);
    EgTLServerCb *egTLServerCb;
    S32 domain;
# 518 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
    {
        cmMemset((U8*)&srcAddr, 0, sizeof(srcAddr));
        srcAddr.sin_family = 
# 520 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                 2
# 520 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                        ;
        srcAddr.sin_port = htons(servTAddr->u.ipv4TptAddr.port);
        srcAddr.sin_addr.s_addr = htonl(servTAddr->u.ipv4TptAddr.address);
        sizeOfAddr = sizeof(struct sockaddr_in);
        sockAddrPtr = (struct sockaddr_in *)&srcAddr;
        domain = 
# 525 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                  2
# 525 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                         ;
    }

    egTLServerCb = &egTLCb.servers[servConId];
# 602 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
   egTLServerCb->sockFd = socket(domain,
# 602 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                       SOCK_DGRAM
# 602 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                                 ,0);
   if(((-1) == egTLServerCb->sockFd))
   {
        printf("\n Unable to Get a socket Descriptor, Failed with reason =[%d]",
# 605 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                                                               (*__errno_location ())
# 605 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                                                                    );
        return(1);
    }



    egTLServerCb->isSocketNonBlocking = 1;






    ret = ioctl(egTLServerCb->sockFd, 
# 618 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                     0x5421
# 618 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                            , &egTLServerCb->isSocketNonBlocking);







    if ((-1) == ret)

    {




      printf("\n Failed to make Socket Non-Blocking Server {[ConID]-[FD]} ={[%ld]-[%ld]} with reason =[%d]",
                servConId,egTLServerCb->sockFd,
# 634 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                              (*__errno_location ())
# 634 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                                   );



      (Void)close(egTLServerCb->sockFd);

      return(1);
    }

    ret = bind(egTLServerCb->sockFd, (struct sockaddr *)sockAddrPtr, sizeOfAddr);
# 657 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
    if ((-1) == ret)
    {




       printf("\n Bind failed for Server {[ConID]-[FD]} ={[%ld]-[%ld]} with reason =[%d]",
                  servConId,egTLServerCb->sockFd,
# 664 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                                (*__errno_location ())
# 664 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                                     );



       (Void)close(egTLServerCb->sockFd);

       return(1);
    }


    cmMemcpy((U8 *) &egTLServerCb->serverAddress,(const U8 *) servTAddr,sizeof(CmTptAddr));
    egTLServerCb->srvConId = servConId;

    if(2152 == servTAddr->u.ipv4TptAddr.port)
    {
        egTLServerCb->sockType = TH_SERVER;
        printf("\n Server Socket FD =[%lu]",egTLServerCb->sockFd);
    }
    else
    {
        egTLServerCb->sockType = TH_CLIENT;
    }


    cmMemcpy((U8 *) &cfmPst,(const U8 *) pst,sizeof(Pst));
    cfmPst.dstEnt = pst->srcEnt;

    EgLiHitConCfm(&cfmPst,spId,servConId,servConId,servTAddr);
    return(0);
}
# 710 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 S16 egUPlatTunnTeidAdd
(
EgDestAddrCb *dstCb
)





{
   return(0);
}
# 737 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 S16 egUPlatTunnTeidDel
(
EgDestAddrCb *dstCb
)




{
   return(0);
}
# 898 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 Void EgTLSendMsg(Bool param)



{
    U32 i;
    U32 j=0;
    S16 ret;
    CmInetFd sockFd;
    CmInetAddr dstAddr;
    EgTLServerCb *egTLServerCb;
    U32 numPackets;
    U32 localFront;
    U32 maxNumPacketsToSend = 256;
# 921 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
    sockFd.type = 
# 921 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                 SOCK_DGRAM
# 921 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                              ;

    numPackets = 0;
# 939 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
    (param=param);


    for(i=0; i< 1; i++)
    {
       egTLServerCb = &egTLCb.servers[i];
       if((egTLServerCb->sockFd != (-1)))
       {
          localFront = egTLServerCb->front;

          while((egTLQueueAddOne(egTLServerCb->rear)) != localFront)
          {
             EgTLMsgQueue *msgQueue = &egTLServerCb->msgQueue[localFront];



                sockFd.fd = egTLServerCb->sockFd;
# 975 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                {
                   dstAddr.port = 2152;
                   dstAddr.address = msgQueue->dstAddr.u.ipv4TptAddr.address;
                }

             if(msgQueue->mBuf != 
# 980 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                 ((void *)0)
# 980 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                     )
             {
                ret = egTLSendSockMsg(&sockFd,
                                      &dstAddr,
                                      &egTLCb.memInfo,
                                       msgQueue->mBuf,
                                       &msgQueue->msglen,
                                       msgQueue->tos);

                if(19 == ret)
                {
                    g_egtpSockDropsDueToReason19++;
                }
                else if(0 != ret)
                {
                    printf("\n egTLSendSockMsg Failed : with Reason =[%d]",ret);
                }
                packetData.numOfPktsSent++;
                packetData.numBytesSent += msgQueue->msglen;


                msgQueue->flag = 0;
                egTLServerCb->latestFront = localFront;
                egTLServerCb->latestRear = egTLServerCb->rear;

                SPutMsg(msgQueue->mBuf);
                msgQueue->mBuf = 0L;
             }
             else
             {
                printf("\n Mbuf is NULL before send itself  !!!!\n");
             }
             localFront = egTLQueueAddOne(localFront);
             egTLServerCb->front = localFront;
             numPackets++;
             if(numPackets >= maxNumPacketsToSend)
             {
                break;
             }
          }
          egTLCb.servers[i].qLen = 0;
       }
       if(numPackets >= maxNumPacketsToSend)
       {
          break;
       }
    }
}
# 1040 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 Void EgTLInitReq
(
Region region,
Pool pool
)





{
    U32 i;





    for (i=0; i< 1; i++)
    {
        egTLCb.servers[i].qLen = 0;
        egTLCb.servers[i].sockFd = -1;
        egTLCb.servers[i].srvConId = -1;
        egTLCb.servers[i].front = 0;
        egTLCb.servers[i].rear = 256 - 1;

        egTLCb.servers[i].egtpPktFront = 0;
        egTLCb.servers[i].egtpPktRear = 256 - 1;

    }



    egTLCb.egPst.dstProcId = 100;
    egTLCb.egPst.srcProcId = egCb.init.procId;
    egTLCb.egPst.srcEnt = 0x75;
    egTLCb.egPst.dstEnt = 0xd3;
    egTLCb.egPst.dstInst = egCb.init.inst;
    egTLCb.egPst.srcInst = egCb.init.inst;
    egTLCb.egPst.prior = 0x00;
    egTLCb.egPst.route = 0x00;
    egTLCb.egPst.region = region;
    egTLCb.egPst.pool = pool;
    egTLCb.egPst.selector = 0;



    egTLCb.memInfo.pool = 3;
    egTLCb.memInfo.region = region;
# 1110 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
}
# 1123 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 U32 EgTLReadMsg
(
U32 timeOut,
U32 maxEvent
)





{

   U32 j;
   register U32 i;
   Buffer *mbuf;
   CmIpHdrParm ipHdrParm;
   EgTLServerCb *egTLServerCb;






   CmTptAddr remAddr;
   remAddr.type = 4;

   U32 numPackets = 64;
# 1165 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
   for(i=0; i< 1; i++)
   {
      egTLServerCb = &egTLCb.servers[i];

      if(egTLServerCb->sockFd == 0xFFFFFFFF)
           continue;


      for(j = 0; j < numPackets; j++)
      {
# 1183 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
         if(0 == egTLRecvMsgFromSocket(egTLServerCb->sockFd, &remAddr, egTLCb.memInfo, &mbuf))

         {


            EgLiHitUDatInd(&egTLCb.egPst,egTLServerCb->srvConId,egTLServerCb->srvConId,
                  &remAddr,&egTLServerCb->serverAddress,&ipHdrParm,mbuf);





         }
         else
         {

            break;
         }
      }
   }

   return(0);
}
# 1299 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 Void EgTLThShutdownReq(Void)



{
    U32 i;
# 1313 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
    for (i=0; i < 1; i++)
    {
        if( (-1) != egTLCb.servers[i].sockFd)
            close(egTLCb.servers[i].sockFd);
    }
}
# 1334 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 U32 EgTLDatReq
(
UConnId spConId,
CmTptAddr *remAddr,
CmTptAddr *srcAddr,
CmIpHdrParm *hdrParm,
Buffer *mBuf
)
# 1350 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
{
   EgTLServerCb *egTLServerCb = &egTLCb.servers[spConId];;
   EgTLMsgQueue *msgQueue;
   U32 tmpRear;
   U32 locFront;
   MsgLen msgLen;
# 1375 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
   tmpRear = egTLQueueAddOne(egTLServerCb->rear);
   locFront = egTLServerCb->front;




   if(egTLQueueAddOne(egTLQueueAddOne(tmpRear)) == locFront)
   {

      SPutMsg(mBuf);
      return(0);

   }


   msgQueue = &egTLServerCb->msgQueue[tmpRear],




   cmMemcpy((U8 *) &msgQueue->dstAddr,(const U8 *)remAddr, sizeof(CmTptAddr));
   msgQueue->mBuf = mBuf;
   SFndLenMsg(mBuf, &msgLen);
   msgQueue->msglen = msgLen;
   msgQueue->flag = 1;






   egTLServerCb->rear = tmpRear;
   egTLServerCb->qLen++;





   return(0);

}
# 1430 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 U32 EgTLBndReq
(
Pst *pst,
SuId suId,
SpId spId
)






{
    Pst cfmPst;
# 1454 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
    cfmPst.dstProcId = pst->srcProcId;
    cfmPst.dstEnt = pst->srcEnt;
    cfmPst.dstInst = pst->srcInst;
    cfmPst.srcProcId = pst->dstProcId;
    cfmPst.srcInst = pst->dstInst;

    EgLiHitBndCfm(&cfmPst, suId, 1);
    return(0);
}
# 1476 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 U32 EgTLUbndReq
(
Pst *pst,
SpId spId,
Reason reason
)






{
    return(0);
}
# 1507 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 U32 EgTLDiscServerReq
(
UConnId conId
)




{
    U32 ret = 0;

    if(egTLCb.servers[conId].sockFd != (-1) )
    {


        ret = egTLCloseServerReq(conId);
        if(0 != ret)
        {
            printf("\n Failed to Close Socket");
            return(1);
        }
    }

    return(0);
}
# 1543 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
static U32 egTLCloseServerReq
(
U32 connId
)




{
   U32 ret=0;
# 1594 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
    if((-1) == close(egTLCb.servers[connId].sockFd))
    {






        printf("\n Unable to Close the Socket FD =[%ld] for ServerId=[%ld] with Error=[%d]",
               egTLCb.servers[connId].sockFd,
               connId,
               
# 1605 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
              (*__errno_location ())
# 1605 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                   );


        ret = 1;
    }

    return(ret);
}
# 1645 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 S16 egTLSendSockMsg
(
 CmInetFd *sockFd,
 CmInetAddr *dstAddr,
 CmInetMemInfo *info,
 Buffer *mBuf,
 MsgLen *len,
 U8 tos
 )
# 1663 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
{
   S32 ret;
   S32 retVal;
   S16 i;
   CmInetIovec txArr[15];
   S16 numDBufs;
   struct msghdr msg;
   MsgLen msgLen;
   U32 strtEndDBufNum;
   MsgLen unSentLen;
   Bool sentMsg;


   struct sockaddr_in remAddr;



   CmInetSockAddr *sockAddrPtr;
   U32 sizeOfAddr;



   MsgLen ioLen;

   ;
# 1698 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
   msgLen = 0;
   sockAddrPtr = 0L;
   sizeOfAddr = 0;


   if (dstAddr != 0L)
   {
# 1728 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
      remAddr.sin_family = 
# 1728 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                               2
# 1728 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                      ;
      remAddr.sin_port = htons(dstAddr->port);
      remAddr.sin_addr.s_addr = htonl(dstAddr->address);
      sizeOfAddr = sizeof(remAddr);
      sockAddrPtr = (CmInetSockAddr *)&remAddr;

   }

   ret = SFndLenMsg(mBuf, &msgLen);
   if (ret != 0)
   {
      return(1);
   }

   msg.msg_flags = 0;
   if (dstAddr != 0L)
   {
      msg.msg_name = (caddr_t)sockAddrPtr;
      msg.msg_namelen = sizeOfAddr;
   }
   else
   {
      msg.msg_name = 0L;
      msg.msg_namelen = 0;
   }

   msg.msg_control = 0L;
   msg.msg_controllen = 0;


   numDBufs = 15;
   retVal = 3;
   ret = 0;
   unSentLen = msgLen;
   strtEndDBufNum = 0;
   *len = 0;
   sentMsg = 0;


   do
   {



      retVal = egTLBuildSendIovec(mBuf, unSentLen, txArr, numDBufs, &i,
            &strtEndDBufNum, &ioLen);
      if (retVal != 0)
      {
         if (retVal == 3)
         {

            if (sockFd->type != 
# 1779 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                               SOCK_STREAM
# 1779 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                             )
            {

               ret = SCompressMsg(mBuf);
               if (ret != 0)
                  return(1);

               strtEndDBufNum = 0;



               ret = egTLBuildSendIovec(mBuf, unSentLen, txArr, numDBufs, &i,
                     &strtEndDBufNum, &ioLen);
               if (ret != 0)
                  return(1);

               retVal = 0;
            }
         }
         else
            return(1);
      }
   msg.msg_iov = txArr;
   msg.msg_iovlen = i;
# 1816 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
   ret = sendmsg(sockFd->fd, &msg, 0);


        if (-1 == ret)
        {
            if((
# 1821 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
               (*__errno_location ()) 
# 1821 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                     == 
# 1821 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                        11
# 1821 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                              ) ||
                    (
# 1822 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                    (*__errno_location ()) 
# 1822 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                          == 
# 1822 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                             11
# 1822 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                        ))
            {


                return(
# 1826 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
               11
# 1826 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
               );
            }

            printf("thUtlSendMsg() Failed : error(%d),"
                   " sockFd->fd(%ld)\n", 
# 1830 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                        (*__errno_location ())
# 1830 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                             , sockFd->fd);


            if ((
# 1833 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                (*__errno_location ()) 
# 1833 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                      == 
# 1833 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                         101
# 1833 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                    ))
            {
                return(1);
            }


            if ((
# 1839 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                (*__errno_location ()) 
# 1839 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                      == 
# 1839 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                         32
# 1839 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                              ) ||
                    (
# 1840 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                    (*__errno_location ()) 
# 1840 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                          == 
# 1840 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                             111
# 1840 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                         ) ||
                    (
# 1841 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                    (*__errno_location ()) 
# 1841 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                          == 
# 1841 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                             103
# 1841 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                         ))
            {
                *len = 0;
                return(20);
            }
            return(1);
        }


        *len += ret;




        if (ret < ioLen)
            return(19);

        unSentLen -= ret;

    } while (*len < msgLen);
   return(0);

}
# 2799 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
static S16 egTLBuildSendIovec
(
    Buffer *mBuf,
    MsgLen msgLen,
    CmInetIovec txArr[],
    S16 numDBufs,
    S16 *numIovElems,
    U32 *strtEndDBufNum,
    MsgLen *ioLen
)
# 2820 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
{
    S16 ret;
    MsgLen dLen;
    S16 iovIdx;
    Buffer *dBuf;
    Data *dPtr;
    MsgLen allocLen;
    U32 dBufsToSkip;


    (*numIovElems) = 0;
    iovIdx = 0;
    allocLen = 0;


    *ioLen = 0;


    ret = SInitNxtDBuf(mBuf);
    if (ret != 0)
    {
        return(1);
    }

    iovIdx = 0;
    txArr[iovIdx].iov_len = 0;

    if ((*strtEndDBufNum != 0))
    {

        dBufsToSkip = *strtEndDBufNum;

        while(dBufsToSkip)
        {
            ret = SGetNxtDBuf(mBuf, &dBuf);
            if (ret != 0)
                return(1);
            dBufsToSkip --;
        }
    }

    for (;;)
    {
        ret = SGetNxtDBuf(mBuf, &dBuf);
        if (ret == 0)
        {
            ret = SGetDataTx(dBuf, &dPtr, &dLen);
            if (ret != 0)
            {
                ret = 1;
                break;
            }

            txArr[iovIdx].iov_base = (S8 *)dPtr;
            txArr[iovIdx].iov_len = dLen;

            allocLen += dLen;
        }
        else if (ret == 2)
        {
            ret = 0;
            break;
        }
        else
        {
            ret = 1;
            break;
        }

        iovIdx += 1;

        if (iovIdx >= numDBufs)
        {
            if (allocLen >= msgLen)
                ret = 0;
            else
                ret = 3;
            break;
        }
    }

    (*numIovElems) = iovIdx;
    (*strtEndDBufNum) += iovIdx;

    *ioLen = allocLen;

    return(ret);

}
# 3251 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
static S16 egTLRecvMsgFromSocket
(
U32 sockFd,
CmTptAddr *remAddr,
CmInetMemInfo memInfo,
Buffer **mBuf
)







{
   Data recvBuf[6000];


   MsgLen recvBufLen;
   struct sockaddr_in frmAddr = {0};


   socklen_t frmLen = sizeof(frmAddr);
   U16 myLen=0;

   recvBufLen = recvfrom(sockFd, &recvBuf[0], sizeof(recvBuf), 0,
                        (struct sockaddr*)(&frmAddr), &frmLen);


   if((-1) == recvBufLen)
   {
      if((
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
         (*__errno_location ()) 
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
               == 
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                  11
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                        ) || (
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                              (*__errno_location ()) 
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                    == 
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                       11
# 3282 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                                  ))
      {
         return(2);
      }
      printf("\n Failed to receive from socketFD =[%lu] Error Code =[%s]",sockFd,strerror(
# 3286 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                                                                         (*__errno_location ())
# 3286 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                                                                              ));
      printf("\n Parameter passed sockFd=[%lu],MSG_DONTWAIT=[%d],frmLen=[%d],frmAddr Address=[%lu]",sockFd,
# 3287 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c" 3 4
                                                                                                          MSG_DONTWAIT
# 3287 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
                                                                                                                      , frmLen, (U32)&frmAddr);
      return(1);
   }
   myLen = (recvBuf[2] << 8) | recvBuf[3];

   if(recvBufLen - 8 != myLen)
   {
      printf("Len received = %d ... len inside buf = %02x %02x\n",recvBufLen, recvBuf[2],recvBuf[3]);
   }

   if(SGetMsg(memInfo.region, memInfo.pool,mBuf) != 0)
   {
      return(1);
   }
   remAddr->u.ipv4TptAddr.port = ntohs(frmAddr.sin_port);
   remAddr->u.ipv4TptAddr.address = ntohl(frmAddr.sin_addr.s_addr);
   remAddr->type = 4;

   SAddPstMsgMult(recvBuf, recvBufLen, *mBuf);
   return(0);
}
# 3457 "/home/mrehwald/Desktop/Radisys/lte_enb/src/egtpu/eg_socklayer.c"
 Void PrintEGTPStats(void)
{
   printf("EGTP: SendDropsReason19 = (%lu)\n",g_egtpSockDropsDueToReason19);
}
 Void ResetEGTPStats(void)
{
   g_egtpSockDropsDueToReason19 = 0;
}
