#Things to remember:
# 1. This database file is based on variable concept. variables can be defined 
#    with "<equals>" keyword. 
#    for Example xx <equals> yy, will expand xx as yy.  
# 2. Output of make must be <prefix>_acc. if not please move the make output to 
#    <prefix>_acc
# 3. token as <compile> <run>, various gen specific token as <VER> are case
#    insensitive. Use lower case as far as possible.
# 4. left hand and right hand value for <equals> is case sensitive. 
# 5. variables inside <VARIABLES> and <VARIABLESEND> are global variales. These 
#    must appear at top of database. 
# 6. All other context specific variables are termed as local variables. 
# 7. Local variables can not be defined between two gens. For example it is 
#    wrong to define the local variable abc as below:
#    <compile>
#       cmp <equals> cmp_val
#       <00>
#            ...
#       <00_end>
#       abc <equals> bcd
#       <01>    
#            ..
#       <01_end>
#     However cmp defination in above example is correct to define variable for 
#     all compile options
# 
# 8. Expand logic is as follow:
#    First Global variables will be expanded. Form Down to up. 
#    It means down variable can make use of varible defined before this.
#    Local variable will be expanded at last. From Down to up
#    It Means global variable can not be used inside the Local Variables.  
#
# 9. tcm_repstr will replace the first argument value as second argument 
#    third and forth argument are in file and out file respectively.
#    tcm_repstr without any argument will display the detail Usage of this script.
#
# 10. Validation logic must exit with 0 in case of passed, and must exit with 1
#     in case of failure. The same logic is applied for compile as well as run 
#     validation logic 
# 
# 11. It is must to have "ver" as one of the gen
#
# 12. Please ensure your $path resolves tcm_repstr
#
# 13. This database is parsed by script parse_db. Please type parse_db without 
#     any argument to get uasage details of this parser script.
#
# 14. Please ensure to provide as mony comments as possible in your database
#     from maintainability prospective. Any line with first non whiteline char as
#     # will be treated as comment line.
#   
# 15. Cantact shelesh.bansal@ccpu.com for support.
#


<VARIABLES>

#Please edit your product details 
partno <equals> 1000361
prefix <equals> sz

#Please define your base product option here, which is applicable to all gens
PRDOPTS_BASE <equals> -DSZ -DCM_PASN_ESC_SUPPORT -DCM_PASN_CLASS_IDTYPE -DCM_PASN_DBG -DLCSZT -DLCLSZ -DLCSCT -DLCSMSZMILSZ -DLCSZMILSZ -DLCUZLISZT -DLWLCSZT -DLCHIUIHIT -DLCSBLIHIT -DLCHIMILHI -DLCSMHIMILHI -DLCLHI -DLCSBUISCT -DLCDMUISCT


PRDOPTS <equals> "<PRDOPTS_BASE> <PRDOPT_ADD>"  

#this is the command to replace make file. Please ensure your $path resolves this.
#Type tcm_repstr without any argumet for detail usage help. 
generate make file <equals> tcm_repstr PRDOPTS <PRDOPTS> 


#This is the sample template. Please edit as required

#Compile command section
env_gen <equals> <envdot><gen>
use_envopt <equals> mv envopt.acc<env_gen> envopt.h

#domak <equals> make -f do<prefix>.mak.<gen>
domak1 <equals> make -f do<prefix>.mak clean
domak2 <equals> make -f do<prefix>.mak
domak <equals> <domak1>\n<domak2>\n

#generate the make file
mk_make1 <equals> <generate make file> <prefix>.mak <prefix>new.mak
mk_make2 <equals> mv <prefix>.mak <prefix>new1.mak
mk_make3 <equals> cp <prefix>new.mak <prefix>.mak
mk_make <equals> <mk_make1>\n<mk_make2>\n<mk_make3>\n

#details for make commands
mkcmd_base <equals>   make -j -f <prefix>.mak 
mkcmd_clean <equals> <mkcmd_base> clean
mkcmd_acc <equals> <mkcmd_base> BLDENV=<htype>_acc acc 
mkcmd <equals> <mkcmd_clean>\n<mkcmd_acc> 


#restore the original makefile
restore_make <equals> cp <prefix>new1.mak <prefix>.mak 

#final make command
std_mak <equals>  <use_envopt> \n <mk_make> \n <domak> \n <mkcmd> \n <restore_make> 


#compile validation logic
val_logic1 <equals>if test -e <prefix>_acc
val_logic2 <equals>then \n    exit 5
val_logic3 <equals>else \n    exit 1 \nfi

val_logic <equals> <val_logic1> \n<val_logic2> \n<val_logic3>



#standard run command

std_run <equals> <prefix>_acc -g 1 > <prefix>_acc_log 2>&1

#run validation command
#this is sample validation command. This command is looking for 
# "Total tests failed : 0" in output file as a validation proof. 
#This may not be same for your product.  
val_run1 <equals> grep "Total tests failed : 0" <prefix>_acc_log
val_run2 <equals> case $? in 1) exit 5 ;; 
val_run3 <equals> 0) exit 1;; esac

val_run <equals> <val_run1>\n<val_run2>\n<val_run3>\n  


<VARIABLESend>

<LINUX>
        htype <equals> lnx
<LINUXend>      

<gnu>
        htype <equals> gnu
<gnuend>

<sol>
        htype <equals> sol
<solend>

<compile>
    <ver> 
        PRDOPT_ADD <equals> -DCM_PASN_DBG -DSZ_ENB -DSZ_MME 
          gen <equals>03    
          envdot <equals> 
          <main> 
                <std_mak>
          <mainend>

          <val> 
                <val_logic>     
          <valend>
    <verend>
    <00>
        PRDOPT_ADD <equals> -DCM_PASN_DBG -DSZ_ENB
          gen <equals> 00
          envdot <equals>
          <main>
                <std_mak>
          <mainend>

          <val>
                <val_logic>
          <valend>
    <00end>

    <01>
        PRDOPT_ADD <equals> -DCM_PASN_DBG -DSZ_MME
          gen <equals> 01
          envdot <equals>
          <main>
                <std_mak>
          <mainend>

          <val>
                <val_logic>
          <valend>
    <01end>

    <02>
        PRDOPT_ADD <equals> -DCM_PASN_DBG -DSZ_ENB -DSZ_MME 
          gen <equals> 02
          envdot <equals>
          <main>
                <std_mak>
          <mainend>

          <val>
                <val_logic>
          <valend>
    <02end>
<compileend>

<run>
    <ver> 
          <main> 
                <std_run>
          <mainend>

          <val> 
                <val_run>     
          <valend>
    <verend>
    <00>
          <main>
                <std_run>
          <mainend>

          <val>
                <val_run>
          <valend>
    <00end>
    <01>
          <main>
                <std_run>
          <mainend>

          <val>
                <val_run>
          <valend>
    <01end>
    <02>
          <main>
                <std_run>
          <mainend>

          <val>
                <val_run>
          <valend>
    <02end>
<runend>
