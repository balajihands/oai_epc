#/********************************************************************20**
#
#     Name:    S1AP 
#
#     Type:    XML Test File
#
#     Desc:    XML Based Test Cases
#
#     File:    szac_tc2.xml
#
#     Sid:     
#
#     Prg:     Moses
#
#*********************************************************************21*/

# DO NOT DELETE THIS LINE -- TC number generation script depends on it.
# xyzabcstart=2:mn:szac_tc2.xml

#
#
#       Test:    11.1
#
#       Desc:    Verify the unsuccessful configuration when General 
#                configuration is done with invalid values 
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.1">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
           "Verify the unsuccessful configuration when General"
           "configuration is done with invalid values" 
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
   </tapa.cfg>

   <tapa.test>
      # Send an General configuration request
      <tapa.send>
         <tapa.lsz.cfg.gen nmbSctSaps="0"/>
      </tapa.send>

      # Receive the confirm for the general configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>
      # Send an General configuration request
      <tapa.send>
         <tapa.lsz.cfg.gen nmbSztSaps="0"/>
      </tapa.send>

      # Receive the confirm for the general configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>
      # Send an General configuration request
      <tapa.send>
         <tapa.lsz.cfg.gen nmbPeer="0"/>
      </tapa.send>

      # Receive the confirm for the general configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>
      # Send an General configuration request
      <tapa.send>
         <tapa.lsz.cfg.gen nmbConn="0"/>
      </tapa.send>

      # Receive the confirm for the general configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>
      # Send an General configuration request
      <tapa.send>
         <tapa.lsz.cfg.gen timeRes="0"/>
      </tapa.send>

      # Receive the confirm for the general configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send an General configuration request
      <tapa.gen.cfg/>

      # Send an General configuration request
      <tapa.send>
         <tapa.lsz.cfg.gen element="100" tc="TRUE"/>
      </tapa.send>

      # Receive the confirm for the general configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_ELMNT"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.2
#
#       Desc:    Verify the unsuccessful configuration when protcol Cfg is 
#                configured with invalid values 
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.2">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify the unsuccessful configuration when s1ap is"
          "configured with invalid values."                   
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef>
      </tapa.ifndef>

      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an protocol configuration request
      <tapa.send>
         <tapa.lsz.cfg.prot protNode="SZAC_LSZ_ENB_PRC0" />
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LCM_REASON_GENCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an General configuration request
      <tapa.gen.cfg/>

      # Send an protocol configuration request with invalid node
      <tapa.send>
         <tapa.lsz.cfg.prot protNode="SZAC_LSZ_ENB_PRC0" 
                            nodeType="SZAC_LSZ_INV_NODE"
                            tc="TRUE"/>
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.3
#
#       Desc:    Verify that error are generated for invalid configurations 
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.3">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that errors are generated for invalid configurations "
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.usap />
      </tapa.send>

      # Receive the confirm for the szt sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LCM_REASON_GENCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an General configuration request
      <tapa.gen.cfg/>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.usap />
      </tapa.send>

      # Receive the confirm for the szt sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LSZ_REASON_PROTCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.usap sapId="1000"/>
      </tapa.send>

      # Receive the confirm for the szt sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LCM_REASON_EXCEED_CONF_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.4
#
#       Desc:    Validate the generation of error for invalid configurations
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.4">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify the generation of error for invalid configuraions"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef>
      </tapa.ifndef>

      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an sct sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.lsap peerNode="SZAC_LSZ_ENB_PRC0"/>
      </tapa.send>

      # Receive the confirm for the sct sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LCM_REASON_GENCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an General configuration request
      <tapa.gen.cfg/>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.lsap peerNode="SZAC_LSZ_ENB_PRC0"/>
      </tapa.send>

      # Receive the confirm for the sct sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LSZ_REASON_PROTCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.lsap tBndTmr.enb="FALSE" peerNode="SZAC_LSZ_MME_PRC1"/>
      </tapa.send>

      # Receive the confirm for the sct sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.lsap suId="1000" peerNode="SZAC_LSZ_MME_PRC1"/>
      </tapa.send>

      # Receive the confirm for the sct sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm  status="LCM_PRIM_NOK"
                           reason="LCM_REASON_EXCEED_CONF_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.5
#
#       Desc:    Verify the unsuccessful configuration when peer is 
#                configured with invalid values.
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.5">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify the unsuccessful configuration when peer is"
          "configured with invalid values."                   
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1" />
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                           reason="LCM_REASON_GENCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an General configuration request
      <tapa.gen.cfg/>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1" />
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LSZ_REASON_PROTCFG_NOT_DONE"/>
      </tapa.expect>

      # Do protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1" />
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LSZ_REASON_LSAPCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an Sct Sap configuration request
      <tapa.sctsap.cfg/>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1" 
                            sapId  =  "4"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LSZ_REASON_LSAPCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1" locOutStrms="1"/>
      </tapa.send>
      # Receive the confirm
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LSZ_REASON_LSAPCFG_NOT_DONE"/>
      </tapa.expect>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.usap />
      </tapa.send>
      # Receive the confirm for the szt sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>


      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1" 
                            nodeType  =  "SZAC_LSZ_INV_NODE"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      <tapa.send>
         <tapa.lsz.cfg.peer nmbPeers  =  "0"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason = "LCM_REASON_EXCEED_CONF_VAL"/>
      </tapa.expect>

      # Send an peer config request with invalid comProcStrmVal
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1"
                            comProcStrmPres="TRUE"
                            comProcStrmVal="4"/>
      </tapa.send>
      # Receive the confirm 
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason = "LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send an peer config request with invalid sap
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1"
                            sapId="4000"/>
      </tapa.send>

      # Receive the confirm 
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason = "LCM_REASON_EXCEED_CONF_VAL"/>
      </tapa.expect>

      # Send an peer config request with same nodetype
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1"
                            nodeType="SZAC_NODE_ENB"/>
      </tapa.send>

      # Receive the confirm 
      <tapa.expect>
         <tapa.lsz.cfgcfm status="LCM_PRIM_NOK"
                          reason = "LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send a sucessful peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1"
                            comProcStrmPres="TRUE"
                            comProcStrmVal="2"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm/>
      </tapa.expect>

      # Send an peer reconfiguration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg= "SZAC_LSZ_MME_PRC1" locOutStrms="1"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />

         <tapa.lsz.staInd category="LCM_CATEGORY_PROTOCOL"
                          event = "LCM_EVENT_LYR_SPECIFIC"
                          cause = "LCM_CAUSE_LYR_SPECIFIC"
                          type   =  "LSZ_USTA_DGNVAL_PEER"
                          typeId =  "2"    
                          procId = "SZAC_ENB_PROC" />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.6
#
#       Desc:    Verify the succesful reconfiguration of protcol Cfg 
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.6">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify the unsuccessful configuration when s1ap is"
          "configured with invalid values."                   
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      # Send an General configuration request
      <tapa.gen.cfg/>
      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      # Send an Szt Sap configuration request
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an prot configuration request
      <tapa.send>
         <tapa.lsz.cfg.prot protNode="SZAC_LSZ_ENB_PRC0"/>
      </tapa.send>

      # Receive the confirm for the prot request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.7
#
#       Desc:    Verify the successful reconfiguration of SZT SAP
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.7">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify the successful reconfiguration of SZT SAP"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      # Send an General configuration request
      <tapa.gen.cfg/>
      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      # Send an Szt Sap configuration request
      <tapa.sztsap.cfg/>
      # Send an Sct Sap configuration request
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.usap />
      </tapa.send>

      # Receive the confirm for the szt sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.8
#
#       Desc:    Verify the succesful reconfiguration of Sct Sap
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.8">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify the successful reconfiguration of Sct Sap"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      # Send an General configuration request
      <tapa.gen.cfg/>
      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      # Send an Szt Sap configuration request
      <tapa.sztsap.cfg/>
      # Send an Sct Sap configuration request
      <tapa.sctsap.cfg/>
      # Send an peer configuration request
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an sct sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.lsap peerNode="SZAC_LSZ_MME_PRC1"/>
      </tapa.send>

      # Receive the confirm for the sct sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.9
#
#       Desc:    Verify the successful reconfiguration of peer
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.9">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify the successful re configuration of peer"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      # Send an General configuration request
      <tapa.gen.cfg/>
      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      # Send an Szt Sap configuration request
      <tapa.sztsap.cfg/>
      # Send an Sct Sap configuration request
      <tapa.sctsap.cfg/>
      # Send an peer configuration request
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Peer reconfiguration
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    11.10
#
#       Desc:    Verify that the general node statistics provides the 
#                correct values.
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc1.xml
#
<tapa.testcase id="11.10">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify that the general node statistics provides the correct values"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
           <tapa.flag id="SZAC_ENB"/>
           <tapa.flag id="SZAC_MME"/>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZGEN" />
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm />
      </tapa.expect>

      # Send an sts req with zero sts
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZGEN" action="ZEROSTS" />
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm />
      </tapa.expect>

      # Send an sts req with zero sts
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZPROT" tc="TRUE"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_ELMNT"/>
      </tapa.expect>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZGEN" actionErr="5"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    11.11
#
#       Desc:    Verify that the peer node statistics provides the 
#                correct values.
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
<tapa.testcase id="11.11">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify that the peer node statistics provides the correct values"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZPEER" peerId="2"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm />
      </tapa.expect>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZPEER" peerId="2"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.12
#
#       Desc:    Verify that the ZEROSTS action, zeros out the counters
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.12">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify that the ZEROSTS action zeros out the counters"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZPEER" peerId ="2" 
                           action = "ZEROSTS"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.13
#
#       Desc:    Verify that the invalid subaction or invalid option
#                generates errors.
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.13">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
           "Verify that the invalid subaction or invalid option"
           "generates errors."                                  
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request with invalid subaction
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZPEER" peerId="2"
                           action = "ZEROSTS"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm />
      </tapa.expect>


   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.14
#
#       Desc:    Verify that the Sts request for a peer not cofigured
#                generates an error.
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.14">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
           "Verify that the Sts request for a peer not cofigured "
           "generates an error."                                  
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZPEER" actionErr = "5"
                           peerId = "2"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm status = "LCM_PRIM_NOK"
                          reason = "LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZPEER" action = "ZEROSTS"
                           peerId = "3"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.stscfm status = "LCM_PRIM_NOK"
                          reason = "LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.15
#
#       Desc:    Verify that the Usap Status request returns the
#                expected values
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.15">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the Usap Status request returns the"
         "expected values"                                  
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZSZTSAP" 
                           sapId =  "0"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm sapId="0" sapState="LSZ_SAP_CFG"/>
      </tapa.expect>

      # Send a SZT sta req with invalid sapId
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZSZTSAP" 
                           sapId =  "5"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send a STA REQ for sapId > max sapID
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZSZTSAP" 
                           sapId =  "50"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send a STA REQ for invalid element
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZPROT" tc="TRUE"/>
      </tapa.send>
      # Receive the negative confirm
      <tapa.expect>   
         <tapa.lsz.stacfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_ELMNT"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.16
#
#       Desc:    Verify that the Lsap Status request returns the
#                expected values. Send an status request for a sap
#                not yet configured and see that an error is generated. 
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.16">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the Lsap Status request returns the"
         "expected values"                                  
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZSCTSAP" 
                           sapId =  "0"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm sapId="0" sapState="LSZ_SAP_ISBOUND"/>
      </tapa.expect>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZSCTSAP" 
                           sapId =  "1"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm status = "LCM_PRIM_NOK"
                          reason = "LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send a STA REQ for sapId > max sapID
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZSCTSAP" 
                           sapId =  "50"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.17
#
#       Desc:    Verify that the Peer Status request returns the
#                expected values
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.17">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the Peer Status request returns the"
         "expected values"                                  
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
      <tapa.sz.mme1.init/>
      # Send Bind Req at eNB
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_ENB_PROC" spId="0" suId="0"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at eNB 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_ENB_PROC" spId="0" suId="0" status="1"/> 
      </tapa.expect>

      # Send Bind Req at MME
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_MME_PROC" spId="1" suId="1"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at MME 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_MME_PROC" spId="1" suId="1" status="1"/> 
      </tapa.expect>

   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an peer status request
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZPEER" peerId="2"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm peerStaInfo_0_peerId="2" peerStaInfo_0_peerState="4" />
      </tapa.expect>

      # Send a PEER STA REQ with invalid peerID
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZPEER" peerId="5"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send a PEER STA REQ with invalid peerID peerId > maxPeer
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZPEER" peerId="100"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send a PEER STA REQ with invalid nmbPeers > maxPeer
      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZPEER" nmbPeer="100"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>   
         <tapa.lsz.stacfm status="LCM_PRIM_NOK"
                          reason="LCM_REASON_EXCEED_CONF_VAL"/>
      </tapa.expect>


      # Get the status of the peer when association is up
      # S1 setup procedure
      <tapa.s1.init/>  

      <tapa.send>
         <tapa.lsz.sta.req staType= "STSZPEER" peerId="2"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      #sz002.301: Expect the correct spassocid
      <tapa.expect>   
         <tapa.lsz.stacfm peerId="2" peerState="2" 
                          spAssocId="0" connected="TRUE"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sz.mme1.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.18
#
#       Desc:    Verify that the sap traces are sucessfully enabled.
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.18">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the sap traces are are successfully enabled"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
      # Bring up MME 
      <tapa.sz.mme1.init/>

      # Send Bind Req at eNB
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_ENB_PROC" spId="0" suId="0"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at eNB 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_ENB_PROC" spId="0" suId="0" status="1"/> 
      </tapa.expect>

      # Send Bind Req at MME
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_MME_PROC" spId="1" suId="1"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at MME 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_MME_PROC" spId="1" suId="1" status="1"/> 
      </tapa.expect>

   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send lower sap trc enable
      <tapa.send>
         <tapa.lsz.cntrl.lSapTrc lSapId="0"
                                  action="AENA"/>
      </tapa.send>

      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      # Send an upper sap delete request
      <tapa.send>
         <tapa.lsz.cntrl.lSapTrc lSapId="1"  procId="SZAC_MME_PROC"
                                  action="AENA" />
      </tapa.send>

      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm  procId="SZAC_MME_PROC"/>
      </tapa.expect>

      # Send an S1 SETUP REQUEST message from eNB to MME
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_SETUP_REQ" procId="SZAC_ENB_PROC" peerId="2" spId="0"/>
      </tapa.send>

      # Expect Status Indiaction ASSOC UP at MME & eNB 
      <tapa.expset>
         <tapa.szt.staind procId="SZAC_MME_PROC" peerId="1" suId="1" staType="SZT_STA_TYPE_ASSOC" reason="SZT_REASON_RCVD_COMM_UP" status="SZT_STATUS_ASSOC_UP"/>

         <tapa.lsz.staInd category="LCM_CATEGORY_PROTOCOL"
                          event = "LSZ_EVENT_LI_ASSOC_CFM"
                          cause = "LSZ_CAUSE_ASSOC_UP"
                          type   =  "LSZ_USTA_DGNVAL_PEER"
                          typeId =  "1"    
                          procId = "SZAC_MME_PROC"                 />
         <tapa.szt.staind procId="SZAC_ENB_PROC" peerId="2" suId="0" staType="SZT_STA_TYPE_ASSOC" reason="SZT_REASON_RCVD_COMM_UP" status="SZT_STATUS_ASSOC_UP"/>
         <tapa.lsz.staInd category= "LCM_CATEGORY_PROTOCOL"
                          event =   "LSZ_EVENT_LI_ASSOC_CFM"
                          cause =   "LSZ_CAUSE_ASSOC_UP"
                          type   =  "LSZ_USTA_DGNVAL_PEER"
                          typeId =  "2"      
                          procId = "SZAC_ENB_PROC"                 />
      # Expect Trace Indication(while sending message to lower) 
         <tapa.lsz.trcInd procId="SZAC_ENB_PROC"/>
      # Expect Trace Indication 
         <tapa.lsz.trcInd procId="SZAC_MME_PROC"/>
      # Expect S1 SETUP REQUEST message at MME
         <tapa.szt.udatind eventType="SZT_MSG_ID_SETUP_REQ" procId="SZAC_MME_PROC" peerId="1" suId="1"/>
      </tapa.expset>

		<!--
      # Expect Trace Indication(while sending message to lower) 
      <tapa.expect>
         <tapa.lsz.trcInd procId="SZAC_ENB_PROC"/>
      </tapa.expect>

      # Expect Trace Indication 
      <tapa.expect>
         <tapa.lsz.trcInd procId="SZAC_MME_PROC"/>
      </tapa.expect>

      # Expect S1 SETUP REQUEST message at MME
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_SETUP_REQ" procId="SZAC_MME_PROC" peerId="1" suId="1"/>
      </tapa.expect>
		-->

      # Send an S1 SETUP RESPONSE Msg from MME to eNB
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_SETUP_RSP" procId="SZAC_MME_PROC" peerId="1" spId="1"/>
      </tapa.send>

      # Expect Trace Indication 
      <tapa.expect>
         <tapa.lsz.trcInd procId="SZAC_MME_PROC"/>
      </tapa.expect>

      # Expect Trace Indication 
      <tapa.expect>
         <tapa.lsz.trcInd procId="SZAC_ENB_PROC"/>
      </tapa.expect>

      # Expect S1 SETUP RESPONSE Msg at eNB
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_SETUP_RSP" procId="SZAC_ENB_PROC" peerId="2" suId="0"/>
      </tapa.expect>

      <tapa.send>
         <tapa.lsz.cntrl.lSapTrc lSapId="0"
                                  action="ADISIMM"/>
      </tapa.send>

      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>
      
      <tapa.delay delay = "5"/>
      # Send an upper sap delete request
      <tapa.send>
         <tapa.lsz.cntrl.lSapTrc lSapId="1"  procId="SZAC_MME_PROC"
                                  action="ADISIMM"/>
      </tapa.send>

      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm procId="SZAC_MME_PROC"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.19
#
#       Desc:    Verify that the alarm are disabled
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.19">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the alarm are disabled"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send a control request to enable alarms
      <tapa.send>
         <tapa.lsz.cntrl.usta action="ADISIMM"/>
      </tapa.send>

      # Receive the confirm for the alarms.
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      # Send an lower sap bind request
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="AUBND_DIS"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      # Sending an control req with invalid element
      <tapa.send>
         <tapa.lsz.cntrl.usta element="100" tc="TRUE"/>
      </tapa.send>
      # Receive the confirm for the alarms.
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_ELMNT"/>
      </tapa.expect>

      # Sending an control reqest with invalid subaction for AENA
      <tapa.send>
         <tapa.lsz.cntrl.usta subaction="SAELMNT" tc="TRUE"/>
      </tapa.send>
      # Receive the confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_SUBACTION"/>
      </tapa.expect>

      # Sending an control reqest with invalid subaction for ADISIMM
      <tapa.send>
         <tapa.lsz.cntrl.usta action="ADISIMM" subaction="SAELMNT" tc="TRUE"/>
      </tapa.send>
      # Receive the confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_SUBACTION"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.20
#
#       Desc:    Verify that the the sap is successfully bound
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.20">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the sap is successfully bound"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Send an General configuration request
      <tapa.gen.cfg/>
      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      # Send an Szt Sap configuration request
      <tapa.sztsap.cfg/>
      # Send an Sct Sap configuration request
      <tapa.sctsap.cfg/>
      # Send an peer configuration request
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an lower sap bind request
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="LSZ_BND_ENA"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      <tapa.sz.sct.delay delay="5"/>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.21
#
#       Desc:    Verify that the the sap is successfully unbound
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.21">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the sap is successfully unbound"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      <tapa.gen.cfg/>
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      <tapa.sztsap.cfg/>
      <tapa.sctsap.cfg/>
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
      <tapa.lSap.bnd lSapId="0"/>
      <tapa.sz.sct.delay delay="5"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an lower sap bind unbind
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="AUBND_DIS"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      <tapa.sz.sct.delay delay="5"/>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.22
#
#       Desc:    Verify the handling of the control request for Lower sap with
#       invalid Sap Id, Invalid Action, Invalid Sub-Action
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.22">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify the handling of the control request for Lower sap with"
         "invalid Sap Id, Invalid Action, Invalid Sub-Action"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      <tapa.gen.cfg/>
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      <tapa.sztsap.cfg/>
      <tapa.sctsap.cfg/>
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Try to unbind an already unbound sap
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="AUBND_DIS"/>
      </tapa.send>
      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      # Invalid sapId
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="7"
                              action="ADEL"/>
      </tapa.send>
      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Invalid sapId
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="100"
                              action="ADEL"/>
      </tapa.send>
      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Invalid ACTION
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="AMODIFY"/>
      </tapa.send>
      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_ACTION"/>
      </tapa.expect>

      # Invalid SUBACTION
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="AENA"
                              subaction="ADBG"/>
      </tapa.send>
      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_SUBACTION"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.23
#
#       Desc:    Verify that the lower sap  is successfully deleted
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.23">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the lower sap  is successfully deleted"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      <tapa.gen.cfg/>
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      <tapa.sztsap.cfg/>
      <tapa.sctsap.cfg/>
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an lower sap bind unbind
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="ADEL"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>
#
#
#       Test:    11.24
#
#       Desc:    Verify that the upper sap is successfully unbound
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.24">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the upper sap is successfully unbound"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      <tapa.gen.cfg/>
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      <tapa.sztsap.cfg/>
      <tapa.sctsap.cfg/>
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send Bind Req at eNB
      <tapa.send>
         <tapa.szt.bndreq spId="0" suId="0"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at eNB 
      <tapa.expect>
         <tapa.szt.bndcfm spId="0" suId="0" /> 
      </tapa.expect>

      # Send an upper sap delete request
      <tapa.send>
         <tapa.lsz.cntrl.uSap uSapId="0"
                              action="AUBND_DIS"/>
      </tapa.send>

      # Receive the confirm confirm
      <tapa.expset>
         <tapa.szt.staind procId="SZAC_ENB_PROC" peerId="2" suId="0" 
                              staType="SZT_STA_TYPE_ASSOC" reason="SZT_REASON_UBND_SAP"/>
         <tapa.lsz.cntrlcfm />
      </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.25
#
#       Desc:    Verify that the upper sap is successfully deleted
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.25">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the upper sap is successfully deleted"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an upper sap delete request
      <tapa.send>
         <tapa.lsz.cntrl.uSap uSapId="0"
                              action="ADEL"/>
      </tapa.send>

      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.26
#
#       Desc:    Verify the handling of the control request for Upper sap with
#       invalid Sap Id, Invalid Action, Invalid Sub-Action
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.26">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify the handling of the control request for Upper sap with"
         "invalid Sap Id, Invalid Action, Invalid Sub-Action"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an upper sap invalid cntrl request
      <tapa.send>
         <tapa.lsz.cntrl.uSap uSapId="0"
                              action="ABND_ENA"/>
      </tapa.send>

      # Receive the negative confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_ACTION"/>
      </tapa.expect>

      # Send an upper sap  cntrl request with unconfigured sap
      <tapa.send>
         <tapa.lsz.cntrl.uSap uSapId="3"
                              action="ADEL"/>
      </tapa.send>

      # Receive the negative confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send an upper sap invalid cntrl request
      <tapa.send>
         <tapa.lsz.cntrl.uSap uSapId="100"
                              action="ADEL"/>
      </tapa.send>

      # Receive the negative confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.27
#
#       Desc:    Verify that the peer can be 
#                sucessfully deleted
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.27">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the peer be "
         "successfully deleted"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
      <tapa.sz.mme1.init/>

      # Send Bind Req at eNB
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_ENB_PROC" spId="0" suId="0"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at eNB 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_ENB_PROC" spId="0" suId="0" status="1"/> 
      </tapa.expect>

      # Send Bind Req at MME
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_MME_PROC" spId="1" suId="1"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at MME 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_MME_PROC" spId="1" suId="1" status="1"/> 
      </tapa.expect>

   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an S1 SETUP REQUEST message from eNB to MME
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_SETUP_REQ" procId="SZAC_ENB_PROC" peerId="2" spId="0"/>
      </tapa.send>

      # Expect Status Indiaction ASSOC UP at MME & eNB 
      <tapa.expset>
         <tapa.szt.staind procId="SZAC_MME_PROC" peerId="1" suId="1" staType="SZT_STA_TYPE_ASSOC" reason="SZT_REASON_RCVD_COMM_UP" status="SZT_STATUS_ASSOC_UP"/>
         <tapa.lsz.staInd category="LCM_CATEGORY_PROTOCOL"
                          event = "LSZ_EVENT_LI_ASSOC_CFM"
                          cause = "LSZ_CAUSE_ASSOC_UP"
                          type   =  "LSZ_USTA_DGNVAL_PEER"
                          typeId =  "1"    
                          procId = "SZAC_MME_PROC"                 />
         <tapa.szt.staind procId="SZAC_ENB_PROC" peerId="2" suId="0" staType="SZT_STA_TYPE_ASSOC" reason="SZT_REASON_RCVD_COMM_UP" status="SZT_STATUS_ASSOC_UP"/>
         <tapa.lsz.staInd category= "LCM_CATEGORY_PROTOCOL"
                          event =   "LSZ_EVENT_LI_ASSOC_CFM"
                          cause =   "LSZ_CAUSE_ASSOC_UP"
                          type   =  "LSZ_USTA_DGNVAL_PEER"
                          typeId =  "2"      
                          procId = "SZAC_ENB_PROC"                 />
      </tapa.expset>

      # Expect S1 SETUP REQUEST message at MME
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_SETUP_REQ" procId="SZAC_MME_PROC" peerId="1" suId="1"/>
      </tapa.expect>

      # Send an S1 SETUP RESPONSE Msg from MME to eNB
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_SETUP_RSP" procId="SZAC_MME_PROC" peerId="1" spId="1"/>
      </tapa.send>

      # Expect S1 SETUP RESPONSE Msg at eNB
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_SETUP_RSP" procId="SZAC_ENB_PROC" peerId="2" suId="0"/>
      </tapa.expect>

      # Send an peer delete request
      <tapa.send>
         <tapa.lsz.cntrl.peer  action="ADEL" sAction="SAELMNT" 
                               peerId="2"/>
      </tapa.send>

      # sz008.301 
      #expect status indication
      <tapa.expect>
         <tapa.szt.staind procId="SZAC_MME_PROC" status="SZT_STATUS_ASSOC_DOWN"  staType="SZT_STA_TYPE_ASSOC" 
            peerId="1" reason="SZT_STATUS_ASSOC_DOWN" suId="1" />
      </tapa.expect>
        
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.28
#
#       Desc:    Negative control requests for peer
#                
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.28">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the negative control requests "
         "for the peer have negative confirms"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
      <tapa.sz.mme1.init/>

      # Send Bind Req at eNB
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_ENB_PROC" spId="0" suId="0"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at eNB 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_ENB_PROC" spId="0" suId="0" status="1"/> 
      </tapa.expect>

      # Send Bind Req at MME
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_MME_PROC" spId="1" suId="1"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at MME 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_MME_PROC" spId="1" suId="1" status="1"/> 
      </tapa.expect>

   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send Cntrl Req with invalid peer
      <tapa.send>
         <tapa.lsz.cntrl.pNodeTrc peerId="4"
                               action="AENA" subaction="SATRC" />
      </tapa.send>
      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send Cntrl Req with invalid peer > maxPeer
      <tapa.send>
         <tapa.lsz.cntrl.pNodeTrc peerId="400"
                               action="AENA" subaction="SATRC" />
      </tapa.send>
      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

      # Send Cntrl Req with invalid subaction
      <tapa.send>
         <tapa.lsz.cntrl.pNodeTrc peerId="2" tc="TRUE"
                               action="AENA" subaction="SAELMNT" />
      </tapa.send>
      # Receive the control confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_SUBACTION"/>
      </tapa.expect>

      # Send Cntrl Req with invalid peer id for deletion
      <tapa.send>
         <tapa.lsz.cntrl.peer  action="ADEL" subaction="SAELMNT" 
                               peerId_0="4"/>
      </tapa.send>
     # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      # Send Cntrl Req with no peer id for deletion
      <tapa.send>
         <tapa.lsz.cntrl.peer  action="ADEL" subaction="SAELMNT" 
                               numPeer="0"/>
      </tapa.send>
      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      # Send Cntrl Req with invalid subaction
      <tapa.send>
         <tapa.lsz.cntrl.peer  action="ADEL" subaction="SATRC" 
                               peerId_0="2" tc="TRUE"/>
      </tapa.send>
      # Receive the control confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_SUBACTION"/>
      </tapa.expect>

      # Send Cntrl Req with invalid action
      <tapa.send>
         <tapa.lsz.cntrl.peer  action="AMODIFY" subaction="SAELMNT" 
                               peerId_0="2" tc="TRUE"/>
      </tapa.send>
      # Receive the confirm confirm
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_ACTION"/>
      </tapa.expect>

      # TRY TO DELETE THE PEER IN RESET STATE

      # S1 setup procedure
      <tapa.s1.init/>  

      # Initial Context Setup Procedure
      <tapa.uecxt.init usrConnId="1" spConnId="1"/>
      <tapa.uecxt.init usrConnId="2" spConnId="2"/>
      <tapa.uecxt.init usrConnId="3" spConnId="3"/>

      # Send an RESET message from MME to eNB
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_RESET" procId="SZAC_MME_PROC" peerId="1" spId="1" enbId1="1" mmeId1="1" enbId2="2" mmeId2="2" lstCnt="2"/>
      </tapa.send>

      # Expect RESET Msg at eNB
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_RESET" procId="SZAC_ENB_PROC" peerId="2" suId="0"/>
      </tapa.expect>

      # Send an RESET message from eNB to MME
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_RESET" procId="SZAC_ENB_PROC" peerId="2" spId="0" enbId1="1" mmeId1="1" lstCnt="1"/>
      </tapa.send>

      # Expect RESET ACK Msg at eNB
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_RESET_ACK" procId="SZAC_ENB_PROC" peerId="2" suId="0"/>
      </tapa.expect>

      # Send an RESET ACK Msg from eNB to MME
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_RESET_ACK" procId="SZAC_ENB_PROC" peerId="2"/>
      </tapa.send>

      # Expect RESET ACK Msg at MME
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_RESET_ACK" procId="SZAC_MME_PROC" peerId="1" suId="1" />
      </tapa.expect>

      # Send an peer delete request
      <tapa.send>
         <tapa.lsz.cntrl.peer  action="ADEL" sAction="SAELMNT" 
                               peerId_0="2"/>
      </tapa.send>
     # sz008.301 
      #expect status indication
      <tapa.expect>
         <tapa.szt.staind procId="SZAC_MME_PROC" status="SZT_STATUS_ASSOC_DOWN"  staType="SZT_STA_TYPE_ASSOC" 
            peerId="1" reason="SZT_STATUS_ASSOC_DOWN" suId="1"/>
      </tapa.expect>

     </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.29
#
#       Desc:    Verify that its not possible to bind a sap 
#                with invalid sapId
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.29">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that it is not possible to bind a sap with an "
         "invalid sapId"                                  
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Send an General configuration request
      <tapa.gen.cfg/>
      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      # Send an Szt Sap configuration request
      <tapa.sztsap.cfg/>
      # Send an Sct Sap configuration request
      <tapa.sctsap.cfg/>
      # Send an peer configuration request
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an lower sap bind request
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="1"
                              action="LSZ_BND_ENA"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.30
#
#       Desc:    Verify that its not possible to bind an already bound sap
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.30">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that its not possible to bind an already bound sap"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an lower sap bind request
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="LSZ_BND_ENA"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.31
#
#       Desc:    Verify that its not possible to unbind a sap 
#                that was not bound
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.31">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that its not possible to unbind a sap that"
         "was not bound"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Send an General configuration request
      <tapa.gen.cfg/>
      # Send an protocol configuration request
      <tapa.prot.cfg protNode="SZAC_LSZ_ENB_PRC0"/>
      # Send an Szt Sap configuration request
      <tapa.sztsap.cfg/>
      # Send an Sct Sap configuration request
      <tapa.sctsap.cfg/>
      # Send an peer configuration request
      <tapa.peer.cfg peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an lower sap bind request
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="0"
                              action="LSZ_UBND_DIS"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>

      <tapa.sz.sct.delay delay="5"/>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.32
#
#       Desc:    Verify that user can unbind SAP using
#                SztUBndReq
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.32">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="S1AP"/>

      <tapa.desc>
         "Verify that user can unbind SAP using
         "SztUBndReq"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>

      # Configure TUCL
      <tapa.hi.init/>

      # Configure SCTP
      <tapa.sb.init/>

      # Bring up ENB
      <tapa.sz.enb0.init/>

      # Send Bind Req at eNB
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_ENB_PROC" spId="0" suId="0"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at eNB 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_ENB_PROC" spId="0" suId="0" status="1"/> 
      </tapa.expect>

   </tapa.cfg>

   <tapa.test>

      # Send Un-Bind Req at eNB
      <tapa.send>
         <tapa.szt.ubndreq procId="SZAC_ENB_PROC" spId="0" suId="0"/> 
      </tapa.send>

      <tapa.expect>
         <tapa.szt.staind procId="SZAC_ENB_PROC" spId="0" suId="0" staType="SZT_STA_TYPE_ASSOC" reason="SZT_REASON_UBND_SAP" status="SZT_STATUS_ASSOC_DOWN" peerId="2"/> 
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>


      # Deinit ENB
      <tapa.sz.enb0.deinit/>

      # Deinit SCTP
      <tapa.sb.deinit/>

      # Configure TUCL
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.33
#
#       Desc:    Verify that the error is generated when trying to unbind a sap
#                that was not configured
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.33">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that the alarm is generated when trying to unbind a sap that"
         "was not found"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.hi.init/>
      <tapa.sb.init/>
      # Initialise S1AP in an ENB configuration
      <tapa.sz.enb0.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an lower sap bind request
      <tapa.send>
         <tapa.lsz.cntrl.lSap lSapId="1"
                              action="LSZ_UBND_DIS"/>
      </tapa.send>

      # Receive the confirm bind request
      <tapa.expect>
         <tapa.lsz.cntrlcfm status="LCM_PRIM_NOK"
                            reason="LCM_REASON_INVALID_PAR_VAL"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>
      <tapa.sb.deinit/>
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.34
#
#       Desc:    Verify that when Bind timer times out, retry procedure is started
#                
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
#
<tapa.testcase id="11.34">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
         "Verify that retry procedures are started when Bind timer times out"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      # Initialise S1AP in an ENB configuration
      # Send an General configuration request
      <tapa.send>
         <tapa.lsz.cfg.gen />
      </tapa.send>

      # Receive the confirm for the general configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

      # Send an protocol configuration request
      <tapa.send>
         <tapa.lsz.cfg.prot protNode="SZAC_LSZ_ENB_PRC0"/>
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

      # Send an szt sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.usap />
      </tapa.send>

      # Receive the confirm for the szt sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

      # Send an sct sap configuration request
      <tapa.send>
         <tapa.lsz.cfg.lsap provType="SZAC_SCTP_DM" peerNode="SZAC_LSZ_MME_PRC1"/>
      </tapa.send>

      # Receive the confirm for the sct sap request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

      # Send an peer configuration request
      <tapa.send>
         <tapa.lsz.cfg.peer peerNodeCfg="SZAC_LSZ_MME_PRC1"/>
      </tapa.send>

      # Receive the confirm for the peer configuration request.
      <tapa.expect>
         <tapa.lsz.cfgcfm />
      </tapa.expect>

      # Send a control request to enable alarms
      <tapa.send>
         <tapa.lsz.cntrl.usta />
      </tapa.send>

      # Receive the confirm for the alarms.
      <tapa.expect>
         <tapa.lsz.cntrlcfm />
      </tapa.expect>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send an sct sap configuration request.
      <tapa.send>
         <tapa.lsz.cntrl.lSap />
      </tapa.send>

      <tapa.expset>
         # Receive the bind request and confirm for the sct sap request.
         <tapa.sct.bndreq spId="0"/> 
         # Receive the confirm for the sct sap request.
         <tapa.lsz.cntrlcfm/>
      </tapa.expset>

      <tapa.delay delay="5"/>

      <tapa.expect>
         # Receive the bind request and confirm for the sct sap request.
         <tapa.sct.bndreq spId="0"/> 
      </tapa.expect>

      <tapa.delay delay="5"/>

      <tapa.expect>
         # Receive the bind request and confirm for the sct sap request.
         <tapa.sct.bndreq spId="0"/> 
      </tapa.expect>

      <tapa.delay delay="5"/>

      <tapa.expect>
         # Receive the bind request and confirm for the sct sap request.
         <tapa.sct.bndreq spId="0"/> 
      </tapa.expect>

      <tapa.delay delay="5"/>

      <tapa.expect>
         <tapa.lsz.staInd category="LCM_CATEGORY_INTERFACE"
                          event = "LCM_EVENT_BND_FAIL"
                          cause = "LCM_CAUSE_UNKNOWN"
                          type   =  "LSZ_USTA_DGNVAL_SAPID"
                          typeId =  "0"                     />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # s1ap cleanup operations
      <tapa.sz.enb0.deinit/>

   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    11.35
#
#       Desc:    Verify that the SCT SAP statistics provides the 
#                correct values.
#
#       Notes:   None
#              
#       Module:  
#
#       File:    szac_tc11.xml
#
<tapa.testcase id="11.35">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="s1ap"/>

      <tapa.desc>
          "Verify that the SCT SAP statistics provides the correct values"
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>

      <tapa.ifdef>
           <tapa.flag id="SZAC_ENB"/>
           <tapa.flag id="SZAC_MME"/>
      </tapa.ifdef>

      <tapa.ifndef/>
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>

      # Configure TUCL
      <tapa.hi.init/>

      # Configure SCTP
      <tapa.sb.init/>

      # Bring up ENB
      <tapa.sz.enb0.init/>

      # Bring up MME 
      <tapa.sz.mme1.init/>
  
      # Send Bind Req at eNB
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_ENB_PROC" spId="0" suId="0"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at eNB 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_ENB_PROC" spId="0" suId="0" status="1"/> 
      </tapa.expect>

      # Send Bind Req at MME
      <tapa.send>
         <tapa.szt.bndreq procId="SZAC_MME_PROC" spId="1" suId="1"/> 
      </tapa.send>
  
      # Expect Bnd Cfm at MME 
      <tapa.expect>
         <tapa.szt.bndcfm procId="SZAC_MME_PROC" spId="1" suId="1" status="1"/> 
      </tapa.expect>

   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # S1 setup procedure
      <tapa.s1.init/>  

      # Send SCT SAP statistics request at eNB after S1 setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" suId="0"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm checkSctSapSts="TRUE" szDedProcSts.tx="0" szDedProcSts.rx="0" szComProcSts.tx ="1" szComProcSts.rx="1" checkPduSts="TRUE" setupReq.tx="1" setupResp.rx="1"/>
      </tapa.expect>

      # Send SCT SAP statistics request at MME after S1 setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" procId="SZAC_MME_PROC" suId="1"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm procId="SZAC_MME_PROC" checkSctSapSts="TRUE" szDedProcSts.tx="0" szDedProcSts.rx="0" szComProcSts.tx ="1" szComProcSts.rx="1" checkPduSts="TRUE" setupReq.rx="1" setupResp.tx="1"/>
      </tapa.expect>

      # UE context setup
      <tapa.uecxt.init usrConnId="1" spConnId="1"/>

      # Send SCT SAP statistics request at eNB after UE context setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" suId="0" action="ZEROSTS"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm checkSctSapSts="TRUE" szDedProcSts.tx="2" szDedProcSts.rx="1" szComProcSts.tx ="1" szComProcSts.rx="1" checkPduSts="TRUE" setupReq.tx="1" setupResp.rx="1" initUEMsg.tx="1" initCxtSetup.rx="1" initCxtSetupResp.tx="1"/>
      </tapa.expect>

      # Send SCT SAP statistics request at MME after UE context setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" procId="SZAC_MME_PROC" suId="1" action="ZEROSTS"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm procId="SZAC_MME_PROC" checkSctSapSts="TRUE" szDedProcSts.tx="1" szDedProcSts.rx="2" szComProcSts.tx ="1" szComProcSts.rx="1" checkPduSts="TRUE" setupReq.rx="1" setupResp.tx="1" initUEMsg.rx="1" initCxtSetup.tx="1" initCxtSetupResp.rx="1"/>
      </tapa.expect>

      # E-RAB setup 
      <tapa.erab.init/>

      # Send SCT SAP statistics request at eNB after S1 setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" suId="0"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm checkSctSapSts="TRUE" szDedProcSts.tx="1" szDedProcSts.rx="1" szComProcSts.tx ="0" szComProcSts.rx="0" checkPduSts="TRUE" eRABSetupReq.rx="1" eRABSetupResp.tx="1"/>
      </tapa.expect>

      # Send SCT SAP statistics request at MME after S1 setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" procId="SZAC_MME_PROC" suId="1"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm procId="SZAC_MME_PROC" checkSctSapSts="TRUE" szDedProcSts.tx="1" szDedProcSts.rx="1" szComProcSts.tx ="0" szComProcSts.rx="0" checkPduSts="TRUE" eRABSetupReq.tx="1" eRABSetupResp.rx="1"/>
      </tapa.expect>

      # E-RAB setup 
      <tapa.erab.init/>

      # Send HANDOVER REQUIRED from ENB to MME
      <tapa.send>
         <tapa.szt.datreq eventType="SZT_MSG_ID_HO_REQD" peerId="2" procId="SZAC_ENB_PROC" spId="0" spConnId="1" usrConnId="1"/>
      </tapa.send>

      # Expect HANDOVER REQUIRED at MME
      <tapa.expect>
         <tapa.szt.datind eventType="SZT_MSG_ID_HO_REQD" procId="SZAC_MME_PROC" peerId="1" suId="1" usrConnId="1"/>
      </tapa.expect>

      # Send HANDOVER COMMAND msg from MME to ENB
      <tapa.send>
         <tapa.szt.datreq eventType="SZT_MSG_ID_HO_CMD" procId="SZAC_MME_PROC" peerId="1" spId="1" spConnId="1" usrConnId="1"/>
      </tapa.send>

      # Expect HANDOVER COMMAND indication at ENB
      <tapa.expect>
         <tapa.szt.datind eventType="SZT_MSG_ID_HO_CMD" peerId="2" procId="SZAC_ENB_PROC" suId="0" usrConnId="1"/>
      </tapa.expect>

       Send eNodeB Direct Information Transfer msg from ENB to MME
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_ENB_DIR_TRANS" procId="SZAC_ENB_PROC" peerId="2" spId="0"/>
      </tapa.send>

       Expect eNodeB Direct Information Transfer indication at MME
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_ENB_DIR_TRANS" procId="SZAC_MME_PROC" peerId="1" suId="1"/>
      </tapa.expect>

       Send eNodeB Direct Information Transfer msg from ENB to MME
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_ENB_DIR_TRANS" procId="SZAC_ENB_PROC" peerId="2" spId="0"/>
      </tapa.send>

       Expect eNodeB Direct Information Transfer indication at MME
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_ENB_DIR_TRANS" procId="SZAC_MME_PROC" peerId="1" suId="1"/>
      </tapa.expect>

      # Send MME Direct Information Transfer START msg from MME to ENB
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_MME_DIR_TRANS" procId="SZAC_MME_PROC" peerId="1" spId="1"/>
      </tapa.send>

      # Expect MME Direct Information Transfer indication at ENB
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_MME_DIR_TRANS" procId="SZAC_ENB_PROC" peerId="2" suId="0"/>
      </tapa.expect>

      <tapa.delay delay = "10"/>

      # Send MME Direct Information Transfer START msg from MME to ENB
      <tapa.send>
         <tapa.szt.udatreq eventType="SZT_MSG_ID_MME_DIR_TRANS" procId="SZAC_MME_PROC" peerId="1" spId="1"/>
      </tapa.send>

      # Expect MME Direct Information Transfer indication at ENB
      <tapa.expect>
         <tapa.szt.udatind eventType="SZT_MSG_ID_MME_DIR_TRANS" procId="SZAC_ENB_PROC" peerId="2" suId="0"/>
      </tapa.expect>

      <tapa.delay delay = "1"/>

      # Send SCT SAP statistics request at eNB after S1 setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" suId="0"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm checkSctSapSts="TRUE" szDedProcSts.tx="3" szDedProcSts.rx="3" szComProcSts.tx ="2" szComProcSts.rx="2" checkPduSts="TRUE" eRABSetupReq.rx="2" eRABSetupResp.tx="2" handReqd.tx="1" handCmd.rx="1" enbDirInfoTrans.tx="2" mmeDirInfoTrans.rx="2"/>
      </tapa.expect>

      # Send SCT SAP statistics request at MME after S1 setup procedure
      <tapa.send>
         <tapa.lsz.sts.req stsType= "STSZSCTSAP" procId="SZAC_MME_PROC" suId="1"/>
      </tapa.send>

      # Receive the confirm for the SCT SAP statistics request.
      <tapa.expect>
         <tapa.lsz.stscfm procId="SZAC_MME_PROC" checkSctSapSts="TRUE" szDedProcSts.tx="3" szDedProcSts.rx="3" szComProcSts.tx ="2" szComProcSts.rx="2" checkPduSts="TRUE" eRABSetupReq.tx="2" eRABSetupResp.rx="2" handReqd.rx="1" handCmd.tx="1" enbDirInfoTrans.rx="2" mmeDirInfoTrans.tx="2"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>

      # Deinit ENB
      <tapa.sz.enb0.deinit/>

      # Deinit MME 
      <tapa.sz.mme1.deinit/>

      # Deinit SCTP
      <tapa.sb.deinit/>

      # Configure TUCL
      <tapa.hi.deinit/>

   </tapa.shutdown>

</tapa.testcase>


# DO NOT DELETE THIS LINE -- TC number generation script depends on it.
# xyzabcend

#/********************************************************************30**
#
#         End of file:     szac_tc11.xml
#
#*********************************************************************31*/
#
#
#/********************************************************************40**
#
#        Notes:
#
#*********************************************************************41*/
#
#/********************************************************************50**
#
#*********************************************************************51*/
#
#
#/********************************************************************60**
#
#        Revision history:
#
#*********************************************************************61*/
#
#/********************************************************************90**
#
#     ver       pat    init                  description
#------------ -------- ---- ----------------------------------------------
#$SID$        ---      pkaX  1. Updated for S1AP release 3.1
#/main/1    sz002.301  pkaX  1. Expect the correct spAssocId
#/main/1    sz004.301  va    1. Updated for Transparent Container Enc/Dec
#/main/1    sz008.301  akaranth 1. Test case 27, 28 Fixes.
#*********************************************************************91*/
