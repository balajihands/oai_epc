#
#/********************************************************************20**
#
#     Name:    X2AP 
#
#     Type:    XML Test File
#
#     Desc:    XML Based Test Cases for BMP with Dummy SCTP
#
#     File:    czac_tc5.xml
#
#     Sid:     fileName
#
#     Prg:    
#
#*********************************************************************21*/

# DO NOT DELETE THIS LINE -- TC number generation script depends on it.
# xyzabcstart=5:sv:czac_tc5.xml


###############################################################################
# All Validations at source eNodeB when BMP messages are received in wrong state 
# Or peer is not in a valid state of connecting/connected
###############################################################################

#
#
#       Test:    5.1
#
#       Desc:    Verify that two Handover Request Acknowledge received at source
#                eNodeB with same New UE X2AP ID value is detected by X2AP stack
#                at source eNodeB. X2AP at source eNodeB shall inform the
#                Application through a special errro indication primitive about the
#                Handover Request Ack with duplicate New UE X2AP ID value.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.1">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request Ack(New UE X2AP ID = "Y")-------------T eNodeB
#   S eNodeB-----Handover Request Ack(New UE X2AP ID = "Y")-------------T eNodeB
#   S eNodeB-----Error Indication------------------------------------->T eNodeB
#
# Send two HO Request Ack using dummy target eNodeB application with New UE X2AP ID = "Y".
# Expect first HO Request Ack at source application
# Expect error at source application w.r.t 2nd HO Request Ack, using appropriate 
# error id value. 

      <tapa.desc>
      Verify that two Handover Request Acknowledge received at source
      eNodeB with same New UE X2AP ID value is detected by X2AP stack
      at source eNodeB. X2AP at source eNodeB shall inform the
      Application through a special errro indication primitive about the
      Handover Request Ack with Invalid State cause value.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     
      #Send an HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect the HO Request Ack at eNB1
      <tapa.expect>
       <tapa.czt.bmpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_ACK" />
      </tapa.expect>

     #Send another HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>


      #Stack at eNB1 should send Error Indication back to peer, as well
      # inform the the application. Spec says it to be ignored only when no UE
      # context is found 
      #Expect the X2AP Error Indication back from eNB1 for the second HO Request ACK we sent
      <tapa.expect> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               trigMsgType="CZT_MSG_HO_ACK"
                               oldUEX2APId="1" newUEX2APId="2"
                               causeType="CAUSE_PROTOCOL"
                               causeVal="3" />
                               #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that another HO request ack
       arrived when in invalid state
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_HO_ACK"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.2
#
#       Desc:    Verify that HO request ack cannot be received in wrong state at source eNodeB.
#                from peer. If there is no UE context when HO Ack is received at source,
#                Stack at source should inform the user through an error indication, without
#                informing the peer back with error indication.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.2">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request---------------------------------------->T eNodeB
#   S eNodeB-----Handover Cancel---------------------------------------->T eNodeB
#   S eNodeB-----Handover Request Acknowledge---------------------------- T eNodeB
#  Expect error indication at source eNodeB
#

      <tapa.desc>
        Verify that HO request ack cannot be received in wrong state at source eNodeB.
        Stack at source should inform the user through an error indication
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>

       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     
     # Send HO Cancel to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      #Expect HO Cancel from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.expect>

      #Send an HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>


      #Stack at eNB1 shouldnot send Error Indication back to peer, but 
      # inform the the application. Spec says it to be ignored when no UE
      # context is found 
     
      #Expect error indication at user about this, that HO request ack arrived 
       when no UE Context is found 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_HO_ACK" 
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>

   </tapa.test>


   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.3
#
#       Desc:    Verify that HO preparation failure cannot be received in wrong state at source eNodeB,
#                from peer. If there is no UE context when HO preparation failure is received at source,
#                Stack at source should inform the user through an error indication, without
#                informing the peer back with error indication.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.3">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request---------------------------------------->T eNodeB
#   S eNodeB-----Handover Cancel---------------------------------------->T eNodeB
#   S eNodeB-----Handover Preparation Failure---------------------------- T eNodeB
#  Expect error indication at source eNodeB
#

      <tapa.desc>
        Verify that HO Preparation Failure cannot be received in wrong state at source eNodeB.
        Stack at source should inform the user through an error indication
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


 # Configuration subsection
   <tapa.cfg>

       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     
     # Send HO Cancel to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      #Expect HO Cancel from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.expect>

      #Send an HO Preparation Failure back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.send>


      #Stack at eNB1 shouldnot send Error Indication back to peer, but 
      # inform the the application. Spec says it to be ignored when no UE
      # context is found 
     
      #Expect error indication at user about this, that HO preparation failure arrived 
       when no UE Context is found 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_HO_FAIL" 
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>

   </tapa.test>


   # Clean subsection
   <tapa.clean/>


   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.4
#
#       Desc:    Verify that UE Context Release cannot be received in wrong state at source eNodeB,
#                from peer. If there is no UE context when HO preparation failure is received at source,
#                Stack at source should inform the user through an error indication, as well 
#                inform the peer back with error indication.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.4">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------------------->T eNodeB
#   S eNodeB-----Handover Cancel------------------------------------> T eNodeB
#   S eNodeB-----UE Context Release---------------------------------T eNodeB
#   S eNodeB-----Error Indication------------------------------------>T eNodeB
#  Expect error indication at source eNodeB about this event from peer.
#

      <tapa.desc>
        Verify that UE Context Release cannot be received in wrong state at source eNodeB,
        from peer. If there is no UE context when HO preparation failure is received at source,
        Stack at source should inform the user through an error indication, as well 
        inform the peer back with error indication.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


 # Configuration subsection
   <tapa.cfg>

       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     
     # Send HO Cancel to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      #Expect HO Cancel from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.expect>

      #Send an UE Context Release back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1"  newUEX2APId="2"/>
      </tapa.send>


      #Stack at eNB1 should send Error Indication back to peer, as well inform
      # the the application.
      #Expect the X2AP Error Indication back from eNB1 for this UE Context Release
      <tapa.expect> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               trigMsgType="CZT_MSG_UE_CXT_RELEASE"
                               oldUEX2APId="1" newUEX2APId="2"
                               causeType="CAUSE_PROTOCOL"
                               causeVal="3" />
                               #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>
     
      #Expect error indication at user about this, that HO preparation failure arrived 
       when no UE Context is found 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_UE_CXT_RELEASE" 
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>

   </tapa.test>


   # Clean subsection
   <tapa.clean/>


   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.5
#
#       Desc:    Verify that UE Context Release cannot be received in wrong state at source eNodeB,
#                from peer when HO preparation is in progress.
#                Stack at source should inform the user through an error indication, as well 
#                inform the peer back with error indication.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.5">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------------------->T eNodeB
#   S eNodeB-----UE Context Release---------------------------------T eNodeB
#   S eNodeB-----Error Indication------------------------------------>T eNodeB
#  Expect error indication at source eNodeB about this event from peer.
#

      <tapa.desc>
       Verify that UE Context Release cannot be received in wrong state at source eNodeB,
       from peer when HO preparation is in progress.
       Stack at source should inform the user through an error indication, as well 
       inform the peer back with error indication.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


 # Configuration subsection
   <tapa.cfg>

       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

      #Send an UE Context Release back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1"  newUEX2APId="2"/>
      </tapa.send>


      #Stack at eNB1 should send Error Indication back to peer, as well inform
      # the the application. 
      #Expect the X2AP Error Indication back from eNB1 for this UE Context Release
      <tapa.expect> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               trigMsgType="CZT_MSG_UE_CXT_RELEASE"
                               oldUEX2APId="1" newUEX2APId="2"
                               causeType="CAUSE_PROTOCOL"
                               causeVal="3" />
                               #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>
     
      #Expect error indication at user about this, that UE Context Release arrived 
       when no UE Context is found 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_UE_CXT_RELEASE" 
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>

   </tapa.test>


   # Clean subsection
   <tapa.clean/>


   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.6
#
#       Desc:    Verify that when user at source initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                This is informed back to peer with Error Indication
#                Stack at source eNodeB shall also inform the application. 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.6">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----UE Context Release--------------------T eNodeB
#   S eNodeB-----Error Indication--------------------->T eNodeB
#  Expect Error Indication at source eNodeB application also. 
#

      <tapa.desc>
      Verify that when user at source initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      This is informed back to peer with Error Indication
      Stack at source eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>


      #Send an HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect the HO Request Ack at eNB1
      <tapa.expect>
       <tapa.czt.bmpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_ACK" />
      </tapa.expect>


     #Send the Reset to eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB1
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send UE Context Release to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect Error Indication from eNodeB1. 
      #No need to expect oldUEX2APId, newUEX2APId, here as peer itself is in Reset state
      #This field(s) will not have any significance here.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_UE_CXT_RELEASE"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3" />
                          #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that UE Context Release
      # arrived from peer when Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_UE_CXT_RELEASE"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.7
#
#       Desc:    Verify that when user at source initiates X2 Reset towards a peer, 
#                The incoming HO Failure is ignored since a context isnot found 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.7">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset -------------------------------->T eNodeB
#   S eNodeB-----Handover Preparation Failure---------- T eNodeB
#      The incoming HO Failure is ignored since a context isnot found 
#

      <tapa.desc>
      Verify that when user at source initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      The incoming HO Failure is ignored since a context isnot found 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     #Send the Reset to eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB1. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send HO Preparation Failure to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.send>

      # The incoming HO Failure is ignored since a context isnot found 
      #No need to expect oldUEX2APId, here as peer itself is in Reset state
      #This field will not have any significance here.
      <tapa.expset>
         <!---
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_HO_FAIL"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3" />
                       #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
                       -->
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_HO_FAIL"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expset>

      #Expect error indication at user about this, that HO Preparation Failure
      # arrived from peer when initiated Reset 
#      <tapa.expect>
#      </tapa.expect>
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.8
#
#       Desc:    Verify that when user at source initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                The incoming HO Ack is ignored since a context isnot found 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.8">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#      The incoming HO Ack is ignored since a context isnot found 
#

      <tapa.desc>
      Verify that when user at source initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      The incoming HO Ack is ignored since a context isnot found 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     #Send the Reset to eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB1. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send HO Request Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      # The incoming HO Ack is ignored since a context isnot found 
      #No need to expect oldUEX2APId, newUEX2APId, here as peer itself is in Reset state
      #This field(s) will not have any significance here.
      <!---
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_HO_ACK"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3" />
                          #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>
      -->
      #Expect error indication at user about this, that HO Request Ack
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_HO_ACK"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>





#
#
#       Test:    5.9
#
#       Desc:    Verify that when X2 Reset is complete in the midst of HO procedure
#                UE Context Release received after that is informed to peer
#                with error indication as well informed to application at source eNodeB.
#                eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.9">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Reset Response-------------------------T eNodeB
#   S eNodeB-----UE Context Release--------------------T eNodeB
#   S eNodeB-----Error Indication--------------------->T eNodeB
#

      <tapa.desc>
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

 #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>


      #Send an HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect the HO Request Ack at eNB1
      <tapa.expect>
       <tapa.czt.bmpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_ACK" />
      </tapa.expect>


     #Send the Reset to eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB1
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send Reset Response to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET_RSP"/>
      </tapa.send>

      #Expect the Reset Response at eNB1
      <tapa.expect>
       <tapa.czt.gpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>


      # Send UE Context Release to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect Error Indication from eNodeB1. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_UE_CXT_RELEASE"
                          oldUEX2APId="1" newUEX2APId="2"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3" />
                          #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that UE Context Release
      # arrived from peer when Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_UE_CXT_RELEASE"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
 
      </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.10
#
#       Desc:    Verify that when user at source initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                This is not informed back to peer, as no UE Context is present
#                Stack at source eNodeB shall also inform the application. 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.10">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Reset Response-------------------------T eNodeB
#   S eNodeB-----Handover Preparation Failure---------- T eNodeB
#  Expect Error Indication at source eNodeB application . 
#

      <tapa.desc>
      Verify that when user at source initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      This is not informed back to peer, as no UE Context is present
      Stack at source eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     #Send the Reset to eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB1. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

     # Send Reset Response to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET_RSP"/>
      </tapa.send>

      #Expect the Reset Response at eNB1
      <tapa.expect>
       <tapa.czt.gpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>


      # Send HO Preparation Failure to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.send>

      #Stack at eNB1 shouldnot send Error Indication back to peer, but 
      # inform the the application. Spec says it to be ignored when no UE
      # context is found 

      #Expect error indication at user about this, that HO Preparation Failure
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_HO_FAIL"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.11
#
#       Desc:    Verify that when user at source initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                This is not informed back to peer, as no UE Context is present
#                Stack at source eNodeB shall also inform the application. 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.11">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Reset Response-------------------------T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#  Expect Error Indication at source eNodeB application . 
#

      <tapa.desc>
      Verify that when user at source initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      This is not informed back to peer, as no UE Context is present
      Stack at source eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     #Send the Reset to eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB1. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

     # Send Reset Response to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET_RSP"/>
      </tapa.send>

      #Expect the Reset Response at eNB1
      <tapa.expect>
       <tapa.czt.gpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>


      # Send HO Request Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Stack at eNB1 shouldnot send Error Indication back to peer, but 
      # inform the the application. Spec says it to be ignored when no UE
      # context is found 
     
      #Expect error indication at user about this, that HO Request Ack
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_HO_ACK"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


###############################################################################
# End of all validations for source eNodeB
###############################################################################



###############################################################################
# All Validations at target eNodeB when BMP messages are received in wrong state 
# Or peer is not in a valid state of connecting/connected
###############################################################################


#
#
#       Test:    5.12
#
#       Desc:    Verify that two Handover Requests sent from source eNodeB with
#                same Old UE X2AP ID value is detected by X2AP stack at target
#                eNodeB. X2AP at target eNodeB shall inform the Application
#                through a special error indication primitive about the
#                Handover Request with duplicate Old UE X2AP ID value.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.12">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Failure---------------T eNodeB
#
# Send two HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect first HO Request at target application
# Expect HO Failure at source eNodeB w.r.t 2nd HO Request.
# Expect error at target application w.r.t 2nd HO Request, using appropriate 
# error id value. 

      <tapa.desc>
      Verify that two Handover Requests sent from source eNodeB with 
      same Old UE X2AP ID value is detected by X2AP stack at target
      eNodeB. X2AP at target eNodeB shall inform back to source eNodeB
      through Handover Preparation Failure.
      And also the application at its end through a special error 
      indication primitive about the Handover Request with duplicate
      Old UE X2AP ID value.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

     #Send another HO Request with same old UE X2AP Id 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                          suAssocId="0" 
                          assocIdx="0"
                          streamId="1"
                          eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect HO Failure for the second one before user responds with HO ACK for the first one
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.expect>

      #Expect error indication at user about this, that another HO request
       arrived with duplicate old UE X2AP Id
      <tapa.expect>
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                          eventType="CZT_MSG_HO_REQ"
                          errType="CZT_ERRTYPE_FROM_PEER"
                          errCause="CZT_ERRCAUSE_INV_STATE"/>

      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.13
#
#       Desc:    Verify that the BMP messages can reach to target
#                when peer is is connecting state
#               
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.13">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----X2 Setup---------------------->T eNodeB
#   S eNodeB-----Handover Request-------------->T eNodeB
#   Try sending Acknowledgement from target
#   Application at target should expect the error back,
#   Since user has not yest responded with X2 Setyop response

      <tapa.desc>
        Verify that the BMP messages can reach when peer is is connecting state
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #First establish the association with eNodeB2. 
    
      # Send a new Association Indication to eNodeB2
      <tapa.send>
         <tapa.sct.assocind procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                            suEndpId="0" 
                            assocIdx="0" type="SCT_ASSOC_IND_COOKIE" />
      </tapa.send>

      # Receive back the Association Response from eNodeB2
      <tapa.expect>
         <tapa.sct.assocrsp procId="CZAC_LCZ_ENB2_PRC" spId="0" 
                           spEndpId="0" 
                           assocIdx="0" type="SCT_ASSOC_IND_COOKIE"/>
      </tapa.expect>

      # Send Status Indication to eNB2 that ASSOC UP 
      <tapa.send>
         <tapa.sct.staind procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                          suAssocId="1" 
                          spAssocId="1" 
                          status="SCT_STATUS_COMM_UP"/> 
      </tapa.send>
      
      <tapa.delay delay="5" />
      
      # Expect Status Indication ASSOC UP with user at eNodeB2 
      <tapa.expset>
         <tapa.lcz.staInd category="LCM_CATEGORY_PROTOCOL"
                          event = "LCZ_EVENT_LI_COMM_UP"
                          cause = "LCZ_CAUSE_SCT_NOT_APPL"
                          type   = "LCZ_USTA_DGNVAL_PEER"
                          typeId =  "1"
                          procId="300"               />
                                   
#         <tapa.czt.staind procId="CZAC_LCZ_ENB2_PRC" peerId="1" suId="0" 
#                          staType="CZT_STA_TYPE_ASSOC" 
#                          status="CZT_STATUS_ASSOC_UP"
#                          reason="CZT_REASON_RCVD_COMM_UP"  />
      </tapa.expset>         

      # Second start the X2 Interface setup
      # Now send the first X2 Setup message to eNodeB2
      <tapa.send>
         <tapa.sct.datind  procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                           suAssocId="1" 
                           assocIdx="0" 
                           strmId="1"
                           eventType="CZT_MSG_X2_SETUP" />
      </tapa.send>

      # Expect a new X2 Setup with user at eNodeB2 
      <tapa.expect>
         <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_X2_SETUP"  eNBId="1" />
      </tapa.expect>     

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send HO Request Ack from eNB2
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" oldUEX2APId="1"
                        newUEX2APId="2" />
      </tapa.send>

      #Expect error indication at user about this, that HO request ACK 
       sent when user has not responded with X2 Setup Response.
      <tapa.expect>
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                          eventType="CZT_MSG_HO_ACK"
                          errType="CZT_ERRTYPE_INTERNAL"
                          errCause="CZT_ERRCAUSE_INV_STATE"/>

      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.14
#
#       Desc:    Verify that Handover Cancel receieved from source after HO Preparation 
#                Failure was sent for HO preparation is absorbed by stack at target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.14">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Preparation Failure---------------------------- T eNodeB
#   S eNodeB-----Handover Cancel-------------------------------------->T eNodeB
#

      <tapa.desc>
       Verify that Handover Cancel receieved from source after HO Preparation 
       Failure was sent for HO preparation is absorbed by stack at target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Preparation Failure back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1"/>
      </tapa.send>

      #Expect HO Preparation Failure from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.expect>

      #Send HO Cancel to eNodeB2.
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.send>

      # Stack at eNodeB2 should simply abosorb this without informing back to peer
      # or user. Spec says if HO Cancel is received for which there is no 
      # context found, target eNB shall ignore this message.

 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.15
#
#       Desc:    Verify that Handover Cancel receieved from source after HO Procedure
#                is complete is absorbed by stack at target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.15">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request---------------------->T eNodeB
#   S eNodeB-----Handover Request Acknowledge---------- T eNodeB
#   S eNodeB-----UE Context Release--------------------T eNodeB
#   S eNodeB-----Handover Cancel----------------------->T eNodeB
#

      <tapa.desc>
       Verify that Handover Cancel receieved from source after HO Preparation 
       Failure was sent for HO preparation is absorbed by stack at target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     #Send the UE Context Release
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_UE_CXT_RELEASE" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect UE Context Release
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      #Send HO Cancel to eNodeB2.
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      # Stack at eNodeB2 should simply abosorb this without informing back to peer
      # or user. Spec says if HO Cancel is received for which there is no 
      # context found, target eNB shall ignore this message.

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.16
#
#       Desc:    Verify that Handover Cancel receieved from source when no UE Context 
#                is found is absorbed by stack at target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.16">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Cancel----------------------->T eNodeB
#

      <tapa.desc>
       Verify that Handover Cancel receieved from source after HO Preparation 
       Failure was sent for HO preparation is absorbed by stack at target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.send>

     
      # Stack at eNodeB2 should simply abosorb this without informing back to peer
      # or user. Spec says if HO Cancel is received for which there is no 
      # context found, target eNB shall ignore this message.

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.17
#
#       Desc:    Verify that SN Status Transfer receieved from source before HO Preparation 
#                 is complete is informed back to peer with Error Indication.
#                Stack at target eNodeB shall also inform the application 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.17">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request---------------------->T eNodeB
#   S eNodeB-----SN Status Transfer--------------------> T eNodeB
#   S eNodeB-----Error Indication----------------------T eNodeB
#  Expect Error Indication at target eNodeB application. 

      <tapa.desc>
       Verify that SN Status Transfer receieved from source before HO Preparation 
       is complete is informed back to peer with Error Indication.
       Stack at target eNodeB shall also inform the application 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>


      #Send SN Status Transfer to eNodeB2.
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>
 
      #Expect Error Indication back from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" errEventType="CZT_MSG_SN_STATUS_TRFR" 
                          oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      #Expect error indication at user about this, that SN Status Transfer
      # arrived before user responded with HO request ack
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_SN_STATUS_TRFR"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.18
#
#       Desc:    Verify that SN Status Transfer receieved from source after the HO Procedure 
#                is complete is abosorbed by stack at target.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.18">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request---------------------->T eNodeB
#   S eNodeB-----Handover Request Acknowledge---------- T eNodeB
#   S eNodeB-----UE Context Release--------------------T eNodeB
#   S eNodeB-----SN Status Transfer--------------------> T eNodeB

      <tapa.desc>
        Verify that SN Status Transfer receieved from source after the HO Procedure 
        is complete is abosorbed by stack at target.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>


     #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     #Send the UE Context Release
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_UE_CXT_RELEASE" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect UE Context Release
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>


      #Send SN Status Transfer to eNodeB2.
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>
 
     # Spec says if the target eNB receives SN Status Transfer message
     # for an UE for which no prepared handover exists at the
     # target eNB, the target eNB shall ignore the message. */

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.19
#
#       Desc:    Verify that SN Status Transfer receieved from source after HO Preparation 
#                Failure was sent for HO preparation, is abosorbed by stack at target.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.19">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Preparation Failure----------- T eNodeB
#   S eNodeB-----SN Status Transfer--------------------> T eNodeB
#

      <tapa.desc>
         Verify that SN Status Transfer receieved from source after HO Preparation 
         Failure was sent for HO preparation, is abosorbed by stack at target.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Preparation Failure back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1"/>
      </tapa.send>

      #Expect HO Preparation Failure from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.expect>

      #Send SN Status Transfer to eNodeB2.
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

   </tapa.test>

     # Spec says if the target eNB receives SN Status Transfer message
     # for an UE for which no prepared handover exists at the
     # target eNB, the target eNB shall ignore the message. */

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.20
#
#       Desc:    Verify that when user at target initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                This is informed back to peer with HO Preparation Failure
#                Stack at target eNodeB shall also inform the application. 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.20">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Reset ---------------------------------T eNodeB
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   HO Request is accepted assuming it arrived before the Reset Response
#   S eNodeB-----Reset Response----------------------->T eNodeB
#   S eNodeB-----Handover Ack-----------------------T eNodeB
#

      <tapa.desc>
      Verify that when user at target initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      This is informed back to peer with HO Preparation Failure
      Stack at target eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     #Send the Reset to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.send>


      #Expect Reset from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>


      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>
      # Send Reset Response to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET_RSP"/>
      </tapa.send>

      #Expect the Reset Response at eNB2
      <tapa.expect>
       <tapa.czt.gpcfm procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>


    <tapa.delay delay="5" /> 

      <!---
      #Expect HO Preparation Failure from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" 
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3"/>
                         #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that HO Request 
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_HO_REQ"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
      -->
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.21
#
#       Desc:    Verify that when user at target initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                 x2ap Ignores the sn transfer message.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.21">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset ---------------------------------T eNodeB
#   S eNodeB-----SN Status Transfer-------------------->T eNodeB
# X2AP iGNORES THE SN TRANSFER MESSAGE
#

      <tapa.desc>
      Verify that when user at target initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      This is informed back to peer with HO Preparation Failure
      Stack at target eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     #Send the Reset to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send SN Status Transfer to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      # X2AP iGNORES THE SN TRANSFER MESSAGE
      <!--
      #Expect Error Indication from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_SN_STATUS_TRFR"
                          oldUEX2APId="1" newUEX2APId="2"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3"/>
                         #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>
      #Expect error indication at user about this, that SN Status Transfer
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_SN_STATUS_TRFR"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
      -->
    <tapa.delay delay="5" /> 
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.22
#
#       Desc:    Verify that when user at target initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                  The incoming HO CANCEL is ignored since a context isnot found 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.22">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset ---------------------------------T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
# The incoming HO CANCEL is ignored since a context isnot found 
#

      <tapa.desc>
      Verify that when user at target initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      This is informed back to peer with HO Preparation Failure
      Stack at target eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     #Send the Reset to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      # The incoming HO CANCEL is ignored since a context isnot found 
      <!--
      #Expect Error Indication from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_HO_CANCEL"
                          oldUEX2APId="1" newUEX2APId="2"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3"/>
                         #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>
      #Expect error indication at user about this, that HO Cancel
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_HO_CANCEL"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
      -->
 
    <tapa.delay delay="5" /> 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.23
#
#       Desc:    Verify that when user at target initiates X2 Reset towards a peer, 
#                HO Procedure cannot be processed from same peer.
#                The incoming HO Cancel is ignored since a context isnot found 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.23">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset ---------------------------------T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
#   The incoming HO Cancel is ignored since a context isnot found 
#

      <tapa.desc>
      Verify that when user at target initiates X2 Reset towards a peer, 
      HO Procedure cannot be processed from same peer.
      This is informed back to peer with HO Preparation Failure
      Stack at target eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

     #Send the Reset to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      # The incoming HO Cancel is ignored since a context isnot found 
      <!--
      #Expect Error Indication from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_HO_CANCEL"
                          oldUEX2APId="1" 
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3"/>
                         #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that HO Cancel
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_HO_CANCEL"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
      -->
    <tapa.delay delay="5" /> 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.24
#
#       Desc:    Verify that when X2 Reset is complete in the midst of HO procedure
#                HO Cancel received after that is absorbed by stack at target
#                eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.24">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset ---------------------------------T eNodeB
#   S eNodeB-----Reset Response------------------------->T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
#

      <tapa.desc>
      Verify that when X2 Reset is complete in the midst of HO procedure
      HO Cancel received after that is absorbed by stack at target
      eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

     #Send the Reset to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send Reset Response to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET_RSP"/>
      </tapa.send>

      #Expect the Reset Response at eNB2
      <tapa.expect>
       <tapa.czt.gpcfm procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>

      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      # Stack at eNodeB2 should simply abosorb this without informing back to peer
      # or user. Spec says if HO Cancel is received for which there is no 
      # context found, target eNB shall ignore this message.
   
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.25
#
#       Desc:    Verify that when X2 Reset is complete in the midst of HO procedure
#                HO Cancel received after that is absorbed by stack at target
#                eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.25">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------->T eNodeB
#   S eNodeB-----Reset ---------------------------------T eNodeB
#   S eNodeB-----Reset Response------------------------->T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
#

      <tapa.desc>
      Verify that when X2 Reset is complete in the midst of HO procedure
      HO Cancel received after that is absorbed by stack at target
      eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

     #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     #Send the Reset to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send Reset Response to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET_RSP"/>
      </tapa.send>

      #Expect the Reset Response at eNB2
      <tapa.expect>
       <tapa.czt.gpcfm procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>

      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      # Stack at eNodeB2 should simply abosorb this without informing back to peer
      # or user. Spec says if HO Cancel is received for which there is no 
      # context found, target eNB shall ignore this message.
   
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.26
#
#       Desc:    Verify that when X2 Reset is complete in the midst of HO Procedure
#                SN Status Transfer receieved after that is absorbed by stack at target
#                as HO procedure was aborted due to Reset.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.26">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset ---------------------------------T eNodeB
#   S eNodeB-----Reset Response------------------------->T eNodeB
#   S eNodeB-----SN Status Transfer--------------------->T eNodeB
#

      <tapa.desc>
       Verify that when X2 Reset is complete in the midst of HO Procedure
       SN Status Transfer receieved after that is absorbed by stack at target
       as HO procedure was aborted due to Reset.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     #Send the Reset to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.send>

      #Expect Reset from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET" />
      </tapa.expect>


      # Send Reset Response to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET_RSP"/>
      </tapa.send>

      #Expect the Reset Response at eNB2
      <tapa.expect>
       <tapa.czt.gpcfm procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>

      # Send SN Status Transfer to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

     # Spec says if the target eNB receives SN Status Transfer message
     # for an UE for which no prepared handover exists at the
     # target eNB, the target eNB shall ignore the message. */
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>




#
#
#       Test:    5.27
#
#       Desc :Verify that when peer has initiated an X2 Reset towards target eNodeB
#           and the late arrival of Reset response does not affect the HO to be given to the user.
#           But the HO contect is destroyed when the user sends a Reset Response.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.27">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset Response              ----------- T eNodeB
#   S eNodeB-----Handover ACK--------------------------- T eNodeB
#    User received error indication since the context is wiped when Reset
#    Response was sent.

      <tapa.desc>
           Verify that when peer has initiated an X2 Reset towards target eNodeB
           and the late arrival of Reset response does not affect the HO to be given to the user.
           But the HO contect is destroyed when the user sends a Reset Response.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Send Reset to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset at eNB2
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.expect>


      # Ho Request is accepted assuming it arrived before Reset Response
      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

     #Send the Reset Response to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.send>

      #Expect Reset Response from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>

      # The HO Request context is destroyed hence ACK shall not be sent

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect error indication at user about this
      <tapa.expect>
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                              eventType="CZT_MSG_HO_ACK"
                              errCause="CZT_ERRCAUSE_UNEXP_MSG"
                              errType="CZT_ERRTYPE_INTERNAL" />
         </tapa.expect>

    <tapa.delay delay="5" /> 
  
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.28
#
#       Desc:    Verify that when peer has initiated an X2 Reset towards target eNodeB
#                HO Procedure cannot be processed from same peer.
#               SN TRANSFER is accepted assuming it has arrived before Reset response
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.28">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset -------------------------------->T eNodeB
#   S eNodeB-----SN Status Transfer-------------------->T eNodeB
# SN TRANSFER is accepted assuming it has arrived before Reset response
#

      <tapa.desc>
      Verify that when peer has initiated an X2 Reset towards target eNodeB
      HO Procedure cannot be processed from same peer.
      This is informed back to peer with Error Indication
      Stack at target eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     # Send Reset to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset at eNB2
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.expect>


      # Send SN Status Transfer to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>


      # SN TRANSFER is accepted assuming it has arrived before Reset response
      #Expect the SN Status Transfer at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_SN_STATUS_TRFR" />
      </tapa.expect>
      <!--
      #Expect Error Indication from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_SN_STATUS_TRFR"
                          oldUEX2APId="1" newUEX2APId="2"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3" />
                          #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that SN Status Transfer
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_SN_STATUS_TRFR"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
      -->
    <tapa.delay delay="5" /> 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.29
#
#       Desc:    Verify that when peer has initiated an X2 Reset towards target eNodeB
#                HO Procedure cannot be processed from same peer.
#                HO Cancel is accepted assuming it has arrived before Reset response
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.29">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset -------------------------------->T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
# HO Cancel is accepted assuming it has arrived before Reset response
#

      <tapa.desc>
       Verify that when peer has initiated an X2 Reset towards target eNodeB
       HO Procedure cannot be processed from same peer.
       This is informed back to peer with Error Indication
       Stack at target eNodeB shall also inform the application. 
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     # Send Reset to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset at eNB2
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.expect>

      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      # HO Cancel is accepted assuming it has arrived before Reset response
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_CANCEL" />
      </tapa.expect>
      <!--
      #Expect Error Indication from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_HO_CANCEL"
                          oldUEX2APId="1" newUEX2APId="2"
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3" />
                          #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that SN Status Transfer
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_HO_CANCEL"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
      -->
    <tapa.delay delay="5" /> 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.30
#
#       Desc:    Verify that when peer has initiated an X2 Reset towards target eNodeB
#                HO Procedure cannot be processed from same peer.
#                HO Cancel is accepted assuming it has arrived before Reset response
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.30">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
# HO Cancel is accepted assuming it has arrived before Reset response
#

      <tapa.desc>
       Verify that when peer has initiated an X2 Reset towards target eNodeB
       HO Procedure cannot be processed from same peer.
       HO Cancel is accepted assuming it has arrived before Reset response
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      # Send Reset to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset at eNB2
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.expect>

     # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.send>

      # HO Cancel is accepted assuming it has arrived before Reset response
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_CANCEL" />
      </tapa.expect>
      <!--
      #Expect Error Indication from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_ERR_IND" 
                          trigMsgType="CZT_MSG_HO_CANCEL"
                          oldUEX2APId="1" 
                          causeType="CAUSE_PROTOCOL"
                          causeVal="3" />
                          #CztCauseProtmessage_not_compatible_with_receiver_stateEnum"
      </tapa.expect>

      #Expect error indication at user about this, that SN Status Transfer
      # arrived from peer when initiated Reset 
      <tapa.expect>
       <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                        eventType="CZT_MSG_HO_CANCEL"
                        errType="CZT_ERRTYPE_FROM_PEER" 
                        errCause="CZT_ERRCAUSE_INV_STATE"/>
      </tapa.expect>
      -->
    <tapa.delay delay="5" /> 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.31
#
#       Desc:    Verify that when X2 Reset is complete in the midst of HO procedure
#                HO Cancel received after that is absorbed by stack at target
#                eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.31">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Reset Response-------------------------T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
#

      <tapa.desc>
      Verify that when X2 Reset is complete in the midst of HO procedure
      HO Cancel received after that is absorbed by stack at target
      eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

     # Send Reset to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset at eNB2
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.expect>

     #Send the Reset Response to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.send>

      #Expect Reset Response from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>

      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      # Stack at eNodeB2 should simply abosorb this without informing back to peer
      # or user. Spec says if HO Cancel is received for which there is no 
      # context found, target eNB shall ignore this message.
   
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.32
#
#       Desc:    Verify that when X2 Reset is complete in the midst of HO procedure
#                HO Cancel received after that is absorbed by stack at target
#                eNodeB. Reset is initiated by source towards the target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.32">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------->T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Reset Response-------------------------T eNodeB
#   S eNodeB-----HO Cancel------------------------------>T eNodeB
#

      <tapa.desc>
      Verify that when X2 Reset is complete in the midst of HO procedure
      HO Cancel received after that is absorbed by stack at target
      eNodeB. Reset is initiated by source towards the target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

     #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

     # Send Reset to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset at eNB2
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.expect>

     #Send the Reset Response to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.send>

      #Expect Reset Response from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>


      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1"/>
      </tapa.send>

      # Stack at eNodeB2 should simply abosorb this without informing back to peer
      # or user. Spec says if HO Cancel is received for which there is no 
      # context found, target eNB shall ignore this message.
   
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.33
#
#       Desc:    Verify that when X2 Reset is complete in the midst of HO Procedure
#                SN Status Transfer receieved after that is informed absorbed by stack.
#                Reset is initiated by source towards the target eNodeB.

#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.33">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Reset --------------------------------->T eNodeB
#   S eNodeB-----Reset Response--------------------------T eNodeB
#   S eNodeB-----SN Status Transfer--------------------->T eNodeB
#

      <tapa.desc>
       Verify that when X2 Reset is complete in the midst of HO Procedure
       SN Status Transfer receieved after that is absorbed by stack.
       Reset is initiated by source towards the target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      # Send Reset to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset at eNB2
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET" />
      </tapa.expect>

     #Send the Reset Response to peer from eNodeB2
      <tapa.send>
       <tapa.czt.gprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_RESET_RSP" />
      </tapa.send>

      #Expect Reset Response from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_RESET_RSP" />
      </tapa.expect>

      # Send SN Status Transfer to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

     # Spec says if the target eNB receives SN Status Transfer message
     # for an UE for which no prepared handover exists at the
     # target eNB, the target eNB shall ignore the message. */
      #Expect Error Indication from eNodeB2. 
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


###############################################################################
# End of all validations for target eNodeB
###############################################################################

###############################################################################
# All successful cases at target eNodeB
###############################################################################


#
#
#       Test:    5.34
#
#       Desc:    Verify the successful completion of 
#                handover at target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.34">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----SN Status Transfer-------------------->T eNodeB
#   S eNodeB-----UE Context Release-------------------->T eNodeB
#

      <tapa.desc>
       Verify the successful completion of complete 
       handover at target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      # Send SN Status Transfer to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect the SN Status Transfer at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_SN_STATUS_TRFR" />
      </tapa.expect>

      
     # Send UE Context Release from eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_UE_CXT_RELEASE" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect the UE Context Release from eNB2
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_UE_CXT_RELEASE" 
                          oldUEX2APId="1" newUEX2APId="2" />
      </tapa.expect>
 
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.35
#
#       Desc:    Verify the successful cancellation of handover before the 
#                completion of handover at target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.35">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Handover Cancel------------------------>T eNodeB
#

      <tapa.desc>
       Verify the successful completion of complete 
       handover at target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      # Send HO Cancel to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Cancel at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_CANCEL" />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.36
#
#       Desc:    Verify the successful failure of handover at target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.36">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Preparation Failure----------- T eNodeB
#

      <tapa.desc>
        Verify the successful failure of handover at target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      #Send the HO Preparation Failure back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_FAIL" 
                        oldUEX2APId="1" />
      </tapa.send>

      #Expect HO Preparation Failure from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>

###############################################################################
# End of All successful cases at target eNodeB
###############################################################################

 
###############################################################################
# All successful cases at source eNodeB
###############################################################################



#
#
#       Test:    5.37
#
#       Desc:    Verify the successful completion of 
#                handover at source eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.37">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----SN Status Transfer-------------------->T eNodeB
#   S eNodeB-----UE Context Release-------------------->T eNodeB
#

      <tapa.desc>
        Verify the successful completion of complete 
        handover at source eNodeB.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>

       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

   
      #Send an HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect an HO Request Ack at eNB1.
      <tapa.expect>
       <tapa.czt.bmpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_ACK" oldUEX2APId="1"
                        newUEX2APId="2"/>
      </tapa.expect>
   
     # Send SN Status Transfer to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_SN_STATUS_TRFR" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect SN Status Transfer from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      #Send an UE Context Release back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect UE Context Release at eNB1.
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_UE_CXT_RELEASE" oldUEX2APId="1"
                        newUEX2APId="2"/>
      </tapa.expect>
   
   </tapa.test>


   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.38
#
#       Desc:    Verify the successful cancellation of complete 
#                handover at source eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.38">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack------------------- T eNodeB
#   S eNodeB-----Handover Cancel----------------------->T eNodeB
#

      <tapa.desc>
        Verify the successful completion of complete 
        handover at source eNodeB.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>

       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

      #Send an HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect an HO Request Ack at eNB1.
      <tapa.expect>
       <tapa.czt.bmpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_ACK" oldUEX2APId="1"
                        newUEX2APId="2"/>
      </tapa.expect>

     # Send HO Cancel to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Cancel from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

   </tapa.test>


   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.39
#
#       Desc:    Verify the successful failure of handover preparation 
#                at source eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.39">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Preparation Failure---------- T eNodeB
#

      <tapa.desc>
       Verify the successful failure of handover preparation 
       at source eNodeB.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>

       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

      #Send an HO Preparation Failure back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Preparation Failure at eNB1.
      <tapa.expect>
       <tapa.czt.bmpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1"/>
      </tapa.expect>

   </tapa.test>


   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>

###############################################################################
# End of All successful cases at source eNodeB
###############################################################################


###############################################################################
# More validations at source eNodeB
###############################################################################

#
#
#       Test:    5.40
#
#       Desc:    Verify that when in X2 Reset from peer, 
#                HO Procedure cannot be processed for same peer.
#                If TRelocprep timer expires the HO cancel shall not be sent 
#                to peer, instead user will be informed
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.40">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Reset ---------------------------------T eNodeB
#  Expect Error Indication at source eNodeB application also. 
#

      <tapa.desc>
       Verify that when in X2 Reset from peer, 
       HO Procedure cannot be processed for same peer.
       If TRelocprep timer expires the HO cancel shall not be sent 
       to peer, instead user will be informed
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Set the TRelocprep timer to 3 units explicitly
      <tapa.send>
         <tapa.lcz.cfg.prot procId="CZAC_LCZ_ENB1_PRC" tRELOCprep="3000"/>
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lcz.cfgcfm procId="CZAC_LCZ_ENB1_PRC"/>
      </tapa.expect>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     # Send Reset to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_RESET"/>
      </tapa.send>

      #Expect the Reset Response at eNB1
      <tapa.expect>
       <tapa.czt.gpind procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_RESET" />
      </tapa.expect>

    <tapa.delay delay="50" />

      <tapa.expect gaurdTmr="100">
      <tapa.czt.staind procId="CZAC_LCZ_ENB1_PRC" peerId="2" suId="0" 
                          staType="CZT_STA_TYPE_TMR_EXPIRY" 
                          status="CZT_STATUS_UE_TRELOCPREP_EXPIRY"
                          reason="CZT_REASON_NOT_APPL"  />
      </tapa.expect>

     
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.41
#
#       Desc:    Verify that when an HO Request Ack arrives from target eNodeB with
#                invalid new UE X2AP ID, the decoder detects it and returns Error Indication
#                back to target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.41">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack[New UE X2AP ID =4097]--T eNodeB
#   S eNodeB-----Error Indication --------------------->T eNodeB
#  Expect Error Indication at source eNodeB application also. 
#

      <tapa.desc>
         Verify that when an HO Request Ack arrives from target eNodeB with
         invalid new UE X2AP ID, the decoder detects it and returns Error Indication
         back to target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Set the TRelocprep timer to 3 units explicitly
      <tapa.send>
         <tapa.lcz.cfg.prot procId="CZAC_LCZ_ENB1_PRC" tRELOCprep="3"/>
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lcz.cfgcfm procId="CZAC_LCZ_ENB1_PRC"/>
      </tapa.expect>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     # Send HO Request Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="4097"/>
      </tapa.send>

      <tapa.expset> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               causeType="CAUSE_PROTOCOL"
                               causeVal="0" />
                               #CztCauseProttransfer_syntax_errorEnum"
                                                                                 
      #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                              eventType="CZT_MSG_HO_ACK"
                              errCause="CZT_ERRCAUSE_MAND_PARAM_MISSING"
                              errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.42
#
#       Desc:    Verify that when decode fails HO Fail is sent to peer.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.42">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB----- Garbled Handover Request (Old UE X2AP ID = "X") --------------->T eNodeB
#   T eNodeB----- Handover Failure---------------S eNodeB
#
# Send a malformed HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect HO Failure at source eNodeB.

      <tapa.desc>
                Verify that when decode fails HO Fail is sent to peer.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"
                                                                                 corruptPdu="TRUE" />
      </tapa.send>


      #Expect HO Failure due to decode failure
      <tapa.expset>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" 
                                                                  causeType="CAUSE_PROTOCOL"
                                                                  causeVal="6" />
                                #CztCauseProtabstract_syntax_error_falsely_constructed_messageEnum

            #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
            errCause="CZT_ERRCAUSE_SYNTAX_ERR"
            eventType="CZT_MSG_HO_ACK"
            errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.43
#
#       Desc:    Verify that if a HO Cancel is received with a wrong newUEX2APId 
#                Error Indication is sent to the peer.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.43">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request---------------------------------------->T eNodeB
#   S eNodeB-----Handover Cancel---------------------------------------->T eNodeB
#  Expect error indication at source eNodeB
#

      <tapa.desc>
       Verify that if a HO Cancel is received with a wrong newUEX2APId 
       Error Indication is sent to the peer.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>

       #Initialize eNB2 with dummy SCTP
       <tapa.cz.dummyenb2.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

     # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                                  eventType="CZT_MSG_HO_REQ" suId="0"
                                                                suAssocId="0"
                                                                assocIdx="0"
                                                                streamId="1"
                                                                oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1"
                          eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>
     
     # Send HO Cancel to eNB2
      <tapa.send>
       <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                                  eventType="CZT_MSG_HO_CANCEL" suId="0"
                                                                suAssocId="0"
                                                                assocIdx="0"
                                                                streamId="1"
                                                                oldUEX2APId="1" newUEX2APId="2" />
      </tapa.send>

                #expect Error indication at the peer eNB
      <tapa.expset>
       <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                                                                spId="0"
                        eventType="CZT_MSG_ERR_IND" 
                                                                trigMsgType="CZT_MSG_HO_CANCEL"
                        errType="CAUSE_RADIONW" 
                        errCause="5"/>
          #CztCauseRadioNwunknown_new_eNB_UE_X2AP_IDEnum
                        <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1"
                                                                  errType="CZT_ERRTYPE_FROM_PEER"
                                                                  errCause="CZT_ERRCAUSE_INV_NEW_UE_X2AP_ID" />

      </tapa.expset>

   </tapa.test>


   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.44
#
#       Desc:    Verify that if SN status transfer is receieved with wrong
#                newUEX2APId, an Error Indication is sent to the peer.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.44">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request---------------------->T eNodeB
#   S eNodeB-----Handover Request Acknowledge---------- T eNodeB
#   S eNodeB-----SN Status Transfer--------------------> T eNodeB
#   T X2AP  ----> Error Indication -------------> S eNB

      <tapa.desc>
       Verify that if SN status transfer is receieved with wrong
       newUEX2APId, an Error Indication is sent to the peer.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>


     #Send the HO Request Ack back
      <tapa.send>
       <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" 
                        oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Request Ack from eNodeB2. 
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      #Send SN Status Transfer to eNodeB2.
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_SN_STATUS_TRFR" 
                                                                                 oldUEX2APId="1" newUEX2APId="3"/>
      </tapa.send>
 
                #expect Error indication at the peer eNB
      <tapa.expset>
       <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                                                                spId="0"
                        spAssocId="1"
                        assocIdx="0"
                        eventType="CZT_MSG_ERR_IND" 
                                                                trigMsgType="CZT_MSG_SN_STATUS_TRFR"
                        errType="CAUSE_RADIONW" 
                        errCause="5"/>
          #CztCauseRadioNwunknown_new_eNB_UE_X2AP_IDEnum
                        <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1"
                                                                  errType="CZT_ERRTYPE_FROM_PEER"
                                                                  errCause="CZT_ERRCAUSE_INV_NEW_UE_X2AP_ID" />

      </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>



#
#
#       Test:    5.45
#
#       Desc:    Verify that if UE context release is receieved with wrong
#                newUEX2APId, an Error Indication is sent to the peer.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.45">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request Ack(New UE X2AP ID = "Y")-------------T eNodeB
#   S eNodeB-----Handover Request Ack(New UE X2AP ID = "Y")-------------T eNodeB
#   S eNodeB-----Error Indication------------------------------------->T eNodeB
#
# Send two HO Request Ack using dummy target eNodeB application with New UE X2AP ID = "Y".
# Expect first HO Request Ack at source application
# Expect error at source application w.r.t 2nd HO Request Ack, using appropriate 
# error id value. 

      <tapa.desc>
       Verify that if UE context release is receieved with wrong
       newUEX2APId, an Error Indication is sent to the peer.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
       <tapa.cz.dummyenb1.init />  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     
      #Send an HO Request ACK back to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect the HO Request Ack at eNB1
      <tapa.expect>
       <tapa.czt.bmpcfm procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_ACK" />
      </tapa.expect>

      #Send UE context release to eNB1 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_UE_CXT_RELEASE" 
                                                                                 oldUEX2APId="1" newUEX2APId="3"/>
      </tapa.send>

                #expect Error indication at the peer eNB
      <tapa.expset>
       <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                                                                spId="0"
                        spAssocId="1"
                        assocIdx="0"
                        eventType="CZT_MSG_ERR_IND" 
                                                                trigMsgType="CZT_MSG_UE_CXT_RELEASE"
                        errType="CAUSE_RADIONW" 
                        errCause="5"/>
          #CztCauseRadioNwunknown_new_eNB_UE_X2AP_IDEnum
                        <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2"
                                                                  errType="CZT_ERRTYPE_FROM_PEER"
                                                                  errCause="CZT_ERRCAUSE_INV_NEW_UE_X2AP_ID" />

      </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.46
#
#       Desc:    Verify if Error indication is receieved after a HO Req
#                a local error indication is sent to the user.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.46">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   T eNodeB-----Error Indication --------------------->S eNodeB
#  Expect Local Error Indication at source eNodeB application also. 
#

      <tapa.desc>
       Verify if Error indication is receieved after a HO Req
       a local error indication is sent to the user.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>
      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send HO Request to eNB2
      <tapa.send>
       <tapa.czt.bmpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_HO_REQ" oldUEX2APId="1"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.expect>

     # Send Error Indication to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                                                                                 trigMsgType="CZT_MSG_HO_REQ"
                                                                                 causeType="CAUSE_RADIONW"
                                                                                 causeVal="5"
                                                                                 oldUEX2APId="1" />
      </tapa.send>

      <tapa.expset> 
                <!--
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               causeType="CAUSE_PROTOCOL"
                               causeVal="0" />
                               #CztCauseProttransfer_syntax_errorEnum"
                        -->                                                         
      #Expect error indication at user about this
       <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                        eventType="CZT_MSG_ERR_IND"
                        errType="CZT_ERRTYPE_FROM_PEER"
                                                                errCause="CZT_ERRCAUSE_UNEXP_MSG" />
      </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.47
#
#       Desc:    cell actv req request decode error 
#                eNB1 ------>> malformed Cell Actv req ------>> eNB2
#                X2AP ------>> Cell actv fail to   ------>> eNB1
#               
#
#       Notes:   Neha
#              
#       Module:  
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.47">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="x2ap"/>

      <tapa.desc>
         cell actv req request decode error
         
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
  <tapa.require>

      <tapa.ifdef>
        <tapa.flag id="DM" />  
      </tapa.ifdef>

      <tapa.ifndef/>
      
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.cz.dummyenb2.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Send Cell Actv Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_CELL_ACTIVATION_REQ"
                                                                                 corruptPdu="TRUE" />
      </tapa.send>


      #Expect HO Failure due to decode failure
      <tapa.expset>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_CELL_ACTIVATION_FAIL" 
                                                                  causeType="CAUSE_PROTOCOL"
                                                                  causeVal="1" />
                                #CztCauseProtabstract_syntax_error_falsely_constructed_messageEnum

            #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
            errCause="CZT_ERRCAUSE_SYNTAX_ERR"
            eventType="CZT_MSG_CELL_ACTIVATION_REQ"
            errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test> 

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>




#
#
#       Test:    5.48
#
#       Desc:    Verify Decode Failure of Mobility Change Request.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.48">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

      <tapa.desc>
                "Verify in case of Decode Failure of Mobility Change Request.
                 X2AP at Enb2 will send  failure msg to peer(Enb1) and local
                 error indication to user(Enb2)"           
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

       # Start the actual handover now  -> Send Mobility Setting Change Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_MOB_CHANGE_REQ" 
                                                                                 corruptPdu="TRUE" />
      </tapa.send>


      #Expect Mobility Change  Failure due to decode failure
      <tapa.expset>
      
   <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_MOB_CHANGE_FAIL"   
                                                                  causeType="CAUSE_PROTOCOL"
                                                                  causeVal="1" />
                                #CztCauseProtabstract_syntax_error_falsely_constructed_messageEnum
            #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
            errCause="CZT_ERRCAUSE_SYNTAX_ERR"
            eventType="CZT_MSG_MOB_CHANGE_REQ"
            errType="CZT_ERRTYPE_DEC_FAILED" /> 
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.49
#
#       Desc:    Verify Decode Failure of Mobility Setting  Change Ack   
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.49">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

      <tapa.desc>
       "Verfiy incase of failure of Mobility Change Ack . X2AP at Enb1 will send X2AP Error Indicatoin
       to peer(Enb2) and Local Error indication to user(Enb1)"
       </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Start the actual handover now 
      # Send Mobility Seting Change  Request to eNB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_MOB_CHANGE_REQ" />
      </tapa.send>

      #Expect an Mobility Setting Change  Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_MOB_CHANGE_REQ" />
      </tapa.expect>

     # Send Mobility Setting Change Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_MOB_CHANGE_ACK" corruptPdu="TRUE" />
      </tapa.send>

      <tapa.expset> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               causeType="CAUSE_PROTOCOL"
                               causeVal="0" />
                               #CztCauseProttransfer_syntax_errorEnum"
                                                                                 
      #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                              eventType="CZT_MSG_MOB_CHANGE_ACK"
                               errCause="CZT_ERRCAUSE_SYNTAX_ERR"
                              errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.50
#
#       Desc:    Verify Decode Failure of Mobility Change Failure 
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.50">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

      <tapa.desc>
      "Verify  incase of Decode Failure of Mobility Change Failure.
      X2AP at Enb1 will send X2AP Error Indication to peer(Enb2) and local Error Indication to User(Enb1)."
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

      # Send Mobility Seting Change  Request to eNB2
      <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_MOB_CHANGE_REQ" />
      </tapa.send>

      #Expect an Mobility Setting Change  Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_MOB_CHANGE_REQ" />
      </tapa.expect>

     # Send Mobility Setting Change  Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_MOB_CHANGE_FAIL" corruptPdu="TRUE" />
      </tapa.send>

      <tapa.expset> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               causeType="CAUSE_PROTOCOL"
                               causeVal="0" />
                               #CztCauseProttransfer_syntax_errorEnum"
                                                                                 
      #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                              eventType="CZT_MSG_MOB_CHANGE_FAIL"
                               errCause="CZT_ERRCAUSE_SYNTAX_ERR"
                              errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>


#
#
#       Test:    5.51
#
#       Desc:    Verify that when an HO Request Ack arrives from target eNodeB with
#                invalid new UE X2AP ID, the decoder detects it and returns Error Indication
#                back to target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.51">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack[New UE X2AP ID =4097]--T eNodeB
#   S eNodeB-----Error Indication --------------------->T eNodeB
#  Expect Error Indication at source eNodeB application also. 
#

      <tapa.desc>
         Verify that when an HO Request Ack arrives from target eNodeB with
         invalid new UE X2AP ID, the decoder detects it and returns Error Indication
         back to target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Set the TRelocprep timer to 3 units explicitly
      <tapa.send>
         <tapa.lcz.cfg.prot procId="CZAC_LCZ_ENB1_PRC" tRELOCprep="3"/>
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lcz.cfgcfm procId="CZAC_LCZ_ENB1_PRC"/>
      </tapa.expect>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Send HO Request Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" corruptPdu="TRUE" />
      </tapa.send>

      <tapa.expset> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               causeType="CAUSE_PROTOCOL"
                               causeVal="0" />
                               #CztCauseProttransfer_syntax_errorEnum"
                                                                                 
      #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                              eventType="CZT_MSG_HO_REQ"
                              errCause="CZT_ERRCAUSE_SYNTAX_ERR"
                              errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    5.52
#
#       Desc:    Verify that when an HO Request Ack arrives from target eNodeB with
#                invalid new UE X2AP ID, the decoder detects it and returns Error Indication
#                back to target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.52">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack[New UE X2AP ID =4097]--T eNodeB
#   S eNodeB-----Error Indication --------------------->T eNodeB
#  Expect Error Indication at source eNodeB application also. 
#

      <tapa.desc>
         Verify that when an HO Request Ack arrives from target eNodeB with
         invalid new UE X2AP ID, the decoder detects it and returns Error Indication
         back to target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Set the TRelocprep timer to 3 units explicitly
      <tapa.send>
         <tapa.lcz.cfg.prot procId="CZAC_LCZ_ENB1_PRC" tRELOCprep="3"/>
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lcz.cfgcfm procId="CZAC_LCZ_ENB1_PRC"/>
      </tapa.expect>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Send HO Request Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" corruptPdu="TRUE" />
      </tapa.send>

      <tapa.expset> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               causeType="CAUSE_PROTOCOL"
                               causeVal="0" />
                               #CztCauseProttransfer_syntax_errorEnum"
                                                                                 
      #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                              eventType="CZT_MSG_HO_REQ"
                              errCause="CZT_ERRCAUSE_MAND_PARAM_MISSING"
                              errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>
#
#
#       Test:    5.53
#
#       Desc:    Verify that when an HO Request Ack arrives from target eNodeB with
#                invalid new UE X2AP ID, the decoder detects it and returns Error Indication
#                back to target eNodeB.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.53">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request----------------------->T eNodeB
#   S eNodeB-----Handover Request Ack[New UE X2AP ID =4097]--T eNodeB
#   S eNodeB-----Error Indication --------------------->T eNodeB
#  Expect Error Indication at source eNodeB application also. 
#

      <tapa.desc>
         Verify that when an HO Request Ack arrives from target eNodeB with
         invalid new UE X2AP ID, the decoder detects it and returns Error Indication
         back to target eNodeB.
     </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB1 with dummy SCTP
      <tapa.cz.dummyenb1.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Set the TRelocprep timer to 3 units explicitly
      <tapa.send>
         <tapa.lcz.cfg.prot procId="CZAC_LCZ_ENB1_PRC" tRELOCprep="3"/>
      </tapa.send>

      # Receive the confirm for the protocol configuration request.
      <tapa.expect>
         <tapa.lcz.cfgcfm procId="CZAC_LCZ_ENB1_PRC"/>
      </tapa.expect>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

     # Send HO Request Ack to eNB1
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="4098" corruptPdu="TRUE" />
      </tapa.send>

      <tapa.expset> 
      <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_ERR_IND" 
                               causeType="CAUSE_PROTOCOL"
                               causeVal="0" />
                               #CztCauseProttransfer_syntax_errorEnum"
                                                                                 
      #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB1_PRC" peerId="2" 
                              eventType="CZT_MSG_HO_REQ"
                              errCause="CZT_ERRCAUSE_MAND_PARAM_MISSING"
                              errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB1 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    5.54
#
#       Desc:    Verify that when decode fails HO Fail is sent to peer.
#
#       Notes:   None
#              
#       Module:  None 
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.54">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB----- Garbled Handover Request (Old UE X2AP ID = "X") --------------->T eNodeB
#   T eNodeB----- Handover Failure---------------S eNodeB
#
# Send a malformed HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect HO Failure at source eNodeB.

      <tapa.desc>
                Verify that when decode fails HO Fail is sent to peer.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="CZ_UNKNOWN_UE_X2AP_ID" unknownMsg="TRUE"

                                                                                 corruptPdu="TRUE" />
      </tapa.send>

      #Expect HO Failure due to decode failure
      <tapa.expset>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" 
                                                                  causeType="CAUSE_PROTOCOL"
                                                                  causeVal="6" />
                                #CztCauseProtabstract_syntax_error_falsely_constructed_messageEnum

            #Expect error indication at user about this
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
            errCause="CZT_ERRCAUSE_MAND_PARAM_MISSING"
            eventType="CZT_MSG_HO_REQ"
            errType="CZT_ERRTYPE_DEC_FAILED" />
         </tapa.expset>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>
#
#
#       Test:    5.55
#
#       Desc:    Verify that two Handover Requests sent from source eNodeB with
#                same Old UE X2AP ID value is detected by X2AP stack at target
#                eNodeB. X2AP at target eNodeB shall inform the Application
#                through a special error indication primitive about the
#                Handover Request with duplicate Old UE X2AP ID value.
#
#       Notes:   None
#              
#       Module:  None 
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.55">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Failure---------------T eNodeB
#
# Send two HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect first HO Request at target application
# Expect HO Failure at source eNodeB w.r.t 2nd HO Request.
# Expect error at target application w.r.t 2nd HO Request, using appropriate 
# error id value. 

      <tapa.desc>
      Verify that two Handover Requests sent from source eNodeB with 
      same Old UE X2AP ID value is detected by X2AP stack at target
      eNodeB. X2AP at target eNodeB shall inform back to source eNodeB
      through Handover Preparation Failure.
      And also the application at its end through a special error 
      indication primitive about the Handover Request with duplicate
      Old UE X2AP ID value.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send a new Association Indication to eNodeB2
      <tapa.send>
         <tapa.sct.assocind procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                            suEndpId="0" 
                            assocIdx="0" type="SCT_ASSOC_IND_COOKIE" />
      </tapa.send>

      # Receive back the Association Response from eNodeB2
      <tapa.expect>
         <tapa.sct.assocrsp procId="CZAC_LCZ_ENB2_PRC" spId="0" 
                           spEndpId="0" 
                           assocIdx="0" type="SCT_ASSOC_IND_COOKIE"/>
      </tapa.expect>
     #Send another HO Request with same old UE X2AP Id 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                          suAssocId="0" 
                          assocIdx="0"
                          streamId="1"
                          eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect HO Failure for the second one before user responds with HO ACK for the first one
      <tapa.expect>
      #Expect error indication at user about this, that another HO request
       arrived with duplicate old UE X2AP Id
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                          eventType="CZT_MSG_HO_REQ"
                          errType="CZT_ERRTYPE_FROM_PEER"
                          errCause="CZT_ERRCAUSE_INV_STATE"/>

      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb3.deinit />
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    5.56
#
#       Desc:    Verify that two Handover Requests sent from source eNodeB with
#                same Old UE X2AP ID value is detected by X2AP stack at target
#                eNodeB. X2AP at target eNodeB shall inform the Application
#                through a special error indication primitive about the
#                Handover Request with duplicate Old UE X2AP ID value.
#
#       Notes:   None
#              
#       Module:  None 
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.56">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Failure---------------T eNodeB
#
# Send two HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect first HO Request at target application
# Expect HO Failure at source eNodeB w.r.t 2nd HO Request.
# Expect error at target application w.r.t 2nd HO Request, using appropriate 
# error id value. 

      <tapa.desc>
      Verify that two Handover Requests sent from source eNodeB with 
      same Old UE X2AP ID value is detected by X2AP stack at target
      eNodeB. X2AP at target eNodeB shall inform back to source eNodeB
      through Handover Preparation Failure.
      And also the application at its end through a special error 
      indication primitive about the Handover Request with duplicate
      Old UE X2AP ID value.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send a new Association Indication to eNodeB2
      <tapa.send>
         <tapa.sct.assocind procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                            suEndpId="0" 
                            assocIdx="0" type="SCT_ASSOC_IND_COOKIE" />
      </tapa.send>

      # Receive back the Association Response from eNodeB2
      <tapa.expect>
         <tapa.sct.assocrsp procId="CZAC_LCZ_ENB2_PRC" spId="0" 
                           spEndpId="0" 
                           assocIdx="0" type="SCT_ASSOC_IND_COOKIE"/>
      </tapa.expect>
     #Send another HO Request with same old UE X2AP Id 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                          suAssocId="0" 
                          assocIdx="0"
                          streamId="1"
                          eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" />
      </tapa.send>

      #Expect HO Failure for the second one before user responds with HO ACK for the first one
      <tapa.expect>
      #Expect error indication at user about this, that another HO request
       arrived with duplicate old UE X2AP Id
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                          eventType="CZT_MSG_HO_CANCEL"
                          errType="CZT_ERRTYPE_FROM_PEER"
                          errCause="CZT_ERRCAUSE_INV_STATE"/>

      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb3.deinit />
   </tapa.shutdown>

</tapa.testcase>
#
#
#       Test:    5.57
#
#       Desc:    Verify that two Handover Requests sent from source eNodeB with
#                same Old UE X2AP ID value is detected by X2AP stack at target
#                eNodeB. X2AP at target eNodeB shall inform the Application
#                through a special error indication primitive about the
#                Handover Request with duplicate Old UE X2AP ID value.
#
#       Notes:   None
#              
#       Module:  None 
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.57">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Failure---------------T eNodeB
#
# Send two HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect first HO Request at target application
# Expect HO Failure at source eNodeB w.r.t 2nd HO Request.
# Expect error at target application w.r.t 2nd HO Request, using appropriate 
# error id value. 

      <tapa.desc>
      Verify that two Handover Requests sent from source eNodeB with 
      same Old UE X2AP ID value is detected by X2AP stack at target
      eNodeB. X2AP at target eNodeB shall inform back to source eNodeB
      through Handover Preparation Failure.
      And also the application at its end through a special error 
      indication primitive about the Handover Request with duplicate
      Old UE X2AP ID value.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send a new Association Indication to eNodeB2
      <tapa.send>
         <tapa.sct.assocind procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                            suEndpId="0" 
                            assocIdx="0" type="SCT_ASSOC_IND_COOKIE" />
      </tapa.send>

      # Receive back the Association Response from eNodeB2
      <tapa.expect>
         <tapa.sct.assocrsp procId="CZAC_LCZ_ENB2_PRC" spId="0" 
                           spEndpId="0" 
                           assocIdx="0" type="SCT_ASSOC_IND_COOKIE"/>
      </tapa.expect>
     #Send another HO Request with same old UE X2AP Id 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                          suAssocId="0" 
                          assocIdx="0"
                          streamId="1"
                          eventType="CZT_MSG_HO_CANCEL" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.send>

      #Expect HO Failure for the second one before user responds with HO ACK for the first one
      <tapa.expect>
      #Expect error indication at user about this, that another HO request
       arrived with duplicate old UE X2AP Id
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                          eventType="CZT_MSG_HO_CANCEL"
                          errType="CZT_ERRTYPE_FROM_PEER"
                          errCause="CZT_ERRCAUSE_INV_STATE"/>

      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb3.deinit />
   </tapa.shutdown>

</tapa.testcase>
#
#
#       Test:    5.58
#
#       Desc:    Verify that two Handover Requests sent from source eNodeB with
#                same Old UE X2AP ID value is detected by X2AP stack at target
#                eNodeB. X2AP at target eNodeB shall inform the Application
#                through a special error indication primitive about the
#                Handover Request with duplicate Old UE X2AP ID value.
#
#       Notes:   None
#              
#       Module:  None
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.58">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Failure---------------T eNodeB
#
# Send two HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect first HO Request at target application
# Expect HO Failure at source eNodeB w.r.t 2nd HO Request.
# Expect error at target application w.r.t 2nd HO Request, using appropriate 
# error id value. 

      <tapa.desc>
      Verify that two Handover Requests sent from source eNodeB with 
      same Old UE X2AP ID value is detected by X2AP stack at target
      eNodeB. X2AP at target eNodeB shall inform back to source eNodeB
      through Handover Preparation Failure.
      And also the application at its end through a special error 
      indication primitive about the Handover Request with duplicate
      Old UE X2AP ID value.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      # Send a new Association Indication to eNodeB2
      <tapa.send>
         <tapa.sct.assocind procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                            suEndpId="0" 
                            assocIdx="0" type="SCT_ASSOC_IND_COOKIE" />
      </tapa.send>

      # Receive back the Association Response from eNodeB2
      <tapa.expect>
         <tapa.sct.assocrsp procId="CZAC_LCZ_ENB2_PRC" spId="0" 
                           spEndpId="0" 
                           assocIdx="0" type="SCT_ASSOC_IND_COOKIE"/>
      </tapa.expect>
      
      # Send Status Indication to eNB2 that ASSOC UP 
      <tapa.send>
         <tapa.sct.staind procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                          suAssocId="1" 
                          spAssocId="1" 
                          status="SCT_STATUS_COMM_UP"/> 
      </tapa.send>
      
      <tapa.delay delay="5" />
      
      # Expect Status Indication ASSOC UP with user at eNodeB2 
      <tapa.expset>

         <tapa.lcz.staInd category="LCM_CATEGORY_PROTOCOL"
                          event = "LCZ_EVENT_LI_COMM_UP"
                          cause = "LCZ_CAUSE_SCT_NOT_APPL"
                          type   = "LCZ_USTA_DGNVAL_PEER"
                          typeId =  "1"
                          procId="300"               />
                                   
#         <tapa.czt.staind procId="CZAC_LCZ_ENB2_PRC" peerId="1" suId="0" 
#                          staType="CZT_STA_TYPE_ASSOC" 
#                          status="CZT_STATUS_ASSOC_UP"
#                          reason="CZT_REASON_RCVD_COMM_UP"  />
      </tapa.expset>         

      # Second start the X2 Interface setup
      # Now send the first X2 Setup message to eNodeB2
      <tapa.send>
         <tapa.sct.datind  procId="CZAC_LCZ_ENB2_PRC" suId="0" 
                           suAssocId="1" 
                           assocIdx="0" 
                           strmId="1"
                           eventType="CZT_MSG_X2_SETUP" />
      </tapa.send>

      # Expect a new X2 Setup with user at eNodeB2 
      <tapa.expect>
         <tapa.czt.gpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_X2_SETUP"  eNBId="1" />
      </tapa.expect>     
     #Send another HO Request with same old UE X2AP Id 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                          suAssocId="0" 
                          assocIdx="0"
                          streamId="1"
                          eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>
   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    5.59
#
#       Desc:    Verify that two Handover Requests sent from source eNodeB with
#                same Old UE X2AP ID value is detected by X2AP stack at target
#                eNodeB. X2AP at target eNodeB shall inform the Application
#                through a special error indication primitive about the
#                Handover Request with duplicate Old UE X2AP ID value.
#
#       Notes:   None
#              
#       Module:  None 
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.59">

   # Document subsection
   <tapa.doc>

      <tapa.rfc />
      <tapa.module />

#
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Request(Old UE X2AP ID = "X")--------------->T eNodeB
#   S eNodeB-----Handover Failure---------------T eNodeB
#
# Send two HO Request using dummy source eNodeB application with Old UE X2AP ID = "X".
# Expect first HO Request at target application
# Expect HO Failure at source eNodeB w.r.t 2nd HO Request.
# Expect error at target application w.r.t 2nd HO Request, using appropriate 
# error id value. 

      <tapa.desc>
      Verify that two Handover Requests sent from source eNodeB with 
      same Old UE X2AP ID value is detected by X2AP stack at target
      eNodeB. X2AP at target eNodeB shall inform back to source eNodeB
      through Handover Preparation Failure.
      And also the application at its end through a special error 
      indication primitive about the Handover Request with duplicate
      Old UE X2AP ID value.
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>


   # Require features and flags subsection
   <tapa.require>
      <tapa.ifdef>
         <tapa.flag id="DM" />  
      </tapa.ifdef>
       <tapa.ifndef/>
       <tapa.mode mode="single"/>
   </tapa.require>


   # Configuration subsection
   <tapa.cfg>
       #Initialize eNB2 with dummy SCTP
      <tapa.cz.dummyenb2.init/>  
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # Start the actual handover now  -> Send HO Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect the HO Request at eNB2
      <tapa.expect>
       <tapa.czt.bmpind procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_REQ" />
      </tapa.expect>

      <tapa.send>
     <tapa.czt.bmprsp procId="CZAC_LCZ_ENB2_PRC" peerId="1" eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2" />
      </tapa.send>
     
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_ACK" oldUEX2APId="1" newUEX2APId="2"/>
      </tapa.expect>

      #Send another HO Request with same old UE X2AP Id 
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                          suAssocId="0" 
                          assocIdx="0"
                          streamId="1"
                          eventType="CZT_MSG_HO_REQ" oldUEX2APId="1" />
      </tapa.send>

      #Expect HO Failure for the second one before user responds with HO ACK for the first one
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="2"
                          assocIdx="0"
                          eventType="CZT_MSG_HO_FAIL" oldUEX2APId="1" />
      </tapa.expect>

      #Expect error indication at user about this, that another HO request
       arrived with duplicate old UE X2AP Id
      <tapa.expect>
         <tapa.czt.errind procId="CZAC_LCZ_ENB2_PRC" peerId="1" 
                          eventType="CZT_MSG_HO_REQ"
                          errType="CZT_ERRTYPE_FROM_PEER"
                          errCause="CZT_ERRCAUSE_INV_STATE"/>

      </tapa.expect>

   </tapa.test>

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    5.60
#
#       Desc:    cell actv req request decode error 
#                eNB1 ------>> malformed Cell Actv req ------>> eNB2
#                X2AP ------>> Cell actv fail to   ------>> eNB1
#               
#
#       Notes:   None
#              
#       Module:  
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.60">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="x2ap"/>

      <tapa.desc>
         cell actv req request decode error
         
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
  <tapa.require>

      <tapa.ifdef>
        <tapa.flag id="DM" />  
      </tapa.ifdef>

      <tapa.ifndef/>
      
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.cz.dummyenb2.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb2.x2.init/>

      # unbind the upper SAP at eNB1.
      <tapa.send>
         <tapa.czt.ubndreq procId="CZAC_LCZ_ENB2_PRC" />
      </tapa.send> 

      <tapa.delay delay="50"/>

      # Send Cell Actv Request to eNB2
      <tapa.send>
         <tapa.sct.datind procId="CZAC_LCZ_ENB2_PRC" suId="0"
                               suAssocId="0" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_CELL_ACTIVATION_REQ"/>
      </tapa.send>
      
      #Expect HO Failure for the second one before user responds with HO ACK for the first one
       <tapa.expset>
           <tapa.lcz.staInd category="LCM_CATEGORY_INTERFACE"
                       event = "LCZ_EVENT_UI_MSG_PEER"
                       cause = "LCZ_CAUSE_NOT_BIND"
                       type   =  "LCZ_USTA_DGNVAL_SAPID"
                       typeId =  "0"      
                       procId="CZAC_LCZ_ENB2_PRC" /> 
         <tapa.sct.datreq procId="CZAC_LCZ_ENB2_PRC" spId="0"
                          spAssocId="1"
                          assocIdx="0" streamId="0"
                          eventType="CZT_MSG_CELL_ACTIVATION_REQ"/> 
      </tapa.expset>
   </tapa.test> 

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb2.deinit />  
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    5.61
#
#       Desc:    cell actv req request decode error 
#                eNB1 ------>> malformed Cell Actv req ------>> eNB2
#                X2AP ------>> Cell actv fail to   ------>> eNB1
#               
#
#       Notes:   None
#              
#       Module:  
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.61">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="x2ap"/>

      <tapa.desc>
         cell actv req request decode error
         
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
  <tapa.require>

      <tapa.ifdef>
        <tapa.flag id="DM" />  
      </tapa.ifdef>

      <tapa.ifndef/>
      
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.cz.dummyenb1.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

       <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_CELL_ACTIVATION_REQ"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_CELL_ACTIVATION_REQ"/>
      </tapa.expect>

      <tapa.send>
         <tapa.czt.ubndreq procId="CZAC_LCZ_ENB1_PRC" />
      </tapa.send> 
      
      <tapa.delay delay="50"/>
      
      <tapa.send>
       <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" peerId="1" 
                        eventType="CZT_MSG_CELL_ACTIVATION_FAIL" suId="0"
                        suAssocId="0" 
                        assocIdx="0"
                        streamId="1" />
      </tapa.send>

       <tapa.expset>
           <tapa.lcz.staInd category="LCM_CATEGORY_INTERFACE"
                       event = "LCZ_EVENT_UI_MSG_PEER"
                       cause = "LCZ_CAUSE_NOT_BIND"
                       type   =  "LCZ_USTA_DGNVAL_SAPID"
                       typeId =  "0"      
                       procId="CZAC_LCZ_ENB1_PRC" /> 
           <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC"  
                        eventType="CZT_MSG_ERR_IND" spId="0"
			trigMsgType="CZT_MSG_CELL_ACTIVATION_FAIL"
                        spAssocId="2" 
                        assocIdx="0"
                        causeType="CAUSE_PROTOCOL"
                        causeVal="3" /> 
      </tapa.expset>

   </tapa.test> 

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>

#
#
#       Test:    5.62
#
#       Desc:    cell actv req request decode error 
#                eNB1 ------>> malformed Cell Actv req ------>> eNB2
#                X2AP ------>> Cell actv fail to   ------>> eNB1
#               
#
#       Notes:   None
#              
#       Module:  
#
#       File:    czac_tc5.xml
#
#
<tapa.testcase id="5.62">

   # Document subsection
   <tapa.doc>

      <tapa.rfc id="None" section="None"/>
      <tapa.module id="x2ap"/>

      <tapa.desc>
         cell actv req request decode error
         
      </tapa.desc>

      <tapa.longdesc/>

   </tapa.doc>

   # Require features and flags subsection
  <tapa.require>

      <tapa.ifdef>
        <tapa.flag id="DM" />  
      </tapa.ifdef>

      <tapa.ifndef/>
      
      <tapa.mode mode="single"/>

   </tapa.require>

   # Configuration subsection
   <tapa.cfg>
      <tapa.cz.dummyenb1.init/>
   </tapa.cfg>

   # Test Steps subsection
   <tapa.test>

      #Bring up X2 Interface 
      <tapa.cz.dummy.enb1.x2.init/>

       <tapa.send>
       <tapa.czt.gpreq procId="CZAC_LCZ_ENB1_PRC" peerId="2" eventType="CZT_MSG_CELL_ACTIVATION_REQ"/>
      </tapa.send>

      #Expect an HO Request from eNB1.
      <tapa.expect>
         <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC" spId="0"
                               spAssocId="2" 
                               assocIdx="0"
                               streamId="1"
                               eventType="CZT_MSG_CELL_ACTIVATION_REQ"/>
      </tapa.expect>

      <tapa.send>
         <tapa.czt.ubndreq procId="CZAC_LCZ_ENB1_PRC" />
      </tapa.send> 
      
       <tapa.delay delay="50"/>
      
       <tapa.send>
       <tapa.sct.datind procId="CZAC_LCZ_ENB1_PRC" peerId="1" 
                        eventType="CZT_MSG_CELL_ACTIVATION_RES" suId="0"
                        suAssocId="0" 
                        assocIdx="0"
                        streamId="1" />
      </tapa.send>

      <tapa.expset>
        <tapa.lcz.staInd category="LCM_CATEGORY_INTERFACE"
                       event = "LCZ_EVENT_UI_MSG_PEER"
                       cause = "LCZ_CAUSE_NOT_BIND"
                       type   =  "LCZ_USTA_DGNVAL_SAPID"
                       typeId =  "0"      
                       procId="CZAC_LCZ_ENB1_PRC" /> 
       <tapa.sct.datreq procId="CZAC_LCZ_ENB1_PRC"  
                        eventType="CZT_MSG_ERR_IND" spId="0"
			trigMsgType="CZT_MSG_CELL_ACTIVATION_RES"
                        spAssocId="2" 
                        assocIdx="0"
                        causeType="CAUSE_PROTOCOL"
                        causeVal="3" />
      </tapa.expset>

   </tapa.test> 

   # Clean subsection
   <tapa.clean/>

   # Shutdown subsection
   <tapa.shutdown>
       #Deinitialize eNB2 with dummy SCTP
       <tapa.cz.dummy.enb1.deinit />  
   </tapa.shutdown>

</tapa.testcase>
# DO NOT DELETE THIS LINE -- TC number generation script depends on it.
# xyzabcend

#/********************************************************************30**
#
#         End of file:    fileName
#
#*********************************************************************31*/
#
#
#/********************************************************************40**
#
#        Notes:
#
#*********************************************************************41*/
#
#/********************************************************************50**
#
#*********************************************************************51*/
#
#
#/********************************************************************60**
#
#        Revision history:
#
#*********************************************************************61*/
#
#/********************************************************************90**
#
#     ver       pat    init                  description
#------------ -------- ---- ----------------------------------------------
#$SID$        ---      prgName     1. X2AP Initial Release.
#$SID$        ---      pt          1. LTE-X2AP 3.1 release.
#*********************************************************************91*/
