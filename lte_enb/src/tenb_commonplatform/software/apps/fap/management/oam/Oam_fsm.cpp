
///////////////////////////////////////////////////////////////////////////////
//
//Oam_fsm.cpp
//
// Autogenerated from oam.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Oam_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace Oam;

namespace Oam
{

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
OamFsm::OamFsm(
    OamFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mAll(*this ),
    mFpgaRem(*this ),
    mInitialising(*this ),
    mStart(*this ),
    mIdle(*this ),
    mRemScanInProgress(*this ),
    mWaitingForFullScanComplete(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    // Initial State
    mAll.Entry();
    mInitialising.Entry();
    mStart.Entry();

   if(NULL != mState)
   {
      while( !mState->RunToCompletion() )
      {
         continue;
      }
   }
}

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
OamFsm::~OamFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "OamFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::InjectAppsReady(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( OamFsm::FSM_EVENT_AppsReady, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::InjectFullScanRequested(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( OamFsm::FSM_EVENT_FullScanRequested, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::InjectConfigurationComplete(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( OamFsm::FSM_EVENT_ConfigurationComplete, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::InjectNodeBConfigChanged(u32 event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_u32(event));
    Enqueue( OamFsm::FSM_EVENT_NodeBConfigChanged, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
const char * OamFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "AppsReady",
    "FullScanRequested",
    "ConfigurationComplete",
    "NodeBConfigChanged",
};

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case OamFsm::FSM_EVENT_AppsReady:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectAppsReady(event->mEvent);
        }
        break;

        case OamFsm::FSM_EVENT_FullScanRequested:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectFullScanRequested(event->mEvent);
        }
        break;

        case OamFsm::FSM_EVENT_ConfigurationComplete:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectConfigurationComplete(event->mEvent);
        }
        break;

        case OamFsm::FSM_EVENT_NodeBConfigChanged:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_u32 == fsmEvent->mEventType);
            shared_ptr<FsmEvent_u32> event = dynamic_pointer_cast<FsmEvent_u32>(fsmEvent);
            InjectNodeBConfigChanged(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::Start::InjectAppsReady(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.Tr069Enabled(event))
    {
        mFsm.TracePoint( "Tr069Enabled? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mFpgaRem.Entry();
        mFsm.mIdle.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mFpgaRem.Entry();
        mFsm.mIdle.Entry();
    }
}

// Event FullScanRequested not handled in state Start

// Event ConfigurationComplete not handled in state Start

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::Start::InjectNodeBConfigChanged(
    u32 event
    )
{
}

// State Start has no deferred events.

// Event AppsReady not handled in state Idle

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::Idle::InjectFullScanRequested(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mRemScanInProgress.Entry();
        mFsm.mWaitingForFullScanComplete.Entry();
    }
}

// Event ConfigurationComplete not handled in state Idle

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::Idle::InjectNodeBConfigChanged(
    u32 event
    )
{
}

// State Idle has no deferred events.

// Event AppsReady not handled in state WaitingForFullScanComplete

// Event FullScanRequested not handled in state WaitingForFullScanComplete

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::WaitingForFullScanComplete::InjectConfigurationComplete(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mIdle.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
void OamFsm::WaitingForFullScanComplete::InjectNodeBConfigChanged(
    u32 event
    )
{
}

// State WaitingForFullScanComplete has no deferred events.

} // -namespace-

