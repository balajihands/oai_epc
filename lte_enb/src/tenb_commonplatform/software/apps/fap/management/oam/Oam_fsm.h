
///////////////////////////////////////////////////////////////////////////////
//
// Oam_fsm.h
//
// Autogenerated from oam.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __Oam_fsm_h_
#define __Oam_fsm_h_
///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <deque>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Oam_fsm_interface.h"

using namespace Oam;

namespace Oam
{

/*** WARNING: Code AUTO-GENERATED from oam.fsm. Do not edit! ***/
class OamFsm
{
public:

    OamFsm(
        OamFsmInterface & interfaceClass,
        bool traceEnabled = false,
        const char * name = "OamFsm"
        );
    virtual ~OamFsm();

    void InjectAppsReady(void* event);
    void InjectFullScanRequested(void* event);
    void InjectConfigurationComplete(void* event);
    void InjectNodeBConfigChanged(u32 event);
    std::string ToString() const
    {
        std::string returnedString(mName);

        if(mState)
        {
            returnedString += ".";
            returnedString += mState->mName;
        }

        return returnedString;
    }

    void Rename( const std::string & newName)
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.-: Renamed to %s", mName.c_str(), newName.c_str() );
        }
        mName = newName;
    }

    void SetFsmTraceEnable( bool traceEnable = true ) { mFsmTraceEnabled = traceEnable; }

    void TracePoint( const char * s )
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.%u: %s", mName.c_str(), mEventCounter, s );
        }
    }

private:
    typedef enum EventId_tag
    {
        FSM_EVENT_AppsReady,
        FSM_EVENT_FullScanRequested,
        FSM_EVENT_ConfigurationComplete,
        FSM_EVENT_NodeBConfigChanged,
        NUMBER_OF_INJECTABLE_EVENTS
    } EventId;

    typedef enum EventType_tag
    {
        FSM_EVENT_TYPE_void_STAR_,
        FSM_EVENT_TYPE_u32,
        NUMBER_OF_EVENT_TYPES
    } EventType;

    class FsmEvent
    {
    public:
        FsmEvent( EventType eventType ) :
            mEventType(eventType) {}
        virtual ~FsmEvent(){}

        EventType mEventType;
    };

    class FsmEvent_void_STAR_ : public FsmEvent
    {
    public:
        FsmEvent_void_STAR_( void* event ) :
            FsmEvent(FSM_EVENT_TYPE_void_STAR_),
            mEvent(event) {}
        ~FsmEvent_void_STAR_() {}
    	void* mEvent;
    };

    class FsmEvent_u32 : public FsmEvent
    {
    public:
        FsmEvent_u32( u32 event ) :
            FsmEvent(FSM_EVENT_TYPE_u32),
            mEvent(event) {}
        ~FsmEvent_u32() {}
    	u32 mEvent;
    };

    void Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent );

    class State;
    typedef std::deque< State * > StateHistory;

    class State
    {
    public:
        State(OamFsm & fsm, const char * name ) :
            mFsm(fsm),
            mName(name){}
        virtual ~State(){}

        virtual void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData ) { RSYS_ASSERT_PRINTF(false,"Cannot inject in state %s.", mName.c_str()); }
        virtual bool RunToCompletion() { RSYS_ASSERT_PRINTF(false,"RunToCompletion failure in state %s.", mName.c_str()); return false; };
        virtual bool DeferEvent( EventId ) const { RSYS_ASSERT_PRINTF(false,"Cannot defer in state %s.", mName.c_str()); return false; }

        virtual void Entry()
        {
            RSYS_ASSERT( mFsm.mState == GetSuperstate() );

            UpdateHistoryUponEntry();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceEntryMethod();

            mFsm.mState = this;
        }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            UpdateHistoryUponExit();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }

        OamFsm& mFsm;
        std::string mName;
        virtual State * GetSuperstate() const { return NULL; }
        virtual void  InterfaceEntryMethod() {}
        virtual void  InterfaceExitMethod() {}
        virtual void  UpdateHistoryUponExit() { mFsm.mCurrentStateTransitionExitsList.push_front( mFsm.mState ); }
        virtual void  UpdateHistoryUponEntry() { mFsm.mCurrentStateTransitionExitsList.clear(); }
    };

    class SimpleState : public State
    {
    public:
        SimpleState(OamFsm & fsm, const char * name) :
            State(fsm, name){}
        virtual ~SimpleState(){}

        void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData );
        virtual bool RunToCompletion() { return true; }

        virtual bool DeferEvent( EventId ) const { return false; }
        virtual void InjectAppsReady( void* eventData) { EventConsumed(FSM_EVENT_AppsReady); }
        virtual void InjectFullScanRequested( void* eventData) { EventConsumed(FSM_EVENT_FullScanRequested); }
        virtual void InjectConfigurationComplete( void* eventData) { EventConsumed(FSM_EVENT_ConfigurationComplete); }
        virtual void InjectNodeBConfigChanged( u32 eventData) { EventConsumed(FSM_EVENT_NodeBConfigChanged); }

    private:
        void EventConsumed( EventId queuedEventId )
        {
            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s consumed %s", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str(), mEventName[queuedEventId] ); }
        }
    };

    class Start : public SimpleState
    {
    public:
        Start(OamFsm & fsm) :
            SimpleState(fsm, "Start") {}
        virtual ~Start(){}

        void InterfaceExitMethod( void ) {  mFsm.mInterface.StartExit();}
        State * GetSuperstate() const { return &mFsm.mInitialising; }
        virtual void InjectAppsReady( void* eventData);
        virtual void InjectNodeBConfigChanged( u32 eventData);
    };

    class Idle : public SimpleState
    {
    public:
        Idle(OamFsm & fsm) :
            SimpleState(fsm, "Idle") {}
        virtual ~Idle(){}

        State * GetSuperstate() const { return &mFsm.mFpgaRem; }
        virtual void InjectFullScanRequested( void* eventData);
        virtual void InjectNodeBConfigChanged( u32 eventData);
    };

    class WaitingForFullScanComplete : public SimpleState
    {
    public:
        WaitingForFullScanComplete(OamFsm & fsm) :
            SimpleState(fsm, "WaitingForFullScanComplete") {}
        virtual ~WaitingForFullScanComplete(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.WaitingForFullScanCompleteEntry();}
        State * GetSuperstate() const { return &mFsm.mRemScanInProgress; }
        virtual void InjectConfigurationComplete( void* eventData);
        virtual void InjectNodeBConfigChanged( u32 eventData);
    };

    class Superstate : public State
    {
    public:
        Superstate(OamFsm & fsm, const char * name) :
            State(fsm, name)
        { }
        virtual ~Superstate()
        { }
    };

    class SuperstateWithInitialState : public Superstate
    {
    public:
        SuperstateWithInitialState(OamFsm & fsm, const char * name) :
            Superstate(fsm, name) {}
        virtual ~SuperstateWithInitialState() {}

        virtual bool RunToCompletion() = 0;
    };

    class All : public Superstate
    {
    public:
        All(OamFsm & fsm) :
            Superstate(fsm, "All") {}
        virtual ~All(){}


    private:
    };

    class FpgaRem : public Superstate
    {
    public:
        FpgaRem(OamFsm & fsm) :
            Superstate(fsm, "FpgaRem") {}
        virtual ~FpgaRem(){}


    private:
        State * GetSuperstate() const { return &mFsm.mAll; }
    };

    class Initialising : public Superstate
    {
    public:
        Initialising(OamFsm & fsm) :
            Superstate(fsm, "Initialising") {}
        virtual ~Initialising(){}

    void InterfaceExitMethod( void ) { mFsm.mInterface.InitialisingExit();}

    private:
        State * GetSuperstate() const { return &mFsm.mAll; }
    };

    class RemScanInProgress : public Superstate
    {
    public:
        RemScanInProgress(OamFsm & fsm) :
            Superstate(fsm, "RemScanInProgress") {}
        virtual ~RemScanInProgress(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.RemScanInProgressEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.RemScanInProgressExit();}

    private:
        State * GetSuperstate() const { return &mFsm.mFpgaRem; }
    };

    class QueuedFsmEvent
    {
    public:
        QueuedFsmEvent( EventId eventId, shared_ptr<FsmEvent> fsmEvent) :
            mId(eventId),
            mFsmEvent(fsmEvent){}
        ~QueuedFsmEvent(){}

        EventId mId;
        shared_ptr<FsmEvent> mFsmEvent;
    };

    OamFsmInterface & mInterface;
    bool mFsmTraceEnabled;
    std::string mName;
    State * mState;
    All mAll;
    FpgaRem mFpgaRem;
    Initialising mInitialising;
    Start mStart;
    Idle mIdle;
    RemScanInProgress mRemScanInProgress;
    WaitingForFullScanComplete mWaitingForFullScanComplete;
    std::list< shared_ptr<QueuedFsmEvent> > mfsmEventQueue;
    bool mFsmInjectInProgress;
    unsigned mEventCounter;
    StateHistory mCurrentStateTransitionExitsList;
    static const char * mEventName[NUMBER_OF_INJECTABLE_EVENTS];

};

} // -namespace-

#endif // __Oam_fsm_interface_h_

