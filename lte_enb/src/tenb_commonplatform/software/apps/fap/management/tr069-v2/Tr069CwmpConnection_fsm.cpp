///////////////////////////////////////////////////////////////////////////////
//
//Tr069CwmpConnection_fsm.cpp
//
// Autogenerated from Tr069CwmpConnection.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069CwmpConnection_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
CwmpConnectionFsm::CwmpConnectionFsm(
    CwmpConnectionFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mHmsConnectionProhibited(*this ),
    mAwaitInitialTransactionSession(*this ),
    mIdle(*this ),
    mAwaitTransportCnf(*this ),
    mTransactionSessionInProgress(*this ),
    mTransactionSessionProgressing(*this ),
    mShuttingDownWaitingForTransactionSessionCompletion(*this ),
    mTerminate(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    // Initial State
    mHmsConnectionProhibited.Entry();

    if(NULL != mState)
    {
       while( !mState->RunToCompletion() )
       {
          continue;
       }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
CwmpConnectionFsm::~CwmpConnectionFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "CwmpConnectionFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::InjectHmsModifyReq(shared_ptr<HmsModifyReq> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_HmsModifyReq_GT_(event));
    Enqueue( CwmpConnectionFsm::FSM_EVENT_HmsModifyReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::InjectStateGuardTimerExpiry(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( CwmpConnectionFsm::FSM_EVENT_StateGuardTimerExpiry, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::InjectTransactionSessionCommand(shared_ptr<TransactionSessionCommand> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TransactionSessionCommand_GT_(event));
    Enqueue( CwmpConnectionFsm::FSM_EVENT_TransactionSessionCommand, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::InjectTransactionSessionComplete(shared_ptr<TransactionSessionComplete> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TransactionSessionComplete_GT_(event));
    Enqueue( CwmpConnectionFsm::FSM_EVENT_TransactionSessionComplete, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::InjectTransportCnf(shared_ptr<TransportCnf> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TransportCnf_GT_(event));
    Enqueue( CwmpConnectionFsm::FSM_EVENT_TransportCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::InjectRemScanCnf(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( CwmpConnectionFsm::FSM_EVENT_RemScanCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::InjectShutdown(shared_ptr<Shutdown> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_Shutdown_GT_(event));
    Enqueue( CwmpConnectionFsm::FSM_EVENT_Shutdown, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
const char * CwmpConnectionFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "HmsModifyReq",
    "StateGuardTimerExpiry",
    "TransactionSessionCommand",
    "TransactionSessionComplete",
    "TransportCnf",
    "RemScanCnf",
    "Shutdown",
};

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case CwmpConnectionFsm::FSM_EVENT_HmsModifyReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_HmsModifyReq_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_HmsModifyReq_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_HmsModifyReq_GT_>(fsmEvent);
            InjectHmsModifyReq(event->mEvent);
        }
        break;

        case CwmpConnectionFsm::FSM_EVENT_StateGuardTimerExpiry:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectStateGuardTimerExpiry(event->mEvent);
        }
        break;

        case CwmpConnectionFsm::FSM_EVENT_TransactionSessionCommand:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TransactionSessionCommand_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TransactionSessionCommand_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TransactionSessionCommand_GT_>(fsmEvent);
            InjectTransactionSessionCommand(event->mEvent);
        }
        break;

        case CwmpConnectionFsm::FSM_EVENT_TransactionSessionComplete:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TransactionSessionComplete_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TransactionSessionComplete_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TransactionSessionComplete_GT_>(fsmEvent);
            InjectTransactionSessionComplete(event->mEvent);
        }
        break;

        case CwmpConnectionFsm::FSM_EVENT_TransportCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TransportCnf_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TransportCnf_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TransportCnf_GT_>(fsmEvent);
            InjectTransportCnf(event->mEvent);
        }
        break;

        case CwmpConnectionFsm::FSM_EVENT_RemScanCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectRemScanCnf(event->mEvent);
        }
        break;

        case CwmpConnectionFsm::FSM_EVENT_Shutdown:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_Shutdown_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_Shutdown_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_Shutdown_GT_>(fsmEvent);
            InjectShutdown(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::HmsConnectionProhibited::InjectHmsModifyReq(
    shared_ptr<HmsModifyReq> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryIsReconnectSecGw(event))
    {
        mFsm.TracePoint( "QueryIsReconnectSecGw? (true)" );

        mFsm.mState->Exit();
        mFsm.mIdle.Entry();
    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryIsTr069Enabled(event))
    {
        mFsm.TracePoint( "QueryIsTr069Enabled? (true)" );

        mFsm.mState->Exit();
        mFsm.mAwaitInitialTransactionSession.Entry();
    }
    else
    {
        SimpleState::InjectHmsModifyReq(event);
    }
}

// Event StateGuardTimerExpiry not handled in state HmsConnectionProhibited

// Event TransactionSessionCommand deferred in state HmsConnectionProhibited

// Event TransactionSessionComplete not handled in state HmsConnectionProhibited

// Event TransportCnf not handled in state HmsConnectionProhibited

// Event RemScanCnf not handled in state HmsConnectionProhibited

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::HmsConnectionProhibited::InjectShutdown(
    shared_ptr<Shutdown> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendLocked" );

        mFsm.mInterface.SendLocked(event);

        mFsm.mTerminate.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
bool CwmpConnectionFsm::HmsConnectionProhibited::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case CwmpConnectionFsm::FSM_EVENT_TransactionSessionCommand:
            return true;


        default:
            return false;
    }
}

// Event HmsModifyReq not handled in state AwaitInitialTransactionSession

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::AwaitInitialTransactionSession::InjectStateGuardTimerExpiry(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action StartInitialTransactionSession" );

        mFsm.mInterface.StartInitialTransactionSession(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::AwaitInitialTransactionSession::InjectTransactionSessionCommand(
    shared_ptr<TransactionSessionCommand> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryIsInitialTransactionSession(event))
    {
        mFsm.TracePoint( "QueryIsInitialTransactionSession? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action RecordTransactionSession" );

        mFsm.mInterface.RecordTransactionSession(event);

        mFsm.mAwaitTransportCnf.Entry();
    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryStartInitialTransactionSession(event))
    {
        mFsm.TracePoint( "QueryStartInitialTransactionSession? (true)" );

        mFsm.TracePoint( "Action StartInitialTransactionSession" );

        mFsm.mInterface.StartInitialTransactionSession(event);

    }
    else
    {
        SimpleState::InjectTransactionSessionCommand(event);
    }
}

// Event TransactionSessionComplete not handled in state AwaitInitialTransactionSession

// Event TransportCnf not handled in state AwaitInitialTransactionSession

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::AwaitInitialTransactionSession::InjectRemScanCnf(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action StartDelayTimerForInitialTransactionSession" );

        mFsm.mInterface.StartDelayTimerForInitialTransactionSession(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::AwaitInitialTransactionSession::InjectShutdown(
    shared_ptr<Shutdown> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendLocked" );

        mFsm.mInterface.SendLocked(event);

        mFsm.mTerminate.Entry();
    }
}

// State AwaitInitialTransactionSession has no deferred events.

// Event HmsModifyReq not handled in state Idle

// Event StateGuardTimerExpiry not handled in state Idle

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::Idle::InjectTransactionSessionCommand(
    shared_ptr<TransactionSessionCommand> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action RecordTransactionSession" );

        mFsm.mInterface.RecordTransactionSession(event);

        mFsm.mAwaitTransportCnf.Entry();
    }
}

// Event TransactionSessionComplete not handled in state Idle

// Event TransportCnf not handled in state Idle

// Event RemScanCnf not handled in state Idle

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::Idle::InjectShutdown(
    shared_ptr<Shutdown> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendLocked" );

        mFsm.mInterface.SendLocked(event);

        mFsm.mTerminate.Entry();
    }
}

// State Idle has no deferred events.

// Event HmsModifyReq not handled in state AwaitTransportCnf

// Event StateGuardTimerExpiry not handled in state AwaitTransportCnf

// Event TransactionSessionCommand deferred in state AwaitTransportCnf

// Event TransactionSessionComplete not handled in state AwaitTransportCnf

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::AwaitTransportCnf::InjectTransportCnf(
    shared_ptr<TransportCnf> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryTransportOk(event))
    {
        mFsm.TracePoint( "QueryTransportOk? (true)" );

        mFsm.mState->Exit();
        mFsm.mTransactionSessionInProgress.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mHmsConnectionProhibited.Entry();
    }
}

// Event RemScanCnf not handled in state AwaitTransportCnf

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::AwaitTransportCnf::InjectShutdown(
    shared_ptr<Shutdown> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendLocked" );

        mFsm.mInterface.SendLocked(event);

        mFsm.mTerminate.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
bool CwmpConnectionFsm::AwaitTransportCnf::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case CwmpConnectionFsm::FSM_EVENT_TransactionSessionCommand:
            return true;


        default:
            return false;
    }
}

// Event HmsModifyReq not handled in state TransactionSessionProgressing

// Event StateGuardTimerExpiry not handled in state TransactionSessionProgressing

// Event TransactionSessionCommand deferred in state TransactionSessionProgressing

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::TransactionSessionProgressing::InjectTransactionSessionComplete(
    shared_ptr<TransactionSessionComplete> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFapRebooting(event))
    {
        mFsm.TracePoint( "QueryFapRebooting? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mTerminate.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mInterface.RecordTransactionSessionResult(event);
        mFsm.mIdle.Entry();
    }
    // Guard condition
    /*
    if( mFsm.mInterface.QueryTransactionSessionSucceded(event))
    {
        mFsm.TracePoint( "QueryTransactionSessionSucceded? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mIdle.Entry();
    }
    else
    */
    // Guard condition
    /*
    if( mFsm.mInterface.QueryFailedTransactionSessionShouldBeIgnored(event))
    {
        mFsm.TracePoint( "QueryFailedTransactionSessionShouldBeIgnored? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mIdle.Entry();
    }
    else
    */
    // Guard condition
    /*
    if( mFsm.mInterface.QueryFailedTransactionSessionRecoveryMechanismIsToSelectAnotherServer(event))
    {
        mFsm.TracePoint( "QueryFailedTransactionSessionRecoveryMechanismIsToSelectAnotherServer? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendSecGwModifyReq" );

        mFsm.mInterface.SendSecGwModifyReq(event);

        mFsm.mHmsConnectionProhibited.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action RequestReboot" );

        mFsm.mInterface.RequestReboot(event);

        mFsm.mTerminate.Entry();
    }
    */
}

// Event TransportCnf not handled in state TransactionSessionProgressing

// Event RemScanCnf not handled in state TransactionSessionProgressing

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::TransactionSessionProgressing::InjectShutdown(
    shared_ptr<Shutdown> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mShuttingDownWaitingForTransactionSessionCompletion.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
bool CwmpConnectionFsm::TransactionSessionProgressing::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case CwmpConnectionFsm::FSM_EVENT_TransactionSessionCommand:
            return true;


        default:
            return false;
    }
}

// Event HmsModifyReq not handled in state ShuttingDownWaitingForTransactionSessionCompletion

// Event StateGuardTimerExpiry not handled in state ShuttingDownWaitingForTransactionSessionCompletion

// Event TransactionSessionCommand not handled in state ShuttingDownWaitingForTransactionSessionCompletion

/*** WARNING: Code AUTO-GENERATED from Tr069CwmpConnection.fsm. Do not edit! ***/
void CwmpConnectionFsm::ShuttingDownWaitingForTransactionSessionCompletion::InjectTransactionSessionComplete(
    shared_ptr<TransactionSessionComplete> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendLocked" );

        mFsm.mInterface.SendLocked(event);

        mFsm.mTerminate.Entry();
    }
}

// Event TransportCnf not handled in state ShuttingDownWaitingForTransactionSessionCompletion

// Event RemScanCnf not handled in state ShuttingDownWaitingForTransactionSessionCompletion

// Event Shutdown not handled in state ShuttingDownWaitingForTransactionSessionCompletion

// State ShuttingDownWaitingForTransactionSessionCompletion has no deferred events.

// Event HmsModifyReq not handled in state Terminate

// Event StateGuardTimerExpiry not handled in state Terminate

// Event TransactionSessionCommand not handled in state Terminate

// Event TransactionSessionComplete not handled in state Terminate

// Event TransportCnf not handled in state Terminate

// Event RemScanCnf not handled in state Terminate

// Event Shutdown not handled in state Terminate

// State Terminate has no deferred events.

} // -namespace-

