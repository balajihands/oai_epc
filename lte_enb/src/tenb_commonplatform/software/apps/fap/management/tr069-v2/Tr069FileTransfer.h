///////////////////////////////////////////////////////////////////////////////
//
// Tr069Ftp.h
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

/** DELETE THIS
 * Use this template for C/C++ header files.
 *  - Fill in the header above.
 *  - Delete sections below that are empty (to make it easier to read).
 *  - Don't forget to replace __Template_h_ with __<Your Filename Stem>_h__
 */

#ifndef __Tr069Ftp_h_
#define __Tr069Ftp_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <boost/shared_ptr.hpp>
#include <system/TimerInterface.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069FileTransfer_fsm.h"
#include "Tr069QueueableEvent.h"
#include "Tr069DownloadRequest.h"
#include "Tr069UploadRequest.h"

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////
namespace tr069
{

class Tr069FileTransfer : public FileTransferFsmInterface
{
private:
    Tr069FileTransfer();
public:
    ~Tr069FileTransfer();

    static Tr069FileTransfer& GetInstance();

    /**
     *  EventHandler Interface
     */
    void HandleEvent(shared_ptr<threeway::Queueable> event);
    bool HandleTimerExpiry(threeway::TimerHandle expiredTimer);

private:
    static Tr069FileTransfer* s_instance;
    threeway::Fqdn m_remoteFqdn;
    u32 m_ftpConfirmId;
    bool m_FtpRetried;
    bool m_initialRemScanRequested;
    threeway::TimerHandle m_stateGuardTimer;
    shared_ptr<DownloadRequest> m_downloadRequest;
    shared_ptr<UploadRequest> m_uploadRequest;
    shared_ptr<FtpCompleteInd> m_ftpCompleteInd;

    shared_ptr<MibAttributeValues> m_mibAttributeValues;

    // AutoGen Fsm
    Tr069FileTransferInterfaceDefinition();
    FileTransferFsm m_fsm;
};

}
#endif
