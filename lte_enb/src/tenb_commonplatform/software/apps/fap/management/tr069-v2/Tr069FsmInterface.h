///////////////////////////////////////////////////////////////////////////////
//
// Tr069SecGwConnection.h
//
// <Description of class/module>
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

/** DELETE THIS
 * Use this template for C/C++ header files.
 *  - Fill in the header above.
 *  - Delete sections below that are empty (to make it easier to read).
 *  - Don't forget to replace __Template_h_ with __<Your Filename Stem>_h__
 */

#ifndef __Tr069FsmInterface_h_
#define __Tr069FsmInterface_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <boost/shared_ptr.hpp>
#include <comms/IPv4Address.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069QueueableEvent.h"

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////
namespace tr069
{

class Tr069FsmInterface
{

public:
    Tr069FsmInterface(){}
    virtual ~Tr069FsmInterface(){}

    /**
     *  EventHandler Interface
     */
    virtual void StartFsm(){};
    virtual bool GetBootEvent() = 0;
    virtual void HandleEvent(shared_ptr<threeway::Queueable> tr069Event) = 0;
    virtual bool HandleTimerExpiry( threeway::TimerHandle expiredTimer) = 0;

private:
};

}
#endif
