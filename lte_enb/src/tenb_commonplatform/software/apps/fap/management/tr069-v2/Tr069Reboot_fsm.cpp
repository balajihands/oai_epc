///////////////////////////////////////////////////////////////////////////////
//
//Tr069Reboot_fsm.cpp
//
// Autogenerated from Tr069Reboot.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069Reboot_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
RebootFsm::RebootFsm(
    RebootFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mOperational(*this ),
    mRebooting(*this ),
    mDelaySecGwDisconnect(*this ),
    mSecGwDisconnect(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    Entry();
}

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
RebootFsm::~RebootFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "RebootFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

void RebootFsm::Entry()
{
    // Initial State
    mOperational.Entry();

    while( !mState->RunToCompletion() )
    {
        continue;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::InjectRebootReq(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( RebootFsm::FSM_EVENT_RebootReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::InjectStateGuardTimerExpiry(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( RebootFsm::FSM_EVENT_StateGuardTimerExpiry, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::InjectOperationalStateDisabled(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( RebootFsm::FSM_EVENT_OperationalStateDisabled, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
const char * RebootFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "RebootReq",
    "StateGuardTimerExpiry",
    "OperationalStateDisabled",
};

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case RebootFsm::FSM_EVENT_RebootReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectRebootReq(event->mEvent);
        }
        break;

        case RebootFsm::FSM_EVENT_StateGuardTimerExpiry:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectStateGuardTimerExpiry(event->mEvent);
        }
        break;

        case RebootFsm::FSM_EVENT_OperationalStateDisabled:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectOperationalStateDisabled(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::Operational::InjectRebootReq(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mRebooting.Entry();
    }
}

// Event StateGuardTimerExpiry not handled in state Operational

// Event OperationalStateDisabled not handled in state Operational

// State Operational has no deferred events.

// Event RebootReq not handled in state DelaySecGwDisconnect

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::DelaySecGwDisconnect::InjectStateGuardTimerExpiry(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mSecGwDisconnect.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::DelaySecGwDisconnect::InjectOperationalStateDisabled(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mSecGwDisconnect.Entry();
    }
}

// State DelaySecGwDisconnect has no deferred events.

// Event RebootReq not handled in state SecGwDisconnect

/*** WARNING: Code AUTO-GENERATED from Tr069Reboot.fsm. Do not edit! ***/
void RebootFsm::SecGwDisconnect::InjectStateGuardTimerExpiry(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action ImmediateReboot" );

        mFsm.mInterface.ImmediateReboot(event);

    }
}

// Event OperationalStateDisabled not handled in state SecGwDisconnect

// State SecGwDisconnect has no deferred events.

} // -namespace-

