///////////////////////////////////////////////////////////////////////////////
//
// Tr069SecGwConnection.h
//
// <Description of class/module>
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

/** DELETE THIS
 * Use this template for C/C++ header files.
 *  - Fill in the header above.
 *  - Delete sections below that are empty (to make it easier to read).
 *  - Don't forget to replace __Template_h_ with __<Your Filename Stem>_h__
 */

#ifndef __Tr069SecGw_h_
#define __Tr069SecGw_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069FsmInterface.h"
#include "Tr069SecGwConnection_fsm.h"

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////
namespace tr069
{

class Tr069SecGwConnection : public Tr069FsmInterface, SecGwConnectionFsmInterface
{

public:
    Tr069SecGwConnection( const char * name = "SecGw");
    virtual ~Tr069SecGwConnection();

    /**
     *  Tr069FsmInterface
     */
    virtual void HandleEvent(shared_ptr<threeway::Queueable> tr069Event);
    virtual bool HandleTimerExpiry( threeway::TimerHandle expiredTimer);
    virtual bool GetBootEvent() { return false; }

protected:
    threeway::Fqdn m_secGwAddress;
    shared_ptr<SecGwModifyReq> m_secGwModifyReq;

    u32         m_tunnelId;

    threeway::TimerHandle m_stateGuardTimer;

    Tr069SecGwConnectionInterfaceDefinition();
    SecGwConnectionFsm m_fsm;

    // HMS connection FSM if IPSec tunnel is used for CWMP
    shared_ptr<Tr069FsmInterface> m_fsmHms;

private:
    virtual bool NextValidServer();
    virtual bool ServerConfigurationIsValid( u32 secGw );

    u32 m_reconnectSecGateway;
    bool m_secGwBootEvent;
};

}
#endif
