///////////////////////////////////////////////////////////////////////////////
//
//Tr069SecGwConnection_fsm.cpp
//
// Autogenerated from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm
//
// See header file for documentation.
//
// Copyright Radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069SecGwConnection_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
SecGwConnectionFsm::SecGwConnectionFsm(
    SecGwConnectionFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mCheckConfig(*this ),
    mDisconnected(*this ),
    mConnectionProcedure(*this ),
    mConnectionProcedure_Abort(*this ),
    mCreatingIkeTunnel(*this ),
    mConnectingIkeTunnel(*this ),
    mDisconnectionProcedure(*this ),
    mDeletingIkeTunnel(*this ),
    mConnected(*this ),
    mCwmpEnable(*this ),
    mCwmpDisable(*this ),
    mTerminate(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    // Initial State
    mCheckConfig.Entry();

    if(NULL != mState)
    {
       while( !mState->RunToCompletion() )
       {
          continue;
       }
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
SecGwConnectionFsm::~SecGwConnectionFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "SecGwConnectionFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectStateGuardTimerExpiry(void * event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_StateGuardTimerExpiry, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectSecGwModify(shared_ptr<SecGwModifyReq> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_SecGwModifyReq_GT_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_SecGwModify, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectIkeTunnelCreateCnf(shared_ptr<threeway::Queueable> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_IkeTunnelCreateCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectIkeTunnelDeleteCnf(shared_ptr<threeway::Queueable> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_IkeTunnelDeleteCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectIkeTunnelDisconnectionInd(shared_ptr<threeway::Queueable> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_IkeTunnelDisconnectionInd, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectIkeTunnelConnectionInd(shared_ptr<IkeTunnelConnectInd> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_IkeTunnelConnectInd_GT_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_IkeTunnelConnectionInd, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectCwmpLockedInd(shared_ptr<LockedInd> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_LockedInd_GT_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_CwmpLockedInd, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::InjectTransportReq(shared_ptr<TransportReq> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TransportReq_GT_(event));
    Enqueue( SecGwConnectionFsm::FSM_EVENT_TransportReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
const char * SecGwConnectionFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "StateGuardTimerExpiry",
    "SecGwModify",
    "IkeTunnelCreateCnf",
    "IkeTunnelDeleteCnf",
    "IkeTunnelDisconnectionInd",
    "IkeTunnelConnectionInd",
    "CwmpLockedInd",
    "TransportReq",
};

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case SecGwConnectionFsm::FSM_EVENT_StateGuardTimerExpiry:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectStateGuardTimerExpiry(event->mEvent);
        }
        break;

        case SecGwConnectionFsm::FSM_EVENT_SecGwModify:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_SecGwModifyReq_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_SecGwModifyReq_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_SecGwModifyReq_GT_>(fsmEvent);
            InjectSecGwModify(event->mEvent);
        }
        break;

        case SecGwConnectionFsm::FSM_EVENT_IkeTunnelCreateCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_>(fsmEvent);
            InjectIkeTunnelCreateCnf(event->mEvent);
        }
        break;

        case SecGwConnectionFsm::FSM_EVENT_IkeTunnelDeleteCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_>(fsmEvent);
            InjectIkeTunnelDeleteCnf(event->mEvent);
        }
        break;

        case SecGwConnectionFsm::FSM_EVENT_IkeTunnelDisconnectionInd:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_>(fsmEvent);
            InjectIkeTunnelDisconnectionInd(event->mEvent);
        }
        break;

        case SecGwConnectionFsm::FSM_EVENT_IkeTunnelConnectionInd:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_IkeTunnelConnectInd_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_IkeTunnelConnectInd_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_IkeTunnelConnectInd_GT_>(fsmEvent);
            InjectIkeTunnelConnectionInd(event->mEvent);
        }
        break;

        case SecGwConnectionFsm::FSM_EVENT_CwmpLockedInd:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_LockedInd_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_LockedInd_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_LockedInd_GT_>(fsmEvent);
            InjectCwmpLockedInd(event->mEvent);
        }
        break;

        case SecGwConnectionFsm::FSM_EVENT_TransportReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TransportReq_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TransportReq_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TransportReq_GT_>(fsmEvent);
            InjectTransportReq(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CreatingIkeTunnel::InjectStateGuardTimerExpiry(
    void * event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mConnectionProcedure_Abort.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CreatingIkeTunnel::InjectSecGwModify(
    shared_ptr<SecGwModifyReq> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SaveSecGwModify" );

        mFsm.mInterface.SaveSecGwModify(event);

        mFsm.mConnectionProcedure_Abort.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CreatingIkeTunnel::InjectIkeTunnelCreateCnf(
    shared_ptr<threeway::Queueable> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryIpSecIsEnabled(event))
    {
        mFsm.TracePoint( "QueryIpSecIsEnabled? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action StoreTunnelId" );

        mFsm.mInterface.StoreTunnelId(event);

        mFsm.mConnectingIkeTunnel.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action HandleTunnelEstablishment" );

        mFsm.mInterface.HandleTunnelEstablishment(event);

        mFsm.mConnected.Entry();
    }
}

// Event IkeTunnelDeleteCnf not handled in state CreatingIkeTunnel

// Event IkeTunnelDisconnectionInd not handled in state CreatingIkeTunnel

// Event IkeTunnelConnectionInd not handled in state CreatingIkeTunnel

// Event CwmpLockedInd not handled in state CreatingIkeTunnel

// Event TransportReq deferred in state CreatingIkeTunnel

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
bool SecGwConnectionFsm::CreatingIkeTunnel::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case SecGwConnectionFsm::FSM_EVENT_TransportReq:
            return true;


        default:
            return false;
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::ConnectingIkeTunnel::InjectStateGuardTimerExpiry(
    void * event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mConnectionProcedure_Abort.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::ConnectingIkeTunnel::InjectSecGwModify(
    shared_ptr<SecGwModifyReq> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SaveSecGwModify" );

        mFsm.mInterface.SaveSecGwModify(event);

        mFsm.mConnectionProcedure_Abort.Entry();
    }
}

// Event IkeTunnelCreateCnf not handled in state ConnectingIkeTunnel

// Event IkeTunnelDeleteCnf not handled in state ConnectingIkeTunnel

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::ConnectingIkeTunnel::InjectIkeTunnelDisconnectionInd(
    shared_ptr<threeway::Queueable> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDisconnectionProcedure.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::ConnectingIkeTunnel::InjectIkeTunnelConnectionInd(
    shared_ptr<IkeTunnelConnectInd> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryTunnelIdIsAsExpected(event))
    {
        mFsm.TracePoint( "QueryTunnelIdIsAsExpected? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action HandleTunnelEstablishment" );

        mFsm.mInterface.HandleTunnelEstablishment(event);

        mFsm.mConnected.Entry();
    }
    else
    {
    }
}

// Event CwmpLockedInd not handled in state ConnectingIkeTunnel

// Event TransportReq deferred in state ConnectingIkeTunnel

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
bool SecGwConnectionFsm::ConnectingIkeTunnel::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case SecGwConnectionFsm::FSM_EVENT_TransportReq:
            return true;


        default:
            return false;
    }
}

// Event StateGuardTimerExpiry not handled in state DeletingIkeTunnel

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::DeletingIkeTunnel::InjectSecGwModify(
    shared_ptr<SecGwModifyReq> event
    )
{
    {
        mFsm.TracePoint( "Action SaveSecGwModify" );

        mFsm.mInterface.SaveSecGwModify(event);

    }
}

// Event IkeTunnelCreateCnf not handled in state DeletingIkeTunnel

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::DeletingIkeTunnel::InjectIkeTunnelDeleteCnf(
    shared_ptr<threeway::Queueable> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDisconnected.Entry();
    }
}

// Event IkeTunnelDisconnectionInd not handled in state DeletingIkeTunnel

// Event IkeTunnelConnectionInd not handled in state DeletingIkeTunnel

// Event CwmpLockedInd not handled in state DeletingIkeTunnel

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::DeletingIkeTunnel::InjectTransportReq(
    shared_ptr<TransportReq> event
    )
{
    {
        mFsm.TracePoint( "Action SendTransportRej" );

        mFsm.mInterface.SendTransportRej(event);

    }
}

// State DeletingIkeTunnel has no deferred events.

// Event StateGuardTimerExpiry not handled in state CwmpEnable

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CwmpEnable::InjectSecGwModify(
    shared_ptr<SecGwModifyReq> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SaveSecGwModify" );

        mFsm.mInterface.SaveSecGwModify(event);

        mFsm.mCwmpDisable.Entry();
    }
}

// Event IkeTunnelCreateCnf not handled in state CwmpEnable

// Event IkeTunnelDeleteCnf not handled in state CwmpEnable

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CwmpEnable::InjectIkeTunnelDisconnectionInd(
    shared_ptr<threeway::Queueable> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action RaiseIpsecTunnelFailureAlarm" );

        mFsm.mInterface.RaiseIpsecTunnelFailureAlarm(event);

        mFsm.mCwmpDisable.Entry();
    }
}

// Event IkeTunnelConnectionInd not handled in state CwmpEnable

// Event CwmpLockedInd not handled in state CwmpEnable

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CwmpEnable::InjectTransportReq(
    shared_ptr<TransportReq> event
    )
{
    {
        mFsm.TracePoint( "Action SendTransportCnf" );

        mFsm.mInterface.SendTransportCnf(event);

    }
}

// State CwmpEnable has no deferred events.

// Event StateGuardTimerExpiry not handled in state CwmpDisable

// Event SecGwModify not handled in state CwmpDisable

// Event IkeTunnelCreateCnf not handled in state CwmpDisable

// Event IkeTunnelDeleteCnf not handled in state CwmpDisable

// Event IkeTunnelDisconnectionInd not handled in state CwmpDisable

// Event IkeTunnelConnectionInd not handled in state CwmpDisable

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CwmpDisable::InjectCwmpLockedInd(
    shared_ptr<LockedInd> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDisconnectionProcedure.Entry();
    }
}

// Event TransportReq not handled in state CwmpDisable

// State CwmpDisable has no deferred events.

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::Terminate::InjectStateGuardTimerExpiry(
    void * event
    )
{
    {
        mFsm.TracePoint( "Action SystemReboot" );

        mFsm.mInterface.SystemReboot(event);

    }
}

// Event SecGwModify not handled in state Terminate

// Event IkeTunnelCreateCnf not handled in state Terminate

// Event IkeTunnelDeleteCnf not handled in state Terminate

// Event IkeTunnelDisconnectionInd not handled in state Terminate

// Event IkeTunnelConnectionInd not handled in state Terminate

// Event CwmpLockedInd not handled in state Terminate

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::Terminate::InjectTransportReq(
    shared_ptr<TransportReq> event
    )
{
    {
        mFsm.TracePoint( "Action SendTransportRej" );

        mFsm.mInterface.SendTransportRej(event);

    }
}

// State Terminate has no deferred events.

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::CheckConfig::Entry( )
{
    RSYS_ASSERT(mFsm.mState == NULL);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mState = &mFsm.mCheckConfig;

    // Guard condition
    if( mFsm.mInterface.QueryMinimumNecessaryConfiguration())
    {
        mFsm.TracePoint( "QueryMinimumNecessaryConfiguration? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action PerformInitialisation" );

        mFsm.mInterface.PerformInitialisation();

        mFsm.mConnectionProcedure.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mTerminate.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::Disconnected::Entry( )
{
    RSYS_ASSERT(mFsm.mState == NULL);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mInterface.DisconnectedEntry();

    mFsm.mState = &mFsm.mDisconnected;

    // Guard condition
    if( mFsm.mInterface.QueryFapRebootInProgress())
    {
        mFsm.TracePoint( "QueryFapRebootInProgress? (true)" );

        mFsm.mState->Exit();
        mFsm.mTerminate.Entry();
    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryReconnectServer())
    {
        mFsm.TracePoint( "QueryReconnectServer? (true)" );

        mFsm.mState->Exit();
        mFsm.mConnectionProcedure.Entry();
    }
    else
    // Guard condition
    if( mFsm.mInterface.QuerySelectNextServer())
    {
        mFsm.TracePoint( "QuerySelectNextServer? (true)" );

        mFsm.mState->Exit();
        mFsm.mConnectionProcedure.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mDisconnected.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from /mnt/hgfs/Shared/Master_MSPD_CCPU/tenb_commonplatform/software/apps/fap/management/tr069-v2/Tr069SecGwConnection.fsm. Do not edit! ***/
void SecGwConnectionFsm::ConnectionProcedure_Abort::Entry( )
{
    RSYS_ASSERT(mFsm.mState == &mFsm.mConnectionProcedure);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mState = &mFsm.mConnectionProcedure_Abort;

    // Guard condition
    if( mFsm.mInterface.QueryTunnelIdKnown())
    {
        mFsm.TracePoint( "QueryTunnelIdKnown? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDisconnectionProcedure.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDisconnected.Entry();
    }
}

} // -namespace-

