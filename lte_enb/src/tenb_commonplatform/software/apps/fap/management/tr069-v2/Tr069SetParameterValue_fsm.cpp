///////////////////////////////////////////////////////////////////////////////
//
//Tr069SetParameterValue_fsm.cpp
//
// Autogenerated from Tr069SetParameterValue.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069SetParameterValue_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
SpvFsm::SpvFsm(
    SpvFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mAwaitSet(*this ),
    mSetting(*this ),
    mSetFail(*this ),
    mSetSuccess(*this ),
    mAwaitDataModelVerifyCnf(*this ),
    mAwaitMibVerifyCnf(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    Entry();
}

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
SpvFsm::~SpvFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "SpvFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

void SpvFsm::Entry()
{
    // Initial State
    mAwaitSet.Entry();

    while( !mState->RunToCompletion() )
    {
        continue;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::InjectSetParameterValueRequest(shared_ptr<RpcSetParameterValue> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_RpcSetParameterValue_GT_(event));
    Enqueue( SpvFsm::FSM_EVENT_SetParameterValueRequest, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::InjectDataModelVerifyConfirm(shared_ptr<DataModelVerifyCnf> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_DataModelVerifyCnf_GT_(event));
    Enqueue( SpvFsm::FSM_EVENT_DataModelVerifyConfirm, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::InjectMibVerifyConfirm(shared_ptr<MibValidateAttributesCnf> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_MibValidateAttributesCnf_GT_(event));
    Enqueue( SpvFsm::FSM_EVENT_MibVerifyConfirm, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
const char * SpvFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "SetParameterValueRequest",
    "DataModelVerifyConfirm",
    "MibVerifyConfirm",
};

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case SpvFsm::FSM_EVENT_SetParameterValueRequest:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_RpcSetParameterValue_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_RpcSetParameterValue_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_RpcSetParameterValue_GT_>(fsmEvent);
            InjectSetParameterValueRequest(event->mEvent);
        }
        break;

        case SpvFsm::FSM_EVENT_DataModelVerifyConfirm:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_DataModelVerifyCnf_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_DataModelVerifyCnf_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_DataModelVerifyCnf_GT_>(fsmEvent);
            InjectDataModelVerifyConfirm(event->mEvent);
        }
        break;

        case SpvFsm::FSM_EVENT_MibVerifyConfirm:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_MibValidateAttributesCnf_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_MibValidateAttributesCnf_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_MibValidateAttributesCnf_GT_>(fsmEvent);
            InjectMibVerifyConfirm(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::AwaitSet::InjectSetParameterValueRequest(
    shared_ptr<RpcSetParameterValue> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action StoreSetRequest" );

        mFsm.mInterface.StoreSetRequest(event);

        mFsm.mSetting.Entry();
    }
}

// Event DataModelVerifyConfirm not handled in state AwaitSet

// Event MibVerifyConfirm not handled in state AwaitSet

// State AwaitSet has no deferred events.

// Event SetParameterValueRequest deferred in state AwaitDataModelVerifyCnf

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::AwaitDataModelVerifyCnf::InjectDataModelVerifyConfirm(
    shared_ptr<DataModelVerifyCnf> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryVerified(event))
    {
        mFsm.TracePoint( "QueryVerified? (true)" );

        mFsm.mState->Exit();
        mFsm.mAwaitMibVerifyCnf.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mSetFail.Entry();
    }
}

// Event MibVerifyConfirm not handled in state AwaitDataModelVerifyCnf

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
bool SpvFsm::AwaitDataModelVerifyCnf::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case SpvFsm::FSM_EVENT_SetParameterValueRequest:
            return true;


        default:
            return false;
    }
}

// Event SetParameterValueRequest deferred in state AwaitMibVerifyCnf

// Event DataModelVerifyConfirm not handled in state AwaitMibVerifyCnf

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::AwaitMibVerifyCnf::InjectMibVerifyConfirm(
    shared_ptr<MibValidateAttributesCnf> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryVerified(event))
    {
        mFsm.TracePoint( "QueryVerified? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendSetMibAttributes" );

        mFsm.mInterface.SendSetMibAttributes(event);

        mFsm.mSetSuccess.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mSetFail.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
bool SpvFsm::AwaitMibVerifyCnf::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case SpvFsm::FSM_EVENT_SetParameterValueRequest:
            return true;


        default:
            return false;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::SetFail::Entry( )
{
    RSYS_ASSERT(mFsm.mState == &mFsm.mSetting);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mState = &mFsm.mSetFail;

    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendSetParametersReject" );

        mFsm.mInterface.SendSetParametersReject();

        mFsm.mAwaitSet.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SetParameterValue.fsm. Do not edit! ***/
void SpvFsm::SetSuccess::Entry( )
{
    RSYS_ASSERT(mFsm.mState == &mFsm.mSetting);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mState = &mFsm.mSetSuccess;

    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendSetParametersConfirm" );

        mFsm.mInterface.SendSetParametersConfirm();

        mFsm.mAwaitSet.Entry();
    }
}

} // -namespace-

