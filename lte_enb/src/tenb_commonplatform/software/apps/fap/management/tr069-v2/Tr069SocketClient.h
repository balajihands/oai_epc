///////////////////////////////////////////////////////////////////////////////
//
// Tr069SocketClient.h
//
// <Description of class/module>
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

/** DELETE THIS
 * Use this template for C/C++ header files.
 *  - Fill in the header above.
 *  - Delete sections below that are empty (to make it easier to read).
 *  - Don't forget to replace __Template_h_ with __<Your Filename Stem>_h__
 */

#ifndef __Tr069SocketClient_h_
#define __Tr069SocketClient_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <messaging/transport/ApplicationWithMessaging.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069HttpcConn.h"

#include "Tr069SocketClient_fsm.h"

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////
namespace tr069
{

class SocketClient : public threeway::ThreadWithQueue,  public SocketClientFsmInterface
{
public:
    SocketClient( const threeway::IPv4Address & localIpAddress);
    ~SocketClient();

private:
    u32 ThreadProcedure();

    // AutoGen Fsm
    SocketClientFsm m_socketFsm;

    tr069::HttpcConn m_httpConn;

    // SocketFsmInterface
    SocketClientFsmActionHandleTcpConnectReq::Outcome HandleTcpConnectReq( shared_ptr<threeway::Queueable> );
    SocketClientFsmActionSendHttpPost::Outcome SendHttpPost( shared_ptr<HttpPostRequest> );
    void SendHttpPostButDoNotWaitForResponse(shared_ptr<HttpPostRequest>);
    void RejectTcpConnectReq( shared_ptr<threeway::Queueable> );
    void HandleTcpConnectInd( shared_ptr<threeway::Queueable> );
    void HandleTcpDisconnectReq( void* );
    virtual bool QueryAfterPostWaitForResponse(shared_ptr<HttpPostRequest>);
};

}
#endif
