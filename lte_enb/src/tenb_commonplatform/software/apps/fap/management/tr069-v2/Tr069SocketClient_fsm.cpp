///////////////////////////////////////////////////////////////////////////////
//
//Tr069SocketClient_fsm.cpp
//
// Autogenerated from Tr069SocketClient.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069SocketClient_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
SocketClientFsm::SocketClientFsm(
    SocketClientFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mInactive(*this ),
    mConnected(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    // Initial State
    mInactive.Entry();

    if(NULL != mState)
    {
       while( !mState->RunToCompletion() )
       {
          continue;
       }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
SocketClientFsm::~SocketClientFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "SocketClientFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::InjectTCP_CONNECT_REQ(shared_ptr<threeway::Queueable> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_(event));
    Enqueue( SocketClientFsm::FSM_EVENT_TCP_CONNECT_REQ, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::InjectTCP_CONNECT_IND(shared_ptr<threeway::Queueable> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_(event));
    Enqueue( SocketClientFsm::FSM_EVENT_TCP_CONNECT_IND, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::InjectTCP_DISCONNECT_REQ(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( SocketClientFsm::FSM_EVENT_TCP_DISCONNECT_REQ, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::InjectHTTP_POST_REQUEST(shared_ptr<HttpPostRequest> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_HttpPostRequest_GT_(event));
    Enqueue( SocketClientFsm::FSM_EVENT_HTTP_POST_REQUEST, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
const char * SocketClientFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "TCP_CONNECT_REQ",
    "TCP_CONNECT_IND",
    "TCP_DISCONNECT_REQ",
    "HTTP_POST_REQUEST",
};

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case SocketClientFsm::FSM_EVENT_TCP_CONNECT_REQ:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_>(fsmEvent);
            InjectTCP_CONNECT_REQ(event->mEvent);
        }
        break;

        case SocketClientFsm::FSM_EVENT_TCP_CONNECT_IND:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_>(fsmEvent);
            InjectTCP_CONNECT_IND(event->mEvent);
        }
        break;

        case SocketClientFsm::FSM_EVENT_TCP_DISCONNECT_REQ:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectTCP_DISCONNECT_REQ(event->mEvent);
        }
        break;

        case SocketClientFsm::FSM_EVENT_HTTP_POST_REQUEST:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_HttpPostRequest_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_HttpPostRequest_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_HttpPostRequest_GT_>(fsmEvent);
            InjectHTTP_POST_REQUEST(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::Inactive::InjectTCP_CONNECT_REQ(
    shared_ptr<threeway::Queueable> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action HandleTcpConnectReq" );

        switch( mFsm.mInterface.HandleTcpConnectReq(event))
        {
            case SocketClientFsmActionHandleTcpConnectReq::FSM_ACTION_SUCCESS:
            {
                mFsm.TracePoint( "HandleTcpConnectReq=SUCCESS" );

                mFsm.mConnected.Entry();
            }
            break;

            case SocketClientFsmActionHandleTcpConnectReq::FSM_ACTION_CONNECTION_FAILURE:
            {
                mFsm.TracePoint( "HandleTcpConnectReq=CONNECTION_FAILURE" );

                mFsm.mInactive.Entry();
            }
            return;
        }

    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::Inactive::InjectTCP_CONNECT_IND(
    shared_ptr<threeway::Queueable> event
    )
{
    {
        mFsm.TracePoint( "Action HandleTcpConnectInd" );

        mFsm.mInterface.HandleTcpConnectInd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::Inactive::InjectTCP_DISCONNECT_REQ(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action HandleTcpDisconnectReq" );

        mFsm.mInterface.HandleTcpDisconnectReq(event);

    }
}

// Event HTTP_POST_REQUEST not handled in state Inactive

// State Inactive has no deferred events.

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::Connected::InjectTCP_CONNECT_REQ(
    shared_ptr<threeway::Queueable> event
    )
{
    {
        mFsm.TracePoint( "Action RejectTcpConnectReq" );

        mFsm.mInterface.RejectTcpConnectReq(event);

    }
}

// Event TCP_CONNECT_IND not handled in state Connected

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::Connected::InjectTCP_DISCONNECT_REQ(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action HandleTcpDisconnectReq" );

        mFsm.mInterface.HandleTcpDisconnectReq(event);

        mFsm.mInactive.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
void SocketClientFsm::Connected::InjectHTTP_POST_REQUEST(
    shared_ptr<HttpPostRequest> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryAfterPostWaitForResponse(event))
    {
        mFsm.TracePoint( "QueryAfterPostWaitForResponse? (true)" );

        mFsm.TracePoint( "Action SendHttpPost" );

        switch( mFsm.mInterface.SendHttpPost(event))
        {
            case SocketClientFsmActionSendHttpPost::FSM_ACTION_SUCCESS:
            {
                mFsm.TracePoint( "SendHttpPost=SUCCESS" );

            }
            break;

            case SocketClientFsmActionSendHttpPost::FSM_ACTION_CONNECTION_FAILURE:
            {
                mFsm.TracePoint( "SendHttpPost=CONNECTION_FAILURE" );

                mFsm.mState->Exit();
                mFsm.mInactive.Entry();
            }
            return;
        }

    }
    else
    {
        mFsm.TracePoint( "Action SendHttpPostButDoNotWaitForResponse" );

        mFsm.mInterface.SendHttpPostButDoNotWaitForResponse(event);

    }
}

// State Connected has no deferred events.

} // -namespace-

