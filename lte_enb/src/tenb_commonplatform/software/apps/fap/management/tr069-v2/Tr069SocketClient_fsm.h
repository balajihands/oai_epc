///////////////////////////////////////////////////////////////////////////////
//
// Tr069SocketClient_fsm.h
//
// Autogenerated from Tr069SocketClient.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __Tr069SocketClient_fsm_h_
#define __Tr069SocketClient_fsm_h_
///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <deque>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069SocketClient_fsm_interface.h"

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from Tr069SocketClient.fsm. Do not edit! ***/
class SocketClientFsm
{
public:

    SocketClientFsm(
        SocketClientFsmInterface & interfaceClass,
        bool traceEnabled = false,
        const char * name = "SocketClientFsm"
        );
    virtual ~SocketClientFsm();

    void InjectTCP_CONNECT_REQ(shared_ptr<threeway::Queueable> event);
    void InjectTCP_CONNECT_IND(shared_ptr<threeway::Queueable> event);
    void InjectTCP_DISCONNECT_REQ(void* event);
    void InjectHTTP_POST_REQUEST(shared_ptr<HttpPostRequest> event);
    std::string ToString() const { return mName; }

    void SetFsmTraceEnable( bool traceEnable = true ) { mFsmTraceEnabled = traceEnable; }

    void TracePoint( const char * s )
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.%u: %s", mName.c_str(), mEventCounter, s );
        }
    }

private:
    typedef enum EventId_tag
    {
        FSM_EVENT_TCP_CONNECT_REQ,
        FSM_EVENT_TCP_CONNECT_IND,
        FSM_EVENT_TCP_DISCONNECT_REQ,
        FSM_EVENT_HTTP_POST_REQUEST,
        NUMBER_OF_INJECTABLE_EVENTS
    } EventId;

    typedef enum EventType_tag
    {
        FSM_EVENT_TYPE_shared_ptr_LT_HttpPostRequest_GT_,
        FSM_EVENT_TYPE_void_STAR_,
        FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_,
        NUMBER_OF_EVENT_TYPES
    } EventType;

    class FsmEvent
    {
    public:
        FsmEvent( EventType eventType ) :
            mEventType(eventType) {}
        virtual ~FsmEvent(){}

        EventType mEventType;
    };

    class FsmEvent_shared_ptr_LT_HttpPostRequest_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_HttpPostRequest_GT_( shared_ptr<HttpPostRequest> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_HttpPostRequest_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_HttpPostRequest_GT_() {}
    	shared_ptr<HttpPostRequest> mEvent;
    };

    class FsmEvent_void_STAR_ : public FsmEvent
    {
    public:
        FsmEvent_void_STAR_( void* event ) :
            FsmEvent(FSM_EVENT_TYPE_void_STAR_),
            mEvent(event) {}
        ~FsmEvent_void_STAR_() {}
    	void* mEvent;
    };

    class FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_( shared_ptr<threeway::Queueable> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_threeway_COLON__COLON_Queueable_GT_() {}
    	shared_ptr<threeway::Queueable> mEvent;
    };

    void Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent );

    class State;
    typedef std::deque< State * > StateHistory;

    class State
    {
    public:
        State(SocketClientFsm & fsm, const char * name ) :
            mFsm(fsm),
            mName(name){}
        virtual ~State(){}

        virtual void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData ) { RSYS_ASSERT_PRINTF(false,"Cannot inject in state %s.", mName.c_str()); }
        virtual bool RunToCompletion() { RSYS_ASSERT_PRINTF(false,"RunToCompletion failure in state %s.", mName.c_str()); return false; };
        virtual bool DeferEvent( EventId ) const { RSYS_ASSERT_PRINTF(false,"Cannot defer in state %s.", mName.c_str()); return false; }

        virtual void Entry()
        {
            RSYS_ASSERT( mFsm.mState == GetSuperstate() );

            UpdateHistoryUponEntry();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceEntryMethod();

            mFsm.mState = this;
        }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            UpdateHistoryUponExit();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }

        SocketClientFsm& mFsm;
        std::string mName;
        virtual State * GetSuperstate() const { return NULL; }
        virtual void  InterfaceEntryMethod() {}
        virtual void  InterfaceExitMethod() {}
        virtual void  UpdateHistoryUponExit() { mFsm.mCurrentStateTransitionExitsList.push_front( mFsm.mState ); }
        virtual void  UpdateHistoryUponEntry() { mFsm.mCurrentStateTransitionExitsList.clear(); }
    };

    class SimpleState : public State
    {
    public:
        SimpleState(SocketClientFsm & fsm, const char * name) :
            State(fsm, name){}
        virtual ~SimpleState(){}

        void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData );
        virtual bool RunToCompletion() { return true; }

        virtual bool DeferEvent( EventId ) const { return false; }
        virtual void InjectTCP_CONNECT_REQ( shared_ptr<threeway::Queueable> eventData) { EventConsumed(FSM_EVENT_TCP_CONNECT_REQ); }
        virtual void InjectTCP_CONNECT_IND( shared_ptr<threeway::Queueable> eventData) { EventConsumed(FSM_EVENT_TCP_CONNECT_IND); }
        virtual void InjectTCP_DISCONNECT_REQ( void* eventData) { EventConsumed(FSM_EVENT_TCP_DISCONNECT_REQ); }
        virtual void InjectHTTP_POST_REQUEST( shared_ptr<HttpPostRequest> eventData) { EventConsumed(FSM_EVENT_HTTP_POST_REQUEST); }

    private:
        void EventConsumed( EventId queuedEventId )
        {
            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s consumed %s", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str(), mEventName[queuedEventId] ); }
        }
    };

    class Inactive : public SimpleState
    {
    public:
        Inactive(SocketClientFsm & fsm) :
            SimpleState(fsm, "Inactive") {}
        virtual ~Inactive(){}

        virtual void InjectTCP_CONNECT_REQ( shared_ptr<threeway::Queueable> eventData);
        virtual void InjectTCP_CONNECT_IND( shared_ptr<threeway::Queueable> eventData);
        virtual void InjectTCP_DISCONNECT_REQ( void* eventData);
    };

    class Connected : public SimpleState
    {
    public:
        Connected(SocketClientFsm & fsm) :
            SimpleState(fsm, "Connected") {}
        virtual ~Connected(){}

        virtual void InjectTCP_CONNECT_REQ( shared_ptr<threeway::Queueable> eventData);
        virtual void InjectTCP_DISCONNECT_REQ( void* eventData);
        virtual void InjectHTTP_POST_REQUEST( shared_ptr<HttpPostRequest> eventData);
    };

    class Superstate : public State
    {
    public:
        Superstate(SocketClientFsm & fsm, const char * name) :
            State(fsm, name)
        { }
        virtual ~Superstate()
        { }
    };

    class SuperstateWithInitialState : public Superstate
    {
    public:
        SuperstateWithInitialState(SocketClientFsm & fsm, const char * name) :
            Superstate(fsm, name) {}
        virtual ~SuperstateWithInitialState() {}

        virtual bool RunToCompletion() = 0;
    };

    class QueuedFsmEvent
    {
    public:
        QueuedFsmEvent( EventId eventId, shared_ptr<FsmEvent> fsmEvent) :
            mId(eventId),
            mFsmEvent(fsmEvent){}
        ~QueuedFsmEvent(){}

        EventId mId;
        shared_ptr<FsmEvent> mFsmEvent;
    };

    SocketClientFsmInterface & mInterface;
    bool mFsmTraceEnabled;
    std::string mName;
    State * mState;
    Inactive mInactive;
    Connected mConnected;
    std::list< shared_ptr<QueuedFsmEvent> > mfsmEventQueue;
    bool mFsmInjectInProgress;
    unsigned mEventCounter;
    StateHistory mCurrentStateTransitionExitsList;
    static const char * mEventName[NUMBER_OF_INJECTABLE_EVENTS];

};

} // -namespace-

#endif // __Tr069SocketClient_fsm_interface_h_

