///////////////////////////////////////////////////////////////////////////////
//
// <File name>
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069SocketsInterface.h"

using namespace std;
using namespace threeway;
using namespace tr069;

extern "C"
{
    extern void httpd_term(int sig);
}


///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Class Functions
///////////////////////////////////////////////////////////////////////////////
namespace tr069
{

SocketsInterface::SocketsInterface( const IPv4Address & localIpAddress ) :
    m_localIpAddress(localIpAddress),
    m_client(localIpAddress)
{
    TRACE_PRINTF("new SocketsInterface (localIpAddress=%s).", localIpAddress.ToString() );
    m_client.StartThread();
}

SocketsInterface::~SocketsInterface()
{
    m_client.StopThread();

    TRACE_PRINTF("delete SocketsInterface.");
}

bool SocketsInterface::HandleTimerExpiry( threeway::TimerHandle handle )
{
    return false;
}


void SocketsInterface::HandleEvent(shared_ptr<threeway::Queueable> event)
{
    assert(event);

    if (threeway::Queueable::OTHER == event->GetDomain())
    {
        shared_ptr<Tr069QueueableEvent> tr069Event = dynamic_pointer_cast<Tr069QueueableEvent>(event);

        if (tr069Event)
        {
            TRACE_PRINTF("SckIf: %s", tr069Event->ToString() );
        }

        m_client.Enqueue(event);
    }
}


}

