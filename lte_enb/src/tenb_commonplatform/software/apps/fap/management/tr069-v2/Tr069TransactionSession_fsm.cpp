///////////////////////////////////////////////////////////////////////////////
//
//Tr069TransactionSession_fsm.cpp
//
// Autogenerated from Tr069TransactionSession.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069TransactionSession_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
TransactionSessionFsm::TransactionSessionFsm(
    TransactionSessionFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mIdle(*this ),
    mTransactionSessionInProgress(*this ),
    mEstablishTcpConnection(*this ),
    mTransactionSessionComplete(*this ),
    mTearDownTcpConnection(*this ),
    mPerformNextHttpPost(*this ),
    mServerSentEmptyPost(*this ),
    mWaitHttpResponse(*this ),
    mWaitServerResponse(*this ),
    mWaitServerCommand(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    // Initial State
    mIdle.Entry();

    if(NULL != mState)
    {
       while( !mState->RunToCompletion() )
       {
          continue;
       }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
TransactionSessionFsm::~TransactionSessionFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "TransactionSessionFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectStartTransactionSession(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_StartTransactionSession, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectServerDisconnect(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_ServerDisconnect, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectHttpResponse(shared_ptr<HttpPostResponse> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_HttpPostResponse_GT_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_HttpResponse, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectWorkerThreadStalledTimerExpiry(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_WorkerThreadStalledTimerExpiry, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectTcpDisconnectCnf(shared_ptr<TcpDisconnectCnf> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TcpDisconnectCnf_GT_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_TcpDisconnectCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectTcpConnectionFailure(shared_ptr<TcpConnectionFailureInd> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TcpConnectionFailureInd_GT_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_TcpConnectionFailure, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectTcpConnectCnf(shared_ptr<TcpConnectCnf> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TcpConnectCnf_GT_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_TcpConnectCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectTcpConnectRej(shared_ptr<TcpConnectRej> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TcpConnectRej_GT_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_TcpConnectRej, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::InjectTransportCnf(shared_ptr<TransportCnf> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_TransportCnf_GT_(event));
    Enqueue( TransactionSessionFsm::FSM_EVENT_TransportCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
const char * TransactionSessionFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "StartTransactionSession",
    "ServerDisconnect",
    "HttpResponse",
    "WorkerThreadStalledTimerExpiry",
    "TcpDisconnectCnf",
    "TcpConnectionFailure",
    "TcpConnectCnf",
    "TcpConnectRej",
    "TransportCnf",
};

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case TransactionSessionFsm::FSM_EVENT_StartTransactionSession:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectStartTransactionSession(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_ServerDisconnect:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectServerDisconnect(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_HttpResponse:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_HttpPostResponse_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_HttpPostResponse_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_HttpPostResponse_GT_>(fsmEvent);
            InjectHttpResponse(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_WorkerThreadStalledTimerExpiry:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectWorkerThreadStalledTimerExpiry(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_TcpDisconnectCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TcpDisconnectCnf_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TcpDisconnectCnf_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TcpDisconnectCnf_GT_>(fsmEvent);
            InjectTcpDisconnectCnf(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_TcpConnectionFailure:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectionFailureInd_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TcpConnectionFailureInd_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TcpConnectionFailureInd_GT_>(fsmEvent);
            InjectTcpConnectionFailure(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_TcpConnectCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectCnf_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TcpConnectCnf_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TcpConnectCnf_GT_>(fsmEvent);
            InjectTcpConnectCnf(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_TcpConnectRej:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectRej_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TcpConnectRej_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TcpConnectRej_GT_>(fsmEvent);
            InjectTcpConnectRej(event->mEvent);
        }
        break;

        case TransactionSessionFsm::FSM_EVENT_TransportCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_TransportCnf_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_TransportCnf_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_TransportCnf_GT_>(fsmEvent);
            InjectTransportCnf(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::Idle::InjectStartTransactionSession(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mTransactionSessionInProgress.Entry();
    }
}

// Event ServerDisconnect not handled in state Idle

// Event HttpResponse not handled in state Idle

// Event WorkerThreadStalledTimerExpiry not handled in state Idle

// Event TcpDisconnectCnf not handled in state Idle

// Event TcpConnectionFailure not handled in state Idle

// Event TcpConnectCnf not handled in state Idle

// Event TcpConnectRej not handled in state Idle

// Event TransportCnf not handled in state Idle

// State Idle has no deferred events.

// Event StartTransactionSession not handled in state EstablishTcpConnection

// Event ServerDisconnect not handled in state EstablishTcpConnection

// Event HttpResponse not handled in state EstablishTcpConnection

// Event WorkerThreadStalledTimerExpiry not handled in state EstablishTcpConnection

// Event TcpDisconnectCnf not handled in state EstablishTcpConnection

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::EstablishTcpConnection::InjectTcpConnectionFailure(
    shared_ptr<TcpConnectionFailureInd> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action MarkTransactionSessionFailed" );

        mFsm.mInterface.MarkTransactionSessionFailed(event);

        mFsm.mTransactionSessionComplete.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::EstablishTcpConnection::InjectTcpConnectCnf(
    shared_ptr<TcpConnectCnf> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mPerformNextHttpPost.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::EstablishTcpConnection::InjectTcpConnectRej(
    shared_ptr<TcpConnectRej> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mEstablishTcpConnection.Entry();
    }
}

// Event TransportCnf not handled in state EstablishTcpConnection

// State EstablishTcpConnection has no deferred events.

// Event StartTransactionSession not handled in state TearDownTcpConnection

// Event ServerDisconnect not handled in state TearDownTcpConnection

// Event HttpResponse not handled in state TearDownTcpConnection

// Event WorkerThreadStalledTimerExpiry not handled in state TearDownTcpConnection

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::TearDownTcpConnection::InjectTcpDisconnectCnf(
    shared_ptr<TcpDisconnectCnf> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mTransactionSessionComplete.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::TearDownTcpConnection::InjectTcpConnectionFailure(
    shared_ptr<TcpConnectionFailureInd> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mTransactionSessionComplete.Entry();
    }
}

// Event TcpConnectCnf not handled in state TearDownTcpConnection

// Event TcpConnectRej not handled in state TearDownTcpConnection

// Event TransportCnf not handled in state TearDownTcpConnection

// State TearDownTcpConnection has no deferred events.

// Event StartTransactionSession not handled in state WaitServerResponse

// Event ServerDisconnect not handled in state WaitServerResponse

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::WaitServerResponse::InjectHttpResponse(
    shared_ptr<HttpPostResponse> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFault(event))
    {
        mFsm.TracePoint( "QueryFault? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action HandleServerFault" );

        mFsm.mInterface.HandleServerFault(event);

        mFsm.mTearDownTcpConnection.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action HandleServerResponse" );

        mFsm.mInterface.HandleServerResponse(event);

        mFsm.mPerformNextHttpPost.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::WaitServerResponse::InjectWorkerThreadStalledTimerExpiry(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action SendRebootRequest" );

        mFsm.mInterface.SendRebootRequest(event);

    }
}

// Event TcpDisconnectCnf not handled in state WaitServerResponse

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::WaitServerResponse::InjectTcpConnectionFailure(
    shared_ptr<TcpConnectionFailureInd> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action MarkTransactionSessionFailed" );

        mFsm.mInterface.MarkTransactionSessionFailed(event);

        mFsm.mTransactionSessionComplete.Entry();
    }
}

// Event TcpConnectCnf not handled in state WaitServerResponse

// Event TcpConnectRej not handled in state WaitServerResponse

// Event TransportCnf not handled in state WaitServerResponse

// State WaitServerResponse has no deferred events.

// Event StartTransactionSession not handled in state WaitServerCommand

// Event ServerDisconnect not handled in state WaitServerCommand

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::WaitServerCommand::InjectHttpResponse(
    shared_ptr<HttpPostResponse> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryEmptyHttpPost(event))
    {
        mFsm.TracePoint( "QueryEmptyHttpPost? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mServerSentEmptyPost.Entry();
    }
    else
    {
        mFsm.TracePoint( "Action HandleServerCommand" );

        mFsm.mInterface.HandleServerCommand(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::WaitServerCommand::InjectWorkerThreadStalledTimerExpiry(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action SendRebootRequest" );

        mFsm.mInterface.SendRebootRequest(event);

    }
}

// Event TcpDisconnectCnf not handled in state WaitServerCommand

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::WaitServerCommand::InjectTcpConnectionFailure(
    shared_ptr<TcpConnectionFailureInd> event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryAllProceduresCompleted(event))
    {
        mFsm.TracePoint( "QueryAllProceduresCompleted? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mTransactionSessionComplete.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action MarkTransactionSessionFailed" );

        mFsm.mInterface.MarkTransactionSessionFailed(event);

        mFsm.mTransactionSessionComplete.Entry();
    }
}

// Event TcpConnectCnf not handled in state WaitServerCommand

// Event TcpConnectRej not handled in state WaitServerCommand

// Event TransportCnf not handled in state WaitServerCommand

// State WaitServerCommand has no deferred events.

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::PerformNextHttpPost::Entry( )
{
    RSYS_ASSERT(mFsm.mState == &mFsm.mTransactionSessionInProgress);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mState = &mFsm.mPerformNextHttpPost;

    // Guard condition
    if( mFsm.mInterface.QueryHoldRequests())
    {
        mFsm.TracePoint( "QueryHoldRequests? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendEmptyHttpPostBecauseServerHasHeldRequests" );

        mFsm.mInterface.SendEmptyHttpPostBecauseServerHasHeldRequests();

        mFsm.mWaitHttpResponse.Entry();
        mFsm.mWaitServerCommand.Entry();
    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryEnqueuedHttpPost())
    {
        mFsm.TracePoint( "QueryEnqueuedHttpPost? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendHttpPost" );

        mFsm.mInterface.SendHttpPost();

        mFsm.mWaitHttpResponse.Entry();
        mFsm.mWaitServerResponse.Entry();
    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryServerProceduresCompleted())
    {
        mFsm.TracePoint( "QueryServerProceduresCompleted? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendTerminatingEmptyHttpPostBecauseAllProceduresComplete" );

        mFsm.mInterface.SendTerminatingEmptyHttpPostBecauseAllProceduresComplete();

        mFsm.mTearDownTcpConnection.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendEmptyHttpPostBecauseFapProceduresComplete" );

        mFsm.mInterface.SendEmptyHttpPostBecauseFapProceduresComplete();

        mFsm.mWaitHttpResponse.Entry();
        mFsm.mWaitServerCommand.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::ServerSentEmptyPost::Entry( )
{
    RSYS_ASSERT(mFsm.mState == &mFsm.mTransactionSessionInProgress);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mInterface.ServerSentEmptyPostEntry();

    mFsm.mState = &mFsm.mServerSentEmptyPost;

    // Guard condition
    if( mFsm.mInterface.QueryHoldRequests())
    {
        mFsm.TracePoint( "QueryHoldRequests? (true)" );

        mFsm.mState->Exit();
        mFsm.TracePoint( "Action ClearHoldRequests" );

        mFsm.mInterface.ClearHoldRequests();

        mFsm.mPerformNextHttpPost.Entry();
    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryFapProceduresCompleted())
    {
        mFsm.TracePoint( "QueryFapProceduresCompleted? (true)" );

        mFsm.mState->Exit();
        mFsm.mTearDownTcpConnection.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mPerformNextHttpPost.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
void TransactionSessionFsm::TransactionSessionComplete::Entry( )
{
    RSYS_ASSERT(mFsm.mState == &mFsm.mTransactionSessionInProgress);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mState = &mFsm.mTransactionSessionComplete;

    // Guard condition
    if( mFsm.mInterface.QueryTransactionSessionFailed())
    {
        mFsm.TracePoint( "QueryTransactionSessionFailed? (true)" );

        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendTransactionSessionFailure" );

        mFsm.mInterface.SendTransactionSessionFailure();

        mFsm.mIdle.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action SendTransactionSessionSuccess" );

        mFsm.mInterface.SendTransactionSessionSuccess();

        mFsm.mIdle.Entry();
    }
}

} // -namespace-

