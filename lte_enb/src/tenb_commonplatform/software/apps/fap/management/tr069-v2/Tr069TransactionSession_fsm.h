///////////////////////////////////////////////////////////////////////////////
//
// Tr069TransactionSession_fsm.h
//
// Autogenerated from Tr069TransactionSession.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __Tr069TransactionSession_fsm_h_
#define __Tr069TransactionSession_fsm_h_
///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <deque>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069TransactionSession_fsm_interface.h"

using namespace tr069;

namespace tr069
{

/*** WARNING: Code AUTO-GENERATED from Tr069TransactionSession.fsm. Do not edit! ***/
class TransactionSessionFsm
{
public:

    TransactionSessionFsm(
        TransactionSessionFsmInterface & interfaceClass,
        bool traceEnabled = false,
        const char * name = "TransactionSessionFsm"
        );
    virtual ~TransactionSessionFsm();

    void InjectStartTransactionSession(void* event);
    void InjectServerDisconnect(void* event);
    void InjectHttpResponse(shared_ptr<HttpPostResponse> event);
    void InjectWorkerThreadStalledTimerExpiry(void* event);
    void InjectTcpDisconnectCnf(shared_ptr<TcpDisconnectCnf> event);
    void InjectTcpConnectionFailure(shared_ptr<TcpConnectionFailureInd> event);
    void InjectTcpConnectCnf(shared_ptr<TcpConnectCnf> event);
    void InjectTcpConnectRej(shared_ptr<TcpConnectRej> event);
    void InjectTransportCnf(shared_ptr<TransportCnf> event);
    std::string ToString() const
    {
        std::string returnedString(mName);

        if(mState)
        {
            returnedString += ".";
            returnedString += mState->mName;
        }

        return returnedString;
    }

    void Rename( const std::string & newName)
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.-: Renamed to %s", mName.c_str(), newName.c_str() );
        }
        mName = newName;
    }

    void SetFsmTraceEnable( bool traceEnable = true ) { mFsmTraceEnabled = traceEnable; }

    void TracePoint( const char * s )
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.%u: %s", mName.c_str(), mEventCounter, s );
        }
    }

private:
    typedef enum EventId_tag
    {
        FSM_EVENT_StartTransactionSession,
        FSM_EVENT_ServerDisconnect,
        FSM_EVENT_HttpResponse,
        FSM_EVENT_WorkerThreadStalledTimerExpiry,
        FSM_EVENT_TcpDisconnectCnf,
        FSM_EVENT_TcpConnectionFailure,
        FSM_EVENT_TcpConnectCnf,
        FSM_EVENT_TcpConnectRej,
        FSM_EVENT_TransportCnf,
        NUMBER_OF_INJECTABLE_EVENTS
    } EventId;

    typedef enum EventType_tag
    {
        FSM_EVENT_TYPE_void_STAR_,
        FSM_EVENT_TYPE_shared_ptr_LT_HttpPostResponse_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectionFailureInd_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectRej_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectCnf_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_TcpDisconnectCnf_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_TransportCnf_GT_,
        NUMBER_OF_EVENT_TYPES
    } EventType;

    class FsmEvent
    {
    public:
        FsmEvent( EventType eventType ) :
            mEventType(eventType) {}
        virtual ~FsmEvent(){}

        EventType mEventType;
    };

    class FsmEvent_void_STAR_ : public FsmEvent
    {
    public:
        FsmEvent_void_STAR_( void* event ) :
            FsmEvent(FSM_EVENT_TYPE_void_STAR_),
            mEvent(event) {}
        ~FsmEvent_void_STAR_() {}
    	void* mEvent;
    };

    class FsmEvent_shared_ptr_LT_HttpPostResponse_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_HttpPostResponse_GT_( shared_ptr<HttpPostResponse> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_HttpPostResponse_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_HttpPostResponse_GT_() {}
    	shared_ptr<HttpPostResponse> mEvent;
    };

    class FsmEvent_shared_ptr_LT_TcpConnectionFailureInd_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_TcpConnectionFailureInd_GT_( shared_ptr<TcpConnectionFailureInd> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectionFailureInd_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_TcpConnectionFailureInd_GT_() {}
    	shared_ptr<TcpConnectionFailureInd> mEvent;
    };

    class FsmEvent_shared_ptr_LT_TcpConnectRej_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_TcpConnectRej_GT_( shared_ptr<TcpConnectRej> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectRej_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_TcpConnectRej_GT_() {}
    	shared_ptr<TcpConnectRej> mEvent;
    };

    class FsmEvent_shared_ptr_LT_TcpConnectCnf_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_TcpConnectCnf_GT_( shared_ptr<TcpConnectCnf> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_TcpConnectCnf_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_TcpConnectCnf_GT_() {}
    	shared_ptr<TcpConnectCnf> mEvent;
    };

    class FsmEvent_shared_ptr_LT_TcpDisconnectCnf_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_TcpDisconnectCnf_GT_( shared_ptr<TcpDisconnectCnf> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_TcpDisconnectCnf_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_TcpDisconnectCnf_GT_() {}
    	shared_ptr<TcpDisconnectCnf> mEvent;
    };

    class FsmEvent_shared_ptr_LT_TransportCnf_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_TransportCnf_GT_( shared_ptr<TransportCnf> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_TransportCnf_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_TransportCnf_GT_() {}
    	shared_ptr<TransportCnf> mEvent;
    };

    void Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent );

    class State;
    typedef std::deque< State * > StateHistory;

    class State
    {
    public:
        State(TransactionSessionFsm & fsm, const char * name ) :
            mFsm(fsm),
            mName(name){}
        virtual ~State(){}

        virtual void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData ) { RSYS_ASSERT_PRINTF(false,"Cannot inject in state %s.", mName.c_str()); }
        virtual bool RunToCompletion() { RSYS_ASSERT_PRINTF(false,"RunToCompletion failure in state %s.", mName.c_str()); return false; };
        virtual bool DeferEvent( EventId ) const { RSYS_ASSERT_PRINTF(false,"Cannot defer in state %s.", mName.c_str()); return false; }

        virtual void Entry()
        {
            RSYS_ASSERT( mFsm.mState == GetSuperstate() );

            UpdateHistoryUponEntry();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceEntryMethod();

            mFsm.mState = this;
        }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            UpdateHistoryUponExit();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }

        TransactionSessionFsm& mFsm;
        std::string mName;
        virtual State * GetSuperstate() const { return NULL; }
        virtual void  InterfaceEntryMethod() {}
        virtual void  InterfaceExitMethod() {}
        virtual void  UpdateHistoryUponExit() { mFsm.mCurrentStateTransitionExitsList.push_front( mFsm.mState ); }
        virtual void  UpdateHistoryUponEntry() { mFsm.mCurrentStateTransitionExitsList.clear(); }
    };

    class SimpleState : public State
    {
    public:
        SimpleState(TransactionSessionFsm & fsm, const char * name) :
            State(fsm, name){}
        virtual ~SimpleState(){}

        void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData );
        virtual bool RunToCompletion() { return true; }

        virtual bool DeferEvent( EventId ) const { return false; }
        virtual void InjectStartTransactionSession( void* eventData) { EventConsumed(FSM_EVENT_StartTransactionSession); }
        virtual void InjectServerDisconnect( void* eventData) { EventConsumed(FSM_EVENT_ServerDisconnect); }
        virtual void InjectHttpResponse( shared_ptr<HttpPostResponse> eventData) { EventConsumed(FSM_EVENT_HttpResponse); }
        virtual void InjectWorkerThreadStalledTimerExpiry( void* eventData) { EventConsumed(FSM_EVENT_WorkerThreadStalledTimerExpiry); }
        virtual void InjectTcpDisconnectCnf( shared_ptr<TcpDisconnectCnf> eventData) { EventConsumed(FSM_EVENT_TcpDisconnectCnf); }
        virtual void InjectTcpConnectionFailure( shared_ptr<TcpConnectionFailureInd> eventData) { EventConsumed(FSM_EVENT_TcpConnectionFailure); }
        virtual void InjectTcpConnectCnf( shared_ptr<TcpConnectCnf> eventData) { EventConsumed(FSM_EVENT_TcpConnectCnf); }
        virtual void InjectTcpConnectRej( shared_ptr<TcpConnectRej> eventData) { EventConsumed(FSM_EVENT_TcpConnectRej); }
        virtual void InjectTransportCnf( shared_ptr<TransportCnf> eventData) { EventConsumed(FSM_EVENT_TransportCnf); }

    private:
        void EventConsumed( EventId queuedEventId )
        {
            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s consumed %s", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str(), mEventName[queuedEventId] ); }
        }
    };

    class Idle : public SimpleState
    {
    public:
        Idle(TransactionSessionFsm & fsm) :
            SimpleState(fsm, "Idle") {}
        virtual ~Idle(){}

        virtual void InjectStartTransactionSession( void* eventData);
    };

    class EstablishTcpConnection : public SimpleState
    {
    public:
        EstablishTcpConnection(TransactionSessionFsm & fsm) :
            SimpleState(fsm, "EstablishTcpConnection") {}
        virtual ~EstablishTcpConnection(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.EstablishTcpConnectionEntry();}
        State * GetSuperstate() const { return &mFsm.mTransactionSessionInProgress; }
        virtual void InjectTcpConnectionFailure( shared_ptr<TcpConnectionFailureInd> eventData);
        virtual void InjectTcpConnectCnf( shared_ptr<TcpConnectCnf> eventData);
        virtual void InjectTcpConnectRej( shared_ptr<TcpConnectRej> eventData);
    };

    class TearDownTcpConnection : public SimpleState
    {
    public:
        TearDownTcpConnection(TransactionSessionFsm & fsm) :
            SimpleState(fsm, "TearDownTcpConnection") {}
        virtual ~TearDownTcpConnection(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.TearDownTcpConnectionEntry();}
        State * GetSuperstate() const { return &mFsm.mTransactionSessionInProgress; }
        virtual void InjectTcpDisconnectCnf( shared_ptr<TcpDisconnectCnf> eventData);
        virtual void InjectTcpConnectionFailure( shared_ptr<TcpConnectionFailureInd> eventData);
    };

    class WaitServerResponse : public SimpleState
    {
    public:
        WaitServerResponse(TransactionSessionFsm & fsm) :
            SimpleState(fsm, "WaitServerResponse") {}
        virtual ~WaitServerResponse(){}

        State * GetSuperstate() const { return &mFsm.mWaitHttpResponse; }
        virtual void InjectHttpResponse( shared_ptr<HttpPostResponse> eventData);
        virtual void InjectWorkerThreadStalledTimerExpiry( void* eventData);
        virtual void InjectTcpConnectionFailure( shared_ptr<TcpConnectionFailureInd> eventData);
    };

    class WaitServerCommand : public SimpleState
    {
    public:
        WaitServerCommand(TransactionSessionFsm & fsm) :
            SimpleState(fsm, "WaitServerCommand") {}
        virtual ~WaitServerCommand(){}

        State * GetSuperstate() const { return &mFsm.mWaitHttpResponse; }
        virtual void InjectHttpResponse( shared_ptr<HttpPostResponse> eventData);
        virtual void InjectWorkerThreadStalledTimerExpiry( void* eventData);
        virtual void InjectTcpConnectionFailure( shared_ptr<TcpConnectionFailureInd> eventData);
    };

    class Superstate : public State
    {
    public:
        Superstate(TransactionSessionFsm & fsm, const char * name) :
            State(fsm, name)
        { }
        virtual ~Superstate()
        { }
    };

    class SuperstateWithInitialState : public Superstate
    {
    public:
        SuperstateWithInitialState(TransactionSessionFsm & fsm, const char * name) :
            Superstate(fsm, name) {}
        virtual ~SuperstateWithInitialState() {}

        virtual bool RunToCompletion() = 0;
    };

    class TransactionSessionInProgress : public SuperstateWithInitialState
    {
    public:
        TransactionSessionInProgress(TransactionSessionFsm & fsm) :
            SuperstateWithInitialState(fsm, "TransactionSessionInProgress") {}
        virtual ~TransactionSessionInProgress(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.TransactionSessionInProgressEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.TransactionSessionInProgressExit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mEstablishTcpConnection.Entry();
            }

            return false;
        }
    };

    class WaitHttpResponse : public Superstate
    {
    public:
        WaitHttpResponse(TransactionSessionFsm & fsm) :
            Superstate(fsm, "WaitHttpResponse") {}
        virtual ~WaitHttpResponse(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.WaitHttpResponseEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.WaitHttpResponseExit();}

    private:
        State * GetSuperstate() const { return &mFsm.mTransactionSessionInProgress; }
    };

    class Junction : public State
    {
    public:
        Junction(TransactionSessionFsm & fsm, const char * name) :
            State(fsm, name) {}
        virtual ~Junction(){}
        virtual void Entry() = 0;
        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }
        virtual void  UpdateHistoryUponExit() {}
        virtual void  UpdateHistoryUponEntry() {}
    };

    class PerformNextHttpPost : public Junction
    {
    public:
        PerformNextHttpPost(TransactionSessionFsm & fsm) :
            Junction(fsm, "PerformNextHttpPost") {}
        virtual ~PerformNextHttpPost(){}

        void Entry(); 

    private:
        State * GetSuperstate() const { return &mFsm.mTransactionSessionInProgress; }
    };

    class ServerSentEmptyPost : public Junction
    {
    public:
        ServerSentEmptyPost(TransactionSessionFsm & fsm) :
            Junction(fsm, "ServerSentEmptyPost") {}
        virtual ~ServerSentEmptyPost(){}

        void Entry(); 

    private:
        State * GetSuperstate() const { return &mFsm.mTransactionSessionInProgress; }
    };

    class ExitPoint : public State
    {
    public:
        ExitPoint(TransactionSessionFsm & fsm, const char * name) :
            State(fsm, name) {}
        virtual ~ExitPoint(){}
        virtual void Entry() = 0;
        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            mFsm.mState =  GetSuperstate();
        }
        virtual void  UpdateHistoryUponExit() {}
        virtual void  UpdateHistoryUponEntry() {}
    };

    class TransactionSessionComplete : public ExitPoint
    {
    public:
        TransactionSessionComplete(TransactionSessionFsm & fsm) :
            ExitPoint(fsm, "TransactionSessionComplete") {}
        virtual ~TransactionSessionComplete(){}

        void Entry(); 

    private:
        State * GetSuperstate() const { return &mFsm.mTransactionSessionInProgress; }
    };

    class QueuedFsmEvent
    {
    public:
        QueuedFsmEvent( EventId eventId, shared_ptr<FsmEvent> fsmEvent) :
            mId(eventId),
            mFsmEvent(fsmEvent){}
        ~QueuedFsmEvent(){}

        EventId mId;
        shared_ptr<FsmEvent> mFsmEvent;
    };

    TransactionSessionFsmInterface & mInterface;
    bool mFsmTraceEnabled;
    std::string mName;
    State * mState;
    Idle mIdle;
    TransactionSessionInProgress mTransactionSessionInProgress;
    EstablishTcpConnection mEstablishTcpConnection;
    TransactionSessionComplete mTransactionSessionComplete;
    TearDownTcpConnection mTearDownTcpConnection;
    PerformNextHttpPost mPerformNextHttpPost;
    ServerSentEmptyPost mServerSentEmptyPost;
    WaitHttpResponse mWaitHttpResponse;
    WaitServerResponse mWaitServerResponse;
    WaitServerCommand mWaitServerCommand;
    std::list< shared_ptr<QueuedFsmEvent> > mfsmEventQueue;
    bool mFsmInjectInProgress;
    unsigned mEventCounter;
    StateHistory mCurrentStateTransitionExitsList;
    static const char * mEventName[NUMBER_OF_INJECTABLE_EVENTS];

};

} // -namespace-

#endif // __Tr069TransactionSession_fsm_interface_h_

