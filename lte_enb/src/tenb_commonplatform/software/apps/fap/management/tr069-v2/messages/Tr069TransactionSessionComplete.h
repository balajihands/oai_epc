///////////////////////////////////////////////////////////////////////////////
//
// Tr069TransactionSessionComplete
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __Tr069TransactionSessionComplete_h_
#define __Tr069TransactionSessionComplete_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <sstream>
#include <boost/shared_ptr.hpp>
#include <libcsoap/soap-env.h>
#include <libcsoap/soap-ctx.h>
#include <system/ThreadWithQueue.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069QueueableEvent.h"

namespace tr069
{

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////



class TransactionSessionComplete : public tr069::Tr069QueueableEvent
{

public:
    typedef enum Result_tag
    {
        TRANSACTION_SESSION_SUCCESS,
        CONNECTION_FAILURE,
        REQUEST_DENIED__NO_REASON_SPECIFIED,
        FAP_NOT_AUTHORISED,
        FAP_AT_UNAUTHORISED_LOCATION,
        FGW_BUSY,

        DEFAULT_FAILURE

    } Result;


    TransactionSessionComplete( Result result =  TRANSACTION_SESSION_SUCCESS) :
        tr069::Tr069QueueableEvent( TR069_EVENT(TRANSACTION_SESSION_COMPLETE), CWMP_CONNECTION_FSM ),
        m_result(result) { }

    virtual ~TransactionSessionComplete(){};
    bool   QueryFailed() const { return (m_result != TRANSACTION_SESSION_SUCCESS); }
    Result QueryResult() const { return m_result; }

private:
    //static Tr069QueueableEvent::Id m_id;
    Result m_result;
};

}

#endif
