///////////////////////////////////////////////////////////////////////////////
//
// CwmpFault.h
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __CwmpFault_h_
#define __CwmpFault_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <sstream>
#include <string>
#include <boost/shared_ptr.hpp>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////
#include "Xmlable.h"
#include "Tr069XmlStringUtils.h"

using namespace std;
using namespace boost;
using namespace tr069;

namespace tr069
{

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////

class CwmpFault : public Xmlable
{
public:
    CwmpFault( ) :
        m_faultCode(0)
    {
    }

    virtual ~CwmpFault()
    {}

    bool QueryValid() const
    {
        return m_faultCode != 0;;
    }

    string Xmlise() const
    {
        string xmlString;

        if(QueryValid())
        {
            stringstream faultCode;
            faultCode << m_faultCode;

            stringstream faultContent;

            faultContent
            << XmlStringUtils::ToElementString("FaultCode", faultCode.str() )
            << XmlStringUtils::ToElementString("FaultString", m_faultString );

            xmlString = XmlStringUtils::ToElementString("cwmp:Fault", faultContent.str() );
        }
        else
        {
            TRACE_PRINTF("Inform::Xmlise(invalid)")
        }

        return xmlString;
    }

    u32    m_faultCode;
    string m_faultString;
};

}

#endif
