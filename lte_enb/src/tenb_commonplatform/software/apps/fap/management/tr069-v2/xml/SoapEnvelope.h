///////////////////////////////////////////////////////////////////////////////
//
// SoapEnvelope.h
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __SoapEnvelope_h_
#define __SoapEnvelope_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <sstream>
#include <string>
#include <boost/shared_ptr.hpp>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tr069XmlStringUtils.h"
#include "Xmlable.h"
#include "Tr069SoapHeader.h"

using namespace std;
using namespace boost;
using namespace tr069;

namespace tr069
{

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////

class SoapEnvelope : public Xmlable
{
public:
    SoapEnvelope( const Xmlable & body ) :
        m_body(body.Xmlise())
    {
    }

    virtual ~SoapEnvelope()
    {}

	SoapHeader soapheader;

    bool QueryValid() const
    {
        return !m_body.empty();
    }

    string Xmlise() const
    {
        string xmlString;

        if(QueryValid())
        {
            string envelopeTag("soap-env:Envelope");
            string envelopeAttrib(tr069::tr069XmlNsHeaderPreamble);
            string envelopeContent = SoapHeader::ToXml() +
                    XmlStringUtils::ToElementString("soap-env:Body", m_body );

            xmlString = XmlStringUtils::ToElementString( envelopeTag, envelopeContent, envelopeAttrib );
        }

        return xmlString;
    }
	

private:
    string m_body;
};

}

#endif
