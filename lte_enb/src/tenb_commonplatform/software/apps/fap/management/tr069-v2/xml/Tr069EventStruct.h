///////////////////////////////////////////////////////////////////////////////
//
// Tr069EventStruct.h
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __Tr069EventStruct_h_
#define __Tr069EventStruct_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <sstream>
#include <string>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Xmlable.h"
#include "Tr069XmlStringUtils.h"

using namespace std;
using namespace tr069;

namespace tr069
{

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////

class EventStruct : Xmlable
{
public:
    EventStruct(const string & eventCode = "", const string & commandKey = "") :
        m_eventCode(eventCode),
        m_commandKey(commandKey)
    {
    }

    virtual ~EventStruct()
    {}

    bool QueryValid() const
    {
        return !(m_eventCode.empty());
    }

    string Xmlise() const
    {
        stringstream ss;

        if(QueryValid())
        {
            string esValue = XmlStringUtils::ToElementString("EventCode",  XmlStringUtils::Filter(m_eventCode))
                           + XmlStringUtils::ToElementString("CommandKey", XmlStringUtils::Filter(m_commandKey));

            ss << XmlStringUtils::ToElementString("EventStruct", esValue);
        }

        return ss.str();
    }

    string m_eventCode;
    string m_commandKey;
};

}

#endif
