///////////////////////////////////////////////////////////////////////////////
//
//Tenpin_fsm.cpp
//
// Autogenerated from Tenpin.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Tenpin_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace Tenpin;

namespace Tenpin
{

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
TenpinFsm::TenpinFsm(
    TenpinFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mAll(*this ),
    mInitial(*this ),
    mUnusable(*this ),
    mUsable(*this ),
    mNotConfigured(*this ),
    mNotStarted(*this ),
    mStarting(*this ),
    mStarted(*this ),
    mOperational(*this ),
    mStopped(*this ),
    mUsabilityTest(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    // Initial State
    mAll.Entry();
    mInitial.Entry();

    if(NULL != mState)
    {
       while( !mState->RunToCompletion() )
       {
          continue;
       }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
TenpinFsm::~TenpinFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "TenpinFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectGo(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TenpinFsm::FSM_EVENT_Go, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectStop(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TenpinFsm::FSM_EVENT_Stop, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectExpiryGuardTimer(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TenpinFsm::FSM_EVENT_ExpiryGuardTimer, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectExpiryIkeGraceTimer(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TenpinFsm::FSM_EVENT_ExpiryIkeGraceTimer, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectOamStart(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( TenpinFsm::FSM_EVENT_OamStart, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectDnsServerAddReq(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_DnsServerAddReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectFirewallOpenReq(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_FirewallOpenReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectFirewallOpenCnf(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_FirewallOpenCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectFirewallCloseReq(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_FirewallCloseReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectFirewallCloseCnf(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_FirewallCloseCnf, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectSignatureVerifyReq(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_SignatureVerifyReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectMibSubscribeAttributesInd(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_MibSubscribeAttributesInd, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectIkeTunnelCreateReq(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_IkeTunnelCreateReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectIkeTunnelDeleteReq(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_IkeTunnelDeleteReq, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectIkeTunnelConnectInd(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_IkeTunnelConnectInd, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectIkeTunnelDisconnectInd(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_IkeTunnelDisconnectInd, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::InjectHwCryptoAvailableInd(shared_ptr<threeway::MessageSerialisedData> event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_(event));
    Enqueue( TenpinFsm::FSM_EVENT_HwCryptoAvailableInd, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
const char * TenpinFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "Go",
    "Stop",
    "ExpiryGuardTimer",
    "ExpiryIkeGraceTimer",
    "OamStart",
    "DnsServerAddReq",
    "FirewallOpenReq",
    "FirewallOpenCnf",
    "FirewallCloseReq",
    "FirewallCloseCnf",
    "SignatureVerifyReq",
    "MibSubscribeAttributesInd",
    "IkeTunnelCreateReq",
    "IkeTunnelDeleteReq",
    "IkeTunnelConnectInd",
    "IkeTunnelDisconnectInd",
    "HwCryptoAvailableInd",
};

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case TenpinFsm::FSM_EVENT_Go:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectGo(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_Stop:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectStop(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_ExpiryGuardTimer:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectExpiryGuardTimer(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_ExpiryIkeGraceTimer:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectExpiryIkeGraceTimer(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_OamStart:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectOamStart(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_DnsServerAddReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectDnsServerAddReq(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_FirewallOpenReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectFirewallOpenReq(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_FirewallOpenCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectFirewallOpenCnf(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_FirewallCloseReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectFirewallCloseReq(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_FirewallCloseCnf:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectFirewallCloseCnf(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_SignatureVerifyReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectSignatureVerifyReq(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_MibSubscribeAttributesInd:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectMibSubscribeAttributesInd(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_IkeTunnelCreateReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectIkeTunnelCreateReq(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_IkeTunnelDeleteReq:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectIkeTunnelDeleteReq(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_IkeTunnelConnectInd:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectIkeTunnelConnectInd(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_IkeTunnelDisconnectInd:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectIkeTunnelDisconnectInd(event->mEvent);
        }
        break;

        case TenpinFsm::FSM_EVENT_HwCryptoAvailableInd:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_> event = dynamic_pointer_cast<FsmEvent_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_>(fsmEvent);
            InjectHwCryptoAvailableInd(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectGo(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action Extract" );

        mFsm.mInterface.Extract(event);

        mFsm.mUsabilityTest.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectStop(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mStopped.Entry();
    }
}

// Event ExpiryGuardTimer not handled in state Initial

// Event ExpiryIkeGraceTimer not handled in state Initial

// Event OamStart not handled in state Initial

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectDnsServerAddReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action DnsServerAdd" );

        mFsm.mInterface.DnsServerAdd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectFirewallOpenReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpen" );

        mFsm.mInterface.FirewallOpen(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectFirewallOpenCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpened" );

        mFsm.mInterface.FirewallOpened(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectFirewallCloseReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClose" );

        mFsm.mInterface.FirewallClose(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectFirewallCloseCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClosed" );

        mFsm.mInterface.FirewallClosed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectSignatureVerifyReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action SignatureVerifyFailed" );

        mFsm.mInterface.SignatureVerifyFailed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Initial::InjectMibSubscribeAttributesInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action StoreAttributes" );

        mFsm.mInterface.StoreAttributes(event);

    }
}

// Event IkeTunnelCreateReq not handled in state Initial

// Event IkeTunnelDeleteReq not handled in state Initial

// Event IkeTunnelConnectInd not handled in state Initial

// Event IkeTunnelDisconnectInd not handled in state Initial

// Event HwCryptoAvailableInd not handled in state Initial

// State Initial has no deferred events.

// Event Go not handled in state Unusable

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectStop(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mStopped.Entry();
    }
}

// Event ExpiryGuardTimer not handled in state Unusable

// Event ExpiryIkeGraceTimer not handled in state Unusable

// Event OamStart not handled in state Unusable

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectDnsServerAddReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action DnsServerAdd" );

        mFsm.mInterface.DnsServerAdd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectFirewallOpenReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpen" );

        mFsm.mInterface.FirewallOpen(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectFirewallOpenCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpened" );

        mFsm.mInterface.FirewallOpened(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectFirewallCloseReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClose" );

        mFsm.mInterface.FirewallClose(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectFirewallCloseCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClosed" );

        mFsm.mInterface.FirewallClosed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectSignatureVerifyReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action SignatureVerifyFailed" );

        mFsm.mInterface.SignatureVerifyFailed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Unusable::InjectMibSubscribeAttributesInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action StoreAttributes" );

        mFsm.mInterface.StoreAttributes(event);

    }
}

// Event IkeTunnelCreateReq not handled in state Unusable

// Event IkeTunnelDeleteReq not handled in state Unusable

// Event IkeTunnelConnectInd not handled in state Unusable

// Event IkeTunnelDisconnectInd not handled in state Unusable

// Event HwCryptoAvailableInd not handled in state Unusable

// State Unusable has no deferred events.

// Event Go not handled in state NotConfigured

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectStop(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mStopped.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectExpiryGuardTimer(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mNotConfigured.Entry();
    }
}

// Event ExpiryIkeGraceTimer not handled in state NotConfigured

// Event OamStart not handled in state NotConfigured

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectDnsServerAddReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action DnsServerAdd" );

        mFsm.mInterface.DnsServerAdd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectFirewallOpenReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpen" );

        mFsm.mInterface.FirewallOpen(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectFirewallOpenCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpened" );

        mFsm.mInterface.FirewallOpened(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectFirewallCloseReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClose" );

        mFsm.mInterface.FirewallClose(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectFirewallCloseCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClosed" );

        mFsm.mInterface.FirewallClosed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectSignatureVerifyReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action SignatureVerifyTest" );

        mFsm.mInterface.SignatureVerifyTest(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotConfigured::InjectMibSubscribeAttributesInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action StoreAttributes" );

        mFsm.mInterface.StoreAttributes(event);

        mFsm.mNotStarted.Entry();
    }
}

// Event IkeTunnelCreateReq not handled in state NotConfigured

// Event IkeTunnelDeleteReq not handled in state NotConfigured

// Event IkeTunnelConnectInd not handled in state NotConfigured

// Event IkeTunnelDisconnectInd not handled in state NotConfigured

// Event HwCryptoAvailableInd not handled in state NotConfigured

// State NotConfigured has no deferred events.

// Event Go not handled in state NotStarted

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectStop(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mStopped.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectExpiryGuardTimer(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mNotStarted.Entry();
    }
}

// Event ExpiryIkeGraceTimer not handled in state NotStarted

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectOamStart(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mStarting.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectDnsServerAddReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action DnsServerAdd" );

        mFsm.mInterface.DnsServerAdd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectFirewallOpenReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpen" );

        mFsm.mInterface.FirewallOpen(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectFirewallOpenCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpened" );

        mFsm.mInterface.FirewallOpened(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectFirewallCloseReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClose" );

        mFsm.mInterface.FirewallClose(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectFirewallCloseCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClosed" );

        mFsm.mInterface.FirewallClosed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectSignatureVerifyReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action SignatureVerifyTest" );

        mFsm.mInterface.SignatureVerifyTest(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::NotStarted::InjectMibSubscribeAttributesInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action StoreAttributes" );

        mFsm.mInterface.StoreAttributes(event);

    }
}

// Event IkeTunnelCreateReq not handled in state NotStarted

// Event IkeTunnelDeleteReq not handled in state NotStarted

// Event IkeTunnelConnectInd not handled in state NotStarted

// Event IkeTunnelDisconnectInd not handled in state NotStarted

// Event HwCryptoAvailableInd not handled in state NotStarted

// State NotStarted has no deferred events.

// Event Go not handled in state Starting

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectStop(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mStopped.Entry();
    }
}

// Event ExpiryGuardTimer not handled in state Starting

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectExpiryIkeGraceTimer(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mStarted.Entry();
        mFsm.mOperational.Entry();
    }
}

// Event OamStart not handled in state Starting

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectDnsServerAddReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action DnsServerAdd" );

        mFsm.mInterface.DnsServerAdd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectFirewallOpenReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpen" );

        mFsm.mInterface.FirewallOpen(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectFirewallOpenCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpened" );

        mFsm.mInterface.FirewallOpened(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectFirewallCloseReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClose" );

        mFsm.mInterface.FirewallClose(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectFirewallCloseCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClosed" );

        mFsm.mInterface.FirewallClosed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectSignatureVerifyReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action SignatureVerifyTest" );

        mFsm.mInterface.SignatureVerifyTest(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Starting::InjectMibSubscribeAttributesInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action StoreAttributes" );

        mFsm.mInterface.StoreAttributes(event);

    }
}

// Event IkeTunnelCreateReq not handled in state Starting

// Event IkeTunnelDeleteReq not handled in state Starting

// Event IkeTunnelConnectInd not handled in state Starting

// Event IkeTunnelDisconnectInd not handled in state Starting

// Event HwCryptoAvailableInd not handled in state Starting

// State Starting has no deferred events.

// Event Go not handled in state Operational

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectStop(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mStopped.Entry();
    }
}

// Event ExpiryGuardTimer not handled in state Operational

// Event ExpiryIkeGraceTimer not handled in state Operational

// Event OamStart not handled in state Operational

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectDnsServerAddReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action DnsServerAdd" );

        mFsm.mInterface.DnsServerAdd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectFirewallOpenReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpen" );

        mFsm.mInterface.FirewallOpen(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectFirewallOpenCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpened" );

        mFsm.mInterface.FirewallOpened(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectFirewallCloseReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClose" );

        mFsm.mInterface.FirewallClose(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectFirewallCloseCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClosed" );

        mFsm.mInterface.FirewallClosed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectSignatureVerifyReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action SignatureVerifyTest" );

        mFsm.mInterface.SignatureVerifyTest(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectMibSubscribeAttributesInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action StoreAttributes" );

        mFsm.mInterface.StoreAttributes(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectIkeTunnelCreateReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action TunnelCreate" );

        mFsm.mInterface.TunnelCreate(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectIkeTunnelDeleteReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action TunnelDelete" );

        mFsm.mInterface.TunnelDelete(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectIkeTunnelConnectInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action TunnelConnected" );

        mFsm.mInterface.TunnelConnected(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectIkeTunnelDisconnectInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action TunnelDisconnected" );

        mFsm.mInterface.TunnelDisconnected(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Operational::InjectHwCryptoAvailableInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action HwCryptoCtrl" );

        mFsm.mInterface.HwCryptoCtrl(event);

    }
}

// State Operational has no deferred events.

// Event Go not handled in state Stopped

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectStop(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mStopped.Entry();
    }
}

// Event ExpiryGuardTimer not handled in state Stopped

// Event ExpiryIkeGraceTimer not handled in state Stopped

// Event OamStart not handled in state Stopped

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectDnsServerAddReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action DnsServerAdd" );

        mFsm.mInterface.DnsServerAdd(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectFirewallOpenReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpen" );

        mFsm.mInterface.FirewallOpen(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectFirewallOpenCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallOpened" );

        mFsm.mInterface.FirewallOpened(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectFirewallCloseReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClose" );

        mFsm.mInterface.FirewallClose(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectFirewallCloseCnf(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action FirewallClosed" );

        mFsm.mInterface.FirewallClosed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectSignatureVerifyReq(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action SignatureVerifyFailed" );

        mFsm.mInterface.SignatureVerifyFailed(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::Stopped::InjectMibSubscribeAttributesInd(
    shared_ptr<threeway::MessageSerialisedData> event
    )
{
    {
        mFsm.TracePoint( "Action StoreAttributes" );

        mFsm.mInterface.StoreAttributes(event);

    }
}

// Event IkeTunnelCreateReq not handled in state Stopped

// Event IkeTunnelDeleteReq not handled in state Stopped

// Event IkeTunnelConnectInd not handled in state Stopped

// Event IkeTunnelDisconnectInd not handled in state Stopped

// Event HwCryptoAvailableInd not handled in state Stopped

// State Stopped has no deferred events.

/*** WARNING: Code AUTO-GENERATED from Tenpin.fsm. Do not edit! ***/
void TenpinFsm::UsabilityTest::Entry( )
{
    RSYS_ASSERT(mFsm.mState == &mFsm.mAll);

    if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

    mFsm.mState = &mFsm.mUsabilityTest;

    // Guard condition
    if( mFsm.mInterface.CheckUsable())
    {
        mFsm.TracePoint( "CheckUsable? (true)" );

        mFsm.mState->Exit();
        mFsm.mUsable.Entry();
        mFsm.mNotConfigured.Entry();
    }
    else
    {
        mFsm.mState->Exit();
        mFsm.mUnusable.Entry();
    }
}

} // -namespace-

