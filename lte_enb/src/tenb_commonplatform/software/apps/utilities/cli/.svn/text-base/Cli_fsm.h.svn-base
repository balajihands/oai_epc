///////////////////////////////////////////////////////////////////////////////
//
// Cli_fsm.h
//
// Autogenerated from Cli.fsm
//
// See header file for documentation.
//
// Copyright Radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __Cli_fsm_h_
#define __Cli_fsm_h_
///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <deque>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "Cli_fsm_interface.h"


/*** WARNING: Code AUTO-GENERATED from Cli.fsm. Do not edit! ***/
class CommandLineFsm
{
public:

    CommandLineFsm(
        CommandLineFsmInterface & interfaceClass,
        bool traceEnabled = false,
        const char * name = "CommandLineFsm"
        );
    virtual ~CommandLineFsm();

    void InjectStart(void* event);
    void InjectStop(shared_ptr<std::string> event);
    void InjectCommandLine(shared_ptr<CliCommand> event);
    void InjectTimeout(void* event);
    void InjectCommandComplete(shared_ptr<CliExecuteCmdCnf> event);
    void InjectCommandResponse(shared_ptr<CliExecuteCmdInd> event);
    void InjectCommandProgressing(shared_ptr<CliExecuteCmdProgressInd> event);
    std::string ToString() const { return mName; }

    void SetFsmTraceEnable( bool traceEnable = true ) { mFsmTraceEnabled = traceEnable; }

    void TracePoint( const char * s )
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.%u: %s", mName.c_str(), mEventCounter, s );
        }
    }

private:
    typedef enum EventId_tag
    {
        FSM_EVENT_Start,
        FSM_EVENT_Stop,
        FSM_EVENT_CommandLine,
        FSM_EVENT_Timeout,
        FSM_EVENT_CommandComplete,
        FSM_EVENT_CommandResponse,
        FSM_EVENT_CommandProgressing,
        NUMBER_OF_INJECTABLE_EVENTS
    } EventId;

    typedef enum EventType_tag
    {
        FSM_EVENT_TYPE_void_STAR_,
        FSM_EVENT_TYPE_shared_ptr_LT_CliCommand_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_std_COLON__COLON_string_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_CliExecuteCmdProgressInd_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_CliExecuteCmdCnf_GT_,
        FSM_EVENT_TYPE_shared_ptr_LT_CliExecuteCmdInd_GT_,
        NUMBER_OF_EVENT_TYPES
    } EventType;

    class FsmEvent
    {
    public:
        FsmEvent( EventType eventType ) :
            mEventType(eventType) {}
        virtual ~FsmEvent(){}

        EventType mEventType;
    };

    class FsmEvent_void_STAR_ : public FsmEvent
    {
    public:
        FsmEvent_void_STAR_( void* event ) :
            FsmEvent(FSM_EVENT_TYPE_void_STAR_),
            mEvent(event) {}
        ~FsmEvent_void_STAR_() {}
    	void* mEvent;
    };

    class FsmEvent_shared_ptr_LT_CliCommand_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_CliCommand_GT_( shared_ptr<CliCommand> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_CliCommand_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_CliCommand_GT_() {}
    	shared_ptr<CliCommand> mEvent;
    };

    class FsmEvent_shared_ptr_LT_std_COLON__COLON_string_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_std_COLON__COLON_string_GT_( shared_ptr<std::string> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_std_COLON__COLON_string_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_std_COLON__COLON_string_GT_() {}
    	shared_ptr<std::string> mEvent;
    };

    class FsmEvent_shared_ptr_LT_CliExecuteCmdProgressInd_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_CliExecuteCmdProgressInd_GT_( shared_ptr<CliExecuteCmdProgressInd> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_CliExecuteCmdProgressInd_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_CliExecuteCmdProgressInd_GT_() {}
    	shared_ptr<CliExecuteCmdProgressInd> mEvent;
    };

    class FsmEvent_shared_ptr_LT_CliExecuteCmdCnf_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_CliExecuteCmdCnf_GT_( shared_ptr<CliExecuteCmdCnf> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_CliExecuteCmdCnf_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_CliExecuteCmdCnf_GT_() {}
    	shared_ptr<CliExecuteCmdCnf> mEvent;
    };

    class FsmEvent_shared_ptr_LT_CliExecuteCmdInd_GT_ : public FsmEvent
    {
    public:
        FsmEvent_shared_ptr_LT_CliExecuteCmdInd_GT_( shared_ptr<CliExecuteCmdInd> event ) :
            FsmEvent(FSM_EVENT_TYPE_shared_ptr_LT_CliExecuteCmdInd_GT_),
            mEvent(event) {}
        ~FsmEvent_shared_ptr_LT_CliExecuteCmdInd_GT_() {}
    	shared_ptr<CliExecuteCmdInd> mEvent;
    };

    void Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent );

    class State;
    typedef std::deque< State * > StateHistory;

    class State
    {
    public:
        State(CommandLineFsm & fsm, const char * name ) :
            mFsm(fsm),
            mName(name){}
        virtual ~State(){}

        virtual void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData ) { RSYS_ASSERT_PRINTF(false,"Cannot inject in state %s.", mName.c_str()); }
        virtual bool RunToCompletion() { RSYS_ASSERT_PRINTF(false,"RunToCompletion failure in state %s.", mName.c_str()); return false; };
        virtual bool DeferEvent( EventId ) const { RSYS_ASSERT_PRINTF(false,"Cannot defer in state %s.", mName.c_str()); return false; }

        virtual void Entry()
        {
            RSYS_ASSERT( mFsm.mState == GetSuperstate() );

            UpdateHistoryUponEntry();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceEntryMethod();

            mFsm.mState = this;
        }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            UpdateHistoryUponExit();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }

        CommandLineFsm& mFsm;
        std::string mName;
        virtual State * GetSuperstate() const { return NULL; }
        virtual void  InterfaceEntryMethod() {}
        virtual void  InterfaceExitMethod() {}
        virtual void  UpdateHistoryUponExit() { mFsm.mCurrentStateTransitionExitsList.push_front( mFsm.mState ); }
        virtual void  UpdateHistoryUponEntry() { mFsm.mCurrentStateTransitionExitsList.clear(); }
    };

    class SimpleState : public State
    {
    public:
        SimpleState(CommandLineFsm & fsm, const char * name) :
            State(fsm, name){}
        virtual ~SimpleState(){}

        void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData );
        virtual bool RunToCompletion() { return true; }

        virtual bool DeferEvent( EventId ) const { return false; }
        virtual void InjectStart( void* eventData) { EventConsumed(FSM_EVENT_Start); }
        virtual void InjectStop( shared_ptr<std::string> eventData) { EventConsumed(FSM_EVENT_Stop); }
        virtual void InjectCommandLine( shared_ptr<CliCommand> eventData) { EventConsumed(FSM_EVENT_CommandLine); }
        virtual void InjectTimeout( void* eventData) { EventConsumed(FSM_EVENT_Timeout); }
        virtual void InjectCommandComplete( shared_ptr<CliExecuteCmdCnf> eventData) { EventConsumed(FSM_EVENT_CommandComplete); }
        virtual void InjectCommandResponse( shared_ptr<CliExecuteCmdInd> eventData) { EventConsumed(FSM_EVENT_CommandResponse); }
        virtual void InjectCommandProgressing( shared_ptr<CliExecuteCmdProgressInd> eventData) { EventConsumed(FSM_EVENT_CommandProgressing); }

    private:
        void EventConsumed( EventId queuedEventId )
        {
            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s consumed %s", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str(), mEventName[queuedEventId] ); }
        }
    };

    class AwaitCommand : public SimpleState
    {
    public:
        AwaitCommand(CommandLineFsm & fsm) :
            SimpleState(fsm, "AwaitCommand") {}
        virtual ~AwaitCommand(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.AwaitCommandEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.AwaitCommandExit();}
        State * GetSuperstate() const { return &mFsm.mUserIoThreadRunning; }
        virtual void InjectStop( shared_ptr<std::string> eventData);
        virtual void InjectCommandLine( shared_ptr<CliCommand> eventData);
        virtual void InjectTimeout( void* eventData);
        virtual void InjectCommandProgressing( shared_ptr<CliExecuteCmdProgressInd> eventData);
    };

    class CommandInProgress : public SimpleState
    {
    public:
        CommandInProgress(CommandLineFsm & fsm) :
            SimpleState(fsm, "CommandInProgress") {}
        virtual ~CommandInProgress(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.CommandInProgressEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.CommandInProgressExit();}
        bool DeferEvent( EventId ) const ;
        State * GetSuperstate() const { return &mFsm.mUserIoThreadRunning; }
        virtual void InjectStop( shared_ptr<std::string> eventData);
        virtual void InjectTimeout( void* eventData);
        virtual void InjectCommandComplete( shared_ptr<CliExecuteCmdCnf> eventData);
        virtual void InjectCommandResponse( shared_ptr<CliExecuteCmdInd> eventData);
        virtual void InjectCommandProgressing( shared_ptr<CliExecuteCmdProgressInd> eventData);
    };

    class Quitting : public SimpleState
    {
    public:
        Quitting(CommandLineFsm & fsm) :
            SimpleState(fsm, "Quitting") {}
        virtual ~Quitting(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.QuittingEntry();}
    };

    class Superstate : public State
    {
    public:
        Superstate(CommandLineFsm & fsm, const char * name) :
            State(fsm, name)
        { }
        virtual ~Superstate()
        { }
    };

    class SuperstateWithInitialState : public Superstate
    {
    public:
        SuperstateWithInitialState(CommandLineFsm & fsm, const char * name) :
            Superstate(fsm, name) {}
        virtual ~SuperstateWithInitialState() {}

        virtual bool RunToCompletion() = 0;
    };

    class UserIoThreadRunning : public Superstate
    {
    public:
        UserIoThreadRunning(CommandLineFsm & fsm) :
            Superstate(fsm, "UserIoThreadRunning") {}
        virtual ~UserIoThreadRunning(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.UserIoThreadRunningEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.UserIoThreadRunningExit();}

    private:
    };

    class QueuedFsmEvent
    {
    public:
        QueuedFsmEvent( EventId eventId, shared_ptr<FsmEvent> fsmEvent) :
            mId(eventId),
            mFsmEvent(fsmEvent){}
        ~QueuedFsmEvent(){}

        EventId mId;
        shared_ptr<FsmEvent> mFsmEvent;
    };

    CommandLineFsmInterface & mInterface;
    bool mFsmTraceEnabled;
    std::string mName;
    State * mState;
    UserIoThreadRunning mUserIoThreadRunning;
    AwaitCommand mAwaitCommand;
    CommandInProgress mCommandInProgress;
    Quitting mQuitting;
    std::list< shared_ptr<QueuedFsmEvent> > mfsmEventQueue;
    bool mFsmInjectInProgress;
    unsigned mEventCounter;
    StateHistory mCurrentStateTransitionExitsList;
    static const char * mEventName[NUMBER_OF_INJECTABLE_EVENTS];

};


#endif // __Cli_fsm_interface_h_

