///////////////////////////////////////////////////////////////////////////////
//
//FsmcUnitTest_fsm.cpp
//
// Autogenerated from FsmcUnitTest.fsm
//
// See header file for documentation.
//
// Copyright Radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <iostream>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "FsmcUnitTest_fsm.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Static Data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

using namespace fsmc;

namespace fsmc
{

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
FsmcUnitTestFsm::FsmcUnitTestFsm(
    FsmcUnitTestFsmInterface & interfaceClass,
    bool traceEnabled,
    const char * name 
    ) :
    mInterface(interfaceClass),
    mFsmTraceEnabled(traceEnabled),
    mName(name),
    mState(NULL),
    mTransitionTests(*this ),
    mTt01_s01(*this ),
    mTt01_s02(*this ),
    mTt01_ss03(*this ),
    mTt01_s03(*this ),
    mGuardConditionTests(*this ),
    mGct_s01(*this ),
    mGct_ss01_s02(*this ),
    mGct_s02(*this ),
    mActionTests(*this ),
    mAct_s01(*this ),
    mAct_s02(*this ),
    mAct_s03(*this ),
    mDeepHistoryTests(*this ),
    mDht_ext(*this ),
    mDht_ss01(*this ),
    mDht_ss01_ss01(*this ),
    mDht_s01(*this ),
    mDht_s02(*this ),
    mDht_s03(*this ),
    mShallowHistoryTests(*this ),
    mSht_ext(*this ),
    mSht_ss01(*this ),
    mSht_s01(*this ),
    mSht_s02(*this ),
    mDeferEventTests(*this ),
    mDeferEvent_e01(*this ),
    mDeferEvent_e02(*this ),
    mDeferEvent_e03(*this ),
    mDeferEvent_none(*this ),
    mfsmEventQueue(),
    mFsmInjectInProgress(false),
    mEventCounter(0)
{
    // Initial State
    mTransitionTests.Entry();
    mTt01_s01.Entry();

    while( !mState->RunToCompletion() )
    {
        continue;
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
FsmcUnitTestFsm::~FsmcUnitTestFsm()
{
    RSYS_ASSERT_PRINTF(!mFsmInjectInProgress, "FsmcUnitTestFsm deleted while event-inject in progress.");

    mfsmEventQueue.clear();
    mCurrentStateTransitionExitsList.clear();
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Injecte01(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( FsmcUnitTestFsm::FSM_EVENT_e01, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Injecte02(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( FsmcUnitTestFsm::FSM_EVENT_e02, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Injecte03(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( FsmcUnitTestFsm::FSM_EVENT_e03, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Injecte04(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( FsmcUnitTestFsm::FSM_EVENT_e04, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::InjectNextTest(void* event)
{
    shared_ptr<FsmEvent> fsmEvent(new FsmEvent_void_STAR_(event));
    Enqueue( FsmcUnitTestFsm::FSM_EVENT_NextTest, fsmEvent);
}
/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    // Reentrancy Protection is NOT intended to make thread-safe
    shared_ptr<QueuedFsmEvent>  qEvent(new QueuedFsmEvent(eventId, fsmEvent));
    mfsmEventQueue.push_back(qEvent);

    if(!mFsmInjectInProgress)
    {
        mFsmInjectInProgress = true;

        list< shared_ptr<QueuedFsmEvent> >::iterator event = mfsmEventQueue.begin();

        while( event != mfsmEventQueue.end() )
        {
            RSYS_ASSERT(*event);
            RSYS_ASSERT(mState);

            EventId queuedEventId = (*event)->mId;

            RSYS_ASSERT(queuedEventId < NUMBER_OF_INJECTABLE_EVENTS);

            if( !mState->DeferEvent( queuedEventId ) )
            {
                ++mEventCounter;

                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s <--(%s)-- ", mName.c_str(), mEventCounter, mState->mName.c_str(), mEventName[queuedEventId] ); }

                mState->Inject(queuedEventId, (*event)->mFsmEvent);

                while( !mState->RunToCompletion() )
                {
                    continue;
                }

                mfsmEventQueue.erase(event);
                event = mfsmEventQueue.begin();
            }
            else
            {
                if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: %s (%s deferred)", mName.c_str(), mState->mName.c_str(), mEventName[queuedEventId] ); };
                event++;
            }
        }

        mFsmInjectInProgress = false;
    }
    else
    {
        if(mFsmTraceEnabled) { TRACE_PRINTF("%s.-: (%s enqueued)", mName.c_str(), mEventName[eventId] ); }
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
const char * FsmcUnitTestFsm::mEventName[NUMBER_OF_INJECTABLE_EVENTS] =
{
    "e01",
    "e02",
    "e03",
    "e04",
    "NextTest",
};

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::SimpleState::Inject(
    EventId eventId,
    shared_ptr<FsmEvent> fsmEvent
    )
{
    RSYS_ASSERT(eventId < NUMBER_OF_INJECTABLE_EVENTS);

    switch(eventId)
    {
        case FsmcUnitTestFsm::FSM_EVENT_e01:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            Injecte01(event->mEvent);
        }
        break;

        case FsmcUnitTestFsm::FSM_EVENT_e02:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            Injecte02(event->mEvent);
        }
        break;

        case FsmcUnitTestFsm::FSM_EVENT_e03:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            Injecte03(event->mEvent);
        }
        break;

        case FsmcUnitTestFsm::FSM_EVENT_e04:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            Injecte04(event->mEvent);
        }
        break;

        case FsmcUnitTestFsm::FSM_EVENT_NextTest:
        {
            RSYS_ASSERT(FSM_EVENT_TYPE_void_STAR_ == fsmEvent->mEventType);
            shared_ptr<FsmEvent_void_STAR_> event = dynamic_pointer_cast<FsmEvent_void_STAR_>(fsmEvent);
            InjectNextTest(event->mEvent);
        }
        break;

        default:
            RSYS_ASSERT(false);
            break;
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s01::Injecte01(
    void* event
    )
{
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s01::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mTt01_s01.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s01::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mTt01_s02.Entry();
    }
}

// Event e04 not handled in state Tt01_s01

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s01::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mGuardConditionTests.Entry();
    }
}

// State Tt01_s01 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s02::Injecte01(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s02::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

        mFsm.mTt01_s02.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s02::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.mTt01_ss03.Entry();
        mFsm.mTt01_s03.Entry();
    }
}

// Event e04 not handled in state Tt01_s02

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s02::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mGuardConditionTests.Entry();
    }
}

// State Tt01_s02 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s03::Injecte01(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s03::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

        mFsm.mTt01_s03.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s03::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s03::Injecte04(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent04" );

        mFsm.mInterface.logEvent04(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Tt01_s03::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mGuardConditionTests.Entry();
    }
}

// State Tt01_s03 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s01::Injecte01(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryTrue(event))
    {
        mFsm.TracePoint( "QueryTrue? (true)" );

        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

    }
    else
    {
        SimpleState::Injecte01(event);
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s01::Injecte02(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    {
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s01::Injecte03(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryTrue(event))
    {
        mFsm.TracePoint( "QueryTrue? (true)" );

        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

    }
    else
    {
        SimpleState::Injecte03(event);
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s01::Injecte04(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent04" );

        mFsm.mInterface.logEvent04(event);

        mFsm.mGct_ss01_s02.Entry();
        mFsm.mGct_s02.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s01::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mActionTests.Entry();
    }
}

// State Gct_s01 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s02::Injecte01(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    {
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s02::Injecte02(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    {
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s02::Injecte03(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    {
        SimpleState::Injecte03(event);
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s02::Injecte04(
    void* event
    )
{
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    // Guard condition
    if( mFsm.mInterface.QueryFalse(event))
    {
        mFsm.TracePoint( "QueryFalse? (true)" );

        mFsm.TracePoint( "Action ContractFailure" );

        mFsm.mInterface.ContractFailure(event);

    }
    else
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent04" );

        mFsm.mInterface.logEvent04(event);

        mFsm.mGct_s02.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Gct_s02::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mActionTests.Entry();
    }
}

// State Gct_s02 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Act_s01::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01failure" );

        switch( mFsm.mInterface.logEvent01failure(event))
        {
            case FsmcUnitTestFsmActionlogEvent01failure::FSM_ACTION_SUCCESS:
            {
                mFsm.TracePoint( "logEvent01failure=SUCCESS" );

                mFsm.mAct_s01.Entry();
            }
            break;

            case FsmcUnitTestFsmActionlogEvent01failure::FSM_ACTION_f01:
            {
                mFsm.TracePoint( "logEvent01failure=f01" );

                mFsm.mAct_s02.Entry();
            }
            return;
        }

    }
}

// Event e02 not handled in state Act_s01

// Event e03 not handled in state Act_s01

// Event e04 not handled in state Act_s01

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Act_s01::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeepHistoryTests.Entry();
    }
}

// State Act_s01 has no deferred events.

// Event e01 not handled in state Act_s02

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Act_s02::Injecte02(
    void* event
    )
{
    {
        mFsm.TracePoint( "Action logEvent02failure" );

        switch( mFsm.mInterface.logEvent02failure(event))
        {
            case FsmcUnitTestFsmActionlogEvent02failure::FSM_ACTION_SUCCESS:
            {
                mFsm.TracePoint( "logEvent02failure=SUCCESS" );

            }
            break;

            case FsmcUnitTestFsmActionlogEvent02failure::FSM_ACTION_f01:
            {
                mFsm.TracePoint( "logEvent02failure=f01" );

                mFsm.mState->Exit();
                mFsm.mAct_s02.Entry();
            }
            return;

            case FsmcUnitTestFsmActionlogEvent02failure::FSM_ACTION_f02:
            {
                mFsm.TracePoint( "logEvent02failure=f02" );

                mFsm.mState->Exit();
                mFsm.mAct_s03.Entry();
            }
            return;
        }

    }
}

// Event e03 not handled in state Act_s02

// Event e04 not handled in state Act_s02

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Act_s02::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeepHistoryTests.Entry();
    }
}

// State Act_s02 has no deferred events.

// Event e01 not handled in state Act_s03

// Event e02 not handled in state Act_s03

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Act_s03::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.TracePoint( "Action logEvent03failure" );

        switch( mFsm.mInterface.logEvent03failure(event))
        {
            case FsmcUnitTestFsmActionlogEvent03failure::FSM_ACTION_SUCCESS:
            {
                mFsm.TracePoint( "logEvent03failure=SUCCESS" );
            }
            break;

            case FsmcUnitTestFsmActionlogEvent03failure::FSM_ACTION_f01:
            {
                mFsm.TracePoint( "logEvent03failure=f01" );

                mFsm.mAct_s01.Entry();
            }
            return;

            case FsmcUnitTestFsmActionlogEvent03failure::FSM_ACTION_f02:
            {
                mFsm.TracePoint( "logEvent03failure=f02" );

                mFsm.mAct_s02.Entry();
            }
            return;

            case FsmcUnitTestFsmActionlogEvent03failure::FSM_ACTION_f03:
            {
                mFsm.TracePoint( "logEvent03failure=f03" );

                mFsm.mAct_s03.Entry();
            }
            return;
        }

        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.mAct_s01.Entry();
    }
}

// Event e04 not handled in state Act_s03

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Act_s03::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeepHistoryTests.Entry();
    }
}

// State Act_s03 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_ext::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mDeepHistoryTests.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_ext::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mDeepHistoryTests.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_ext::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mDeepHistoryTests.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_ext::Injecte04(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mDeepHistoryTests.Entry();
    }
}

// Event NextTest not handled in state Dht_ext

// State Dht_ext has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_s01::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

        mFsm.mDht_s02.Entry();
    }
}

// Event e02 not handled in state Dht_s01

// Event e03 not handled in state Dht_s01

// Event e04 not handled in state Dht_s01

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_s01::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mShallowHistoryTests.Entry();
    }
}

// State Dht_s01 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_s02::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

        mFsm.mDht_ext.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_s02::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

        mFsm.mDht_s03.Entry();
    }
}

// Event e03 not handled in state Dht_s02

// Event e04 not handled in state Dht_s02

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_s02::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mShallowHistoryTests.Entry();
    }
}

// State Dht_s02 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_s03::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

        mFsm.mDht_ss01.Entry();
        mFsm.mDht_ss01_ss01.Entry();
    }
}

// Event e02 not handled in state Dht_s03

// Event e03 not handled in state Dht_s03

// Event e04 not handled in state Dht_s03

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Dht_s03::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mShallowHistoryTests.Entry();
    }
}

// State Dht_s03 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_ext::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

        mFsm.mSht_ss01.Entry();
    }
}

// Event e02 not handled in state Sht_ext

// Event e03 not handled in state Sht_ext

// Event e04 not handled in state Sht_ext

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_ext::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeferEventTests.Entry();
    }
}

// State Sht_ext has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s01::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

        mFsm.mSht_s01.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s01::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

        mFsm.mSht_s02.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s01::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.mSht_ext.Entry();
    }
}

// Event e04 not handled in state Sht_s01

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s01::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeferEventTests.Entry();
    }
}

// State Sht_s01 has no deferred events.

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s02::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

        mFsm.mSht_s01.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s02::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

        mFsm.mSht_s02.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s02::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.mSht_ext.Entry();
    }
}

// Event e04 not handled in state Sht_s02

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::Sht_s02::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeferEventTests.Entry();
    }
}

// State Sht_s02 has no deferred events.

// Event e01 deferred in state DeferEvent_e01

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e01::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

        mFsm.mDeferEvent_e02.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e01::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.mDeferEvent_e03.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e01::Injecte04(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent04" );

        mFsm.mInterface.logEvent04(event);

        mFsm.mDeferEvent_none.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e01::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeferEventTests.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
bool FsmcUnitTestFsm::DeferEvent_e01::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case FsmcUnitTestFsm::FSM_EVENT_e01:
            return true;


        default:
            return false;
    }
}

// Event e01 deferred in state DeferEvent_e02

// Event e02 deferred in state DeferEvent_e02

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e02::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.mDeferEvent_e03.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e02::Injecte04(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent04" );

        mFsm.mInterface.logEvent04(event);

        mFsm.mDeferEvent_none.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e02::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeferEventTests.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
bool FsmcUnitTestFsm::DeferEvent_e02::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case FsmcUnitTestFsm::FSM_EVENT_e01:
            return true;

        case FsmcUnitTestFsm::FSM_EVENT_e02:
            return true;


        default:
            return false;
    }
}

// Event e01 deferred in state DeferEvent_e03

// Event e02 deferred in state DeferEvent_e03

// Event e03 deferred in state DeferEvent_e03

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e03::Injecte04(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent04" );

        mFsm.mInterface.logEvent04(event);

        mFsm.mDeferEvent_none.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_e03::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeferEventTests.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
bool FsmcUnitTestFsm::DeferEvent_e03::DeferEvent( EventId eventId ) const
{
    switch( eventId )
    {
        case FsmcUnitTestFsm::FSM_EVENT_e01:
            return true;

        case FsmcUnitTestFsm::FSM_EVENT_e02:
            return true;

        case FsmcUnitTestFsm::FSM_EVENT_e03:
            return true;


        default:
            return false;
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_none::Injecte01(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent01" );

        mFsm.mInterface.logEvent01(event);

        mFsm.mDeferEvent_e01.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_none::Injecte02(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent02" );

        mFsm.mInterface.logEvent02(event);

        mFsm.mDeferEvent_e02.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_none::Injecte03(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent03" );

        mFsm.mInterface.logEvent03(event);

        mFsm.mDeferEvent_e03.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_none::Injecte04(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.TracePoint( "Action logEvent04" );

        mFsm.mInterface.logEvent04(event);

        mFsm.mDeferEvent_none.Entry();
    }
}

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
void FsmcUnitTestFsm::DeferEvent_none::InjectNextTest(
    void* event
    )
{
    {
        mFsm.mState->Exit();
        mFsm.mState->Exit();
        mFsm.mDeferEventTests.Entry();
    }
}

// State DeferEvent_none has no deferred events.

} // -namespace-

