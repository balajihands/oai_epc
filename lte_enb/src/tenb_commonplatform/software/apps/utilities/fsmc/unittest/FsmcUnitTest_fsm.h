///////////////////////////////////////////////////////////////////////////////
//
// FsmcUnitTest_fsm.h
//
// Autogenerated from FsmcUnitTest.fsm
//
// See header file for documentation.
//
// Copyright Radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __FsmcUnitTest_fsm_h_
#define __FsmcUnitTest_fsm_h_
///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <deque>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "FsmcUnitTest_fsm_interface.h"

using namespace fsmc;

namespace fsmc
{

/*** WARNING: Code AUTO-GENERATED from FsmcUnitTest.fsm. Do not edit! ***/
class FsmcUnitTestFsm
{
public:

    FsmcUnitTestFsm(
        FsmcUnitTestFsmInterface & interfaceClass,
        bool traceEnabled = false,
        const char * name = "FsmcUnitTestFsm"
        );
    virtual ~FsmcUnitTestFsm();

    void Injecte01(void* event);
    void Injecte02(void* event);
    void Injecte03(void* event);
    void Injecte04(void* event);
    void InjectNextTest(void* event);
    std::string ToString() const
    {
        std::string returnedString(mName);

        if(mState)
        {
            returnedString += ".";
            returnedString += mState->mName;
        }

        return returnedString;
    }

    void Rename( const std::string & newName)
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.-: Renamed to %s", mName.c_str(), newName.c_str() );
        }
        mName = newName;
    }

    void SetFsmTraceEnable( bool traceEnable = true ) { mFsmTraceEnabled = traceEnable; }

    void TracePoint( const char * s )
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.%u: %s", mName.c_str(), mEventCounter, s );
        }
    }

private:
    typedef enum EventId_tag
    {
        FSM_EVENT_e01,
        FSM_EVENT_e02,
        FSM_EVENT_e03,
        FSM_EVENT_e04,
        FSM_EVENT_NextTest,
        NUMBER_OF_INJECTABLE_EVENTS
    } EventId;

    typedef enum EventType_tag
    {
        FSM_EVENT_TYPE_void_STAR_,
        NUMBER_OF_EVENT_TYPES
    } EventType;

    class FsmEvent
    {
    public:
        FsmEvent( EventType eventType ) :
            mEventType(eventType) {}
        virtual ~FsmEvent(){}

        EventType mEventType;
    };

    class FsmEvent_void_STAR_ : public FsmEvent
    {
    public:
        FsmEvent_void_STAR_( void* event ) :
            FsmEvent(FSM_EVENT_TYPE_void_STAR_),
            mEvent(event) {}
        ~FsmEvent_void_STAR_() {}
    	void* mEvent;
    };

    void Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent );

    class State;
    typedef std::deque< State * > StateHistory;

    class State
    {
    public:
        State(FsmcUnitTestFsm & fsm, const char * name ) :
            mFsm(fsm),
            mName(name){}
        virtual ~State(){}

        virtual void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData ) { RSYS_ASSERT_PRINTF(false,"Cannot inject in state %s.", mName.c_str()); }
        virtual bool RunToCompletion() { RSYS_ASSERT_PRINTF(false,"RunToCompletion failure in state %s.", mName.c_str()); return false; };
        virtual bool DeferEvent( EventId ) const { RSYS_ASSERT_PRINTF(false,"Cannot defer in state %s.", mName.c_str()); return false; }

        virtual void Entry()
        {
            RSYS_ASSERT( mFsm.mState == GetSuperstate() );

            UpdateHistoryUponEntry();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceEntryMethod();

            mFsm.mState = this;
        }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            UpdateHistoryUponExit();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }

        FsmcUnitTestFsm& mFsm;
        std::string mName;
        virtual State * GetSuperstate() const { return NULL; }
        virtual void  InterfaceEntryMethod() {}
        virtual void  InterfaceExitMethod() {}
        virtual void  UpdateHistoryUponExit() { mFsm.mCurrentStateTransitionExitsList.push_front( mFsm.mState ); }
        virtual void  UpdateHistoryUponEntry() { mFsm.mCurrentStateTransitionExitsList.clear(); }
    };

    class SimpleState : public State
    {
    public:
        SimpleState(FsmcUnitTestFsm & fsm, const char * name) :
            State(fsm, name){}
        virtual ~SimpleState(){}

        void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData );
        virtual bool RunToCompletion() { return true; }

        virtual bool DeferEvent( EventId ) const { return false; }
        virtual void Injecte01( void* eventData) { EventConsumed(FSM_EVENT_e01); }
        virtual void Injecte02( void* eventData) { EventConsumed(FSM_EVENT_e02); }
        virtual void Injecte03( void* eventData) { EventConsumed(FSM_EVENT_e03); }
        virtual void Injecte04( void* eventData) { EventConsumed(FSM_EVENT_e04); }
        virtual void InjectNextTest( void* eventData) { EventConsumed(FSM_EVENT_NextTest); }

    private:
        void EventConsumed( EventId queuedEventId )
        {
            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s consumed %s", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str(), mEventName[queuedEventId] ); }
        }
    };

    class Tt01_s01 : public SimpleState
    {
    public:
        Tt01_s01(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Tt01_s01") {}
        virtual ~Tt01_s01(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Tt01_s01Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Tt01_s01Exit();}
        State * GetSuperstate() const { return &mFsm.mTransitionTests; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Tt01_s02 : public SimpleState
    {
    public:
        Tt01_s02(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Tt01_s02") {}
        virtual ~Tt01_s02(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Tt01_s02Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Tt01_s02Exit();}
        State * GetSuperstate() const { return &mFsm.mTransitionTests; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Tt01_s03 : public SimpleState
    {
    public:
        Tt01_s03(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Tt01_s03") {}
        virtual ~Tt01_s03(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Tt01_s03Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Tt01_s03Exit();}
        State * GetSuperstate() const { return &mFsm.mTt01_ss03; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void Injecte04( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Gct_s01 : public SimpleState
    {
    public:
        Gct_s01(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Gct_s01") {}
        virtual ~Gct_s01(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Gct_s01Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Gct_s01Exit();}
        State * GetSuperstate() const { return &mFsm.mGuardConditionTests; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void Injecte04( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Gct_s02 : public SimpleState
    {
    public:
        Gct_s02(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Gct_s02") {}
        virtual ~Gct_s02(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Gct_s02Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Gct_s02Exit();}
        State * GetSuperstate() const { return &mFsm.mGct_ss01_s02; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void Injecte04( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Act_s01 : public SimpleState
    {
    public:
        Act_s01(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Act_s01") {}
        virtual ~Act_s01(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Act_s01Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Act_s01Exit();}
        State * GetSuperstate() const { return &mFsm.mActionTests; }
        virtual void Injecte01( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Act_s02 : public SimpleState
    {
    public:
        Act_s02(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Act_s02") {}
        virtual ~Act_s02(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Act_s02Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Act_s02Exit();}
        State * GetSuperstate() const { return &mFsm.mActionTests; }
        virtual void Injecte02( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Act_s03 : public SimpleState
    {
    public:
        Act_s03(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Act_s03") {}
        virtual ~Act_s03(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Act_s03Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Act_s03Exit();}
        State * GetSuperstate() const { return &mFsm.mActionTests; }
        virtual void Injecte03( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Dht_ext : public SimpleState
    {
    public:
        Dht_ext(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Dht_ext") {}
        virtual ~Dht_ext(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Dht_extEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Dht_extExit();}
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void Injecte04( void* eventData);
    };

    class Dht_s01 : public SimpleState
    {
    public:
        Dht_s01(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Dht_s01") {}
        virtual ~Dht_s01(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Dht_s01Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Dht_s01Exit();}
        State * GetSuperstate() const { return &mFsm.mDht_ss01_ss01; }
        virtual void Injecte01( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Dht_s02 : public SimpleState
    {
    public:
        Dht_s02(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Dht_s02") {}
        virtual ~Dht_s02(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Dht_s02Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Dht_s02Exit();}
        State * GetSuperstate() const { return &mFsm.mDht_ss01_ss01; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Dht_s03 : public SimpleState
    {
    public:
        Dht_s03(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Dht_s03") {}
        virtual ~Dht_s03(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Dht_s03Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Dht_s03Exit();}
        State * GetSuperstate() const { return &mFsm.mDeepHistoryTests; }
        virtual void Injecte01( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Sht_ext : public SimpleState
    {
    public:
        Sht_ext(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Sht_ext") {}
        virtual ~Sht_ext(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Sht_extEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Sht_extExit();}
        State * GetSuperstate() const { return &mFsm.mShallowHistoryTests; }
        virtual void Injecte01( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Sht_s01 : public SimpleState
    {
    public:
        Sht_s01(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Sht_s01") {}
        virtual ~Sht_s01(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Sht_s01Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Sht_s01Exit();}
        State * GetSuperstate() const { return &mFsm.mSht_ss01; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Sht_s02 : public SimpleState
    {
    public:
        Sht_s02(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "Sht_s02") {}
        virtual ~Sht_s02(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.Sht_s02Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.Sht_s02Exit();}
        State * GetSuperstate() const { return &mFsm.mSht_ss01; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class DeferEvent_e01 : public SimpleState
    {
    public:
        DeferEvent_e01(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "DeferEvent_e01") {}
        virtual ~DeferEvent_e01(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.DeferEvent_e01Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.DeferEvent_e01Exit();}
        bool DeferEvent( EventId ) const ;
        State * GetSuperstate() const { return &mFsm.mDeferEventTests; }
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void Injecte04( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class DeferEvent_e02 : public SimpleState
    {
    public:
        DeferEvent_e02(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "DeferEvent_e02") {}
        virtual ~DeferEvent_e02(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.DeferEvent_e02Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.DeferEvent_e02Exit();}
        bool DeferEvent( EventId ) const ;
        State * GetSuperstate() const { return &mFsm.mDeferEventTests; }
        virtual void Injecte03( void* eventData);
        virtual void Injecte04( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class DeferEvent_e03 : public SimpleState
    {
    public:
        DeferEvent_e03(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "DeferEvent_e03") {}
        virtual ~DeferEvent_e03(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.DeferEvent_e03Entry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.DeferEvent_e03Exit();}
        bool DeferEvent( EventId ) const ;
        State * GetSuperstate() const { return &mFsm.mDeferEventTests; }
        virtual void Injecte04( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class DeferEvent_none : public SimpleState
    {
    public:
        DeferEvent_none(FsmcUnitTestFsm & fsm) :
            SimpleState(fsm, "DeferEvent_none") {}
        virtual ~DeferEvent_none(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.DeferEvent_noneEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.DeferEvent_noneExit();}
        State * GetSuperstate() const { return &mFsm.mDeferEventTests; }
        virtual void Injecte01( void* eventData);
        virtual void Injecte02( void* eventData);
        virtual void Injecte03( void* eventData);
        virtual void Injecte04( void* eventData);
        virtual void InjectNextTest( void* eventData);
    };

    class Superstate : public State
    {
    public:
        Superstate(FsmcUnitTestFsm & fsm, const char * name) :
            State(fsm, name)
        { }
        virtual ~Superstate()
        { }
    };

    class SuperstateWithInitialState : public Superstate
    {
    public:
        SuperstateWithInitialState(FsmcUnitTestFsm & fsm, const char * name) :
            Superstate(fsm, name) {}
        virtual ~SuperstateWithInitialState() {}

        virtual bool RunToCompletion() = 0;
    };

    class SuperstateWithHistory : public SuperstateWithInitialState
    {
    public:
        SuperstateWithHistory(FsmcUnitTestFsm & fsm, const char * name) :
            SuperstateWithInitialState(fsm, name) {}
        virtual ~SuperstateWithHistory()
        {
            mHistory.clear();
        }

        virtual bool RunToCompletion()
        {
            RSYS_ASSERT(!mHistory.empty());

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s RunToCompletion...", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            StateHistory::iterator historicState = mHistory.begin();

            while(historicState != mHistory.end())
            {
                State    * subState = *historicState;

                RSYS_ASSERT(subState);

                subState->Entry();

                ++historicState;
            }

            return false;
        }

        virtual void Exit()
        {
            RSYS_ASSERT(!mHistory.empty());

            SuperstateWithInitialState::Exit();
        }

        StateHistory mHistory;
    };

    class SuperstateWithDeepHistory : public SuperstateWithHistory
    {
    public:
        SuperstateWithDeepHistory(FsmcUnitTestFsm & fsm, const char * name) :
            SuperstateWithHistory(fsm, name)
        { }
        virtual ~SuperstateWithDeepHistory()
        { }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);
            RSYS_ASSERT( mFsm.mCurrentStateTransitionExitsList.size() > 0);

            // Deep History
            mHistory.clear();

            std::string stateList;

            for(StateHistory::reverse_iterator historicState = mFsm.mCurrentStateTransitionExitsList.rbegin();
                historicState != mFsm.mCurrentStateTransitionExitsList.rend();
                historicState++)
            {
                State * subState = *historicState;
                RSYS_ASSERT(subState);

                stateList += subState->mName;
                stateList += ";";
                mHistory.push_front(subState);
            }

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: H^%zu=%s", mFsm.mName.c_str(), mFsm.mEventCounter, mHistory.size(), stateList.c_str()  ); }

            SuperstateWithHistory::Exit();
        }
    };

    class SuperstateWithShallowHistory : public SuperstateWithHistory
    {
    public:
        SuperstateWithShallowHistory(FsmcUnitTestFsm & fsm, const char * name) :
            SuperstateWithHistory(fsm, name)
        { }
        virtual ~SuperstateWithShallowHistory()
        { }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            StateHistory::iterator historicState = mFsm.mCurrentStateTransitionExitsList.begin();
            RSYS_ASSERT(historicState != mFsm.mCurrentStateTransitionExitsList.end());
            State * subState = *historicState;
            RSYS_ASSERT(subState);
            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: H=%s", mFsm.mName.c_str(), mFsm.mEventCounter,subState->mName.c_str() ); }

            // Shallow History
            mHistory.clear();
            mHistory.push_front( subState );

            SuperstateWithHistory::Exit();
        }
    };

    class TransitionTests : public SuperstateWithInitialState
    {
    public:
        TransitionTests(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "TransitionTests") {}
        virtual ~TransitionTests(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.TransitionTestsEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.TransitionTestsExit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mTt01_s01.Entry();
            }

            return false;
        }
    };

    class Tt01_ss03 : public SuperstateWithInitialState
    {
    public:
        Tt01_ss03(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "Tt01_ss03") {}
        virtual ~Tt01_ss03(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.Tt01_ss03Entry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.Tt01_ss03Exit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mTt01_s03.Entry();
            }

            return false;
        }
        State * GetSuperstate() const { return &mFsm.mTransitionTests; }
    };

    class GuardConditionTests : public SuperstateWithInitialState
    {
    public:
        GuardConditionTests(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "GuardConditionTests") {}
        virtual ~GuardConditionTests(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.GuardConditionTestsEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.GuardConditionTestsExit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mGct_s01.Entry();
            }

            return false;
        }
    };

    class Gct_ss01_s02 : public Superstate
    {
    public:
        Gct_ss01_s02(FsmcUnitTestFsm & fsm) :
            Superstate(fsm, "Gct_ss01_s02") {}
        virtual ~Gct_ss01_s02(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.Gct_ss01_s02Entry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.Gct_ss01_s02Exit();}

    private:
        State * GetSuperstate() const { return &mFsm.mGuardConditionTests; }
    };

    class ActionTests : public SuperstateWithInitialState
    {
    public:
        ActionTests(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "ActionTests") {}
        virtual ~ActionTests(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.ActionTestsEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.ActionTestsExit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mAct_s01.Entry();
            }

            return false;
        }
    };

    class DeepHistoryTests : public SuperstateWithInitialState
    {
    public:
        DeepHistoryTests(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "DeepHistoryTests") {}
        virtual ~DeepHistoryTests(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.DeepHistoryTestsEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.DeepHistoryTestsExit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mDht_ss01.Entry();
            }

            return false;
        }
    };

    class Dht_ss01 : public SuperstateWithDeepHistory
    {
    public:
        Dht_ss01(FsmcUnitTestFsm & fsm) :
            SuperstateWithDeepHistory(fsm, "Dht_ss01") {}
        virtual ~Dht_ss01(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.Dht_ss01Entry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.Dht_ss01Exit();}

    private:
        bool RunToCompletion( void )
        {
            if(mHistory.empty())
            {
            {
                mFsm.mDht_ss01_ss01.Entry();
            }
            }
            else
            {
                return SuperstateWithDeepHistory::RunToCompletion();
            }

            return false;
        }
        State * GetSuperstate() const { return &mFsm.mDeepHistoryTests; }
    };

    class Dht_ss01_ss01 : public SuperstateWithInitialState
    {
    public:
        Dht_ss01_ss01(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "Dht_ss01_ss01") {}
        virtual ~Dht_ss01_ss01(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.Dht_ss01_ss01Entry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.Dht_ss01_ss01Exit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mDht_s01.Entry();
            }

            return false;
        }
        State * GetSuperstate() const { return &mFsm.mDht_ss01; }
    };

    class ShallowHistoryTests : public SuperstateWithInitialState
    {
    public:
        ShallowHistoryTests(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "ShallowHistoryTests") {}
        virtual ~ShallowHistoryTests(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.ShallowHistoryTestsEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.ShallowHistoryTestsExit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mSht_ext.Entry();
            }

            return false;
        }
    };

    class Sht_ss01 : public SuperstateWithShallowHistory
    {
    public:
        Sht_ss01(FsmcUnitTestFsm & fsm) :
            SuperstateWithShallowHistory(fsm, "Sht_ss01") {}
        virtual ~Sht_ss01(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.Sht_ss01Entry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.Sht_ss01Exit();}

    private:
        bool RunToCompletion( void )
        {
            if(mHistory.empty())
            {
            {
                mFsm.mSht_s01.Entry();
            }
            }
            else
            {
                return SuperstateWithShallowHistory::RunToCompletion();
            }

            return false;
        }
        State * GetSuperstate() const { return &mFsm.mShallowHistoryTests; }
    };

    class DeferEventTests : public SuperstateWithInitialState
    {
    public:
        DeferEventTests(FsmcUnitTestFsm & fsm) :
            SuperstateWithInitialState(fsm, "DeferEventTests") {}
        virtual ~DeferEventTests(){}

    void InterfaceEntryMethod( void ) { mFsm.mInterface.DeferEventTestsEntry();}
    void InterfaceExitMethod( void ) { mFsm.mInterface.DeferEventTestsExit();}

    private:
        bool RunToCompletion( void )
        {
            {
                mFsm.mDeferEvent_e01.Entry();
            }

            return false;
        }
    };

    class QueuedFsmEvent
    {
    public:
        QueuedFsmEvent( EventId eventId, shared_ptr<FsmEvent> fsmEvent) :
            mId(eventId),
            mFsmEvent(fsmEvent){}
        ~QueuedFsmEvent(){}

        EventId mId;
        shared_ptr<FsmEvent> mFsmEvent;
    };

    FsmcUnitTestFsmInterface & mInterface;
    bool mFsmTraceEnabled;
    std::string mName;
    State * mState;
    TransitionTests mTransitionTests;
    Tt01_s01 mTt01_s01;
    Tt01_s02 mTt01_s02;
    Tt01_ss03 mTt01_ss03;
    Tt01_s03 mTt01_s03;
    GuardConditionTests mGuardConditionTests;
    Gct_s01 mGct_s01;
    Gct_ss01_s02 mGct_ss01_s02;
    Gct_s02 mGct_s02;
    ActionTests mActionTests;
    Act_s01 mAct_s01;
    Act_s02 mAct_s02;
    Act_s03 mAct_s03;
    DeepHistoryTests mDeepHistoryTests;
    Dht_ext mDht_ext;
    Dht_ss01 mDht_ss01;
    Dht_ss01_ss01 mDht_ss01_ss01;
    Dht_s01 mDht_s01;
    Dht_s02 mDht_s02;
    Dht_s03 mDht_s03;
    ShallowHistoryTests mShallowHistoryTests;
    Sht_ext mSht_ext;
    Sht_ss01 mSht_ss01;
    Sht_s01 mSht_s01;
    Sht_s02 mSht_s02;
    DeferEventTests mDeferEventTests;
    DeferEvent_e01 mDeferEvent_e01;
    DeferEvent_e02 mDeferEvent_e02;
    DeferEvent_e03 mDeferEvent_e03;
    DeferEvent_none mDeferEvent_none;
    std::list< shared_ptr<QueuedFsmEvent> > mfsmEventQueue;
    bool mFsmInjectInProgress;
    unsigned mEventCounter;
    StateHistory mCurrentStateTransitionExitsList;
    static const char * mEventName[NUMBER_OF_INJECTABLE_EVENTS];

};

} // -namespace-

#endif // __FsmcUnitTest_fsm_interface_h_

