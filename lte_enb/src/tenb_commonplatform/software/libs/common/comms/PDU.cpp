///////////////////////////////////////////////////////////////////////////////
//
// PDU.cpp
//
// See header file for documentation.
//
// Copyright Radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <typeinfo>
#include <sstream>

#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "PDU.h"


namespace threeway
{

///////////////////////////////////////////////////////////////////////////////
// Static variables
///////////////////////////////////////////////////////////////////////////////

u32 PDU::sm_pduCount = 0;

///////////////////////////////////////////////////////////////////////////////
// Class Functions
///////////////////////////////////////////////////////////////////////////////

PDU::PDU() :
    m_sourceId(PDU_SOURCE_ID_UNDEFINED),
    m_connectionId(PDU_CONNECTION_ID_UNDEFINED)
{
    ENTER();
    
    sm_pduCount++;
    
    EXIT();
}

PDU::~PDU()
{
    ENTER();

    sm_pduCount--;

    EXIT();
}

std::string PDU::ToString() const
{
    ENTER ();
    
    std::ostringstream stream;
    
    stream << "class=" << typeid(*this).name();
    
    if(m_sourceId != PDU_SOURCE_ID_UNDEFINED)
    {
        stream << ", sourceId=" << m_sourceId;
    }

    if(m_connectionId != PDU_CONNECTION_ID_UNDEFINED)
    {
        stream << ", connectionId=" << m_connectionId;
    }

    stream << ", total PDUs=" << sm_pduCount;

    RETURN (stream.str());
}

}
