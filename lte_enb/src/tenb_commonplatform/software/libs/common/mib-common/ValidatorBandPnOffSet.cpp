///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// ValidatorBandPnOffSet.cpp
//
// See header file for documentation.
//
// Copyright Radisys Limited
//
// //////////////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// System Incudes
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <sstream>
#include <system/Trace.h>
#include <set>
#include <vector>

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
// Local Includes
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

#include"ValidatorBandPnOffSet.h"


using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Class Functions
///////////////////////////////////////////////////////////////////////////////


ValidatorBandPnOffSet::ValidatorBandPnOffSet()
{
}
ValidatorBandPnOffSet::~ValidatorBandPnOffSet()
{
}

bool ValidatorBandPnOffSet::ValidateU32Array(const std::vector<u32>& value, u32 minValue, u32 maxValue, u32 maxInstances, ValidationFailureDescriptor& failureDescriptor)
{
   ostringstream description;
         
   std::set<u32> bandPnOffSet;

   if(value.size() > maxInstances)
   {   
      description << "numInstances="<< value.size() << ",maxInstances=" << maxInstances << endl;
      failureDescriptor.Set(ValidationFailureDescriptor::CAUSE_TOO_MANY, description.str());
      return false;
   }

   for(u32 i = 0; i < value.size(); i++)
   {
      bool isValid = ValidatorU32::ValidateU32(value.at(i), minValue, maxValue, failureDescriptor);

      if (!isValid)
      { 
         return false;
      }
      bandPnOffSet.insert(value.at(i));

   }  

   if(value.size() != bandPnOffSet.size())
   {
    description << "Band PnOffSet value can not contain duplicate entries";
    failureDescriptor.Set(ValidationFailureDescriptor::CAUSE_OTHER, description.str()); 
    return false;  
   }   
   return true;

}
