<?xml version="1.0" encoding="UTF-8"?>
<mib xmlns:mib="http://www.Radisys.com/umts-fap/mib" xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://www.w3.org/1999/xhtml">
 
<xsl:variable name="unique-validator" select="mib:mib/attributeDefs/attributeDef[not(@validator=preceding-sibling::attributeDef/@validator)]/@validator" />

 <noprocess><![CDATA[///////////////////////////////////////////////////////////////////////////////
//
// MibAttributes.h
//
// Descriptors of all possible MIB attributes.
// THIS FILE IS AUTOGENERATED
//
// Copyright Radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __MibAttributes_h_
#define __MibAttributes_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <Radisys.h>
#include <limits> // numeric_limits
#include <string> // input type for string validators

#include <mib-common/MibAttributeDescriptors.h>
#include <mib-common/ValidatorU32.h>
#include <mib-common/ValidatorU32Array.h>
#include <mib-common/ValidatorS32.h>
#include <mib-common/ValidatorS32Array.h>
#include <mib-common/ValidatorString.h>
#include <mib-common/ValidatorStringArray.h>
]]>
<xsl:for-each select="$unique-validator">#include &lt;mib-common/Validator<xsl:value-of select="."/>.h>
</xsl:for-each>
<![CDATA[
///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "MibAttributeId.h"

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

/**
 * Attribute meta-data is constant information so we define it in a constant
 * table here.  We can then still dynamically create/delete attributes but
 * their properties (range, defaults, access etc) are fixed for a particular
 * build.
 */

// TODO Do we need/want an attribute id -> data type map/table?  When setting/getting attributes we have to know which of
// the following tables to look in.  Could look in all but that would be inefficient.
// Actually, when setting it has to arrive as a particular type so only needed on getting.
// This table
]]></noprocess>
 <!-- Create the MibAttributeCommonDescriptors array --> 
 <twoDimensionArray name="mibAttributeCommonDescriptors" type="MibAttributeCommonDescriptor">
  <xsl:for-each select="mib:mib/attributeDefs/attributeDef">
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
    <entity>MIB_ATTRIBUTE_TYPE_<xsl:value-of select="@type"/></entity>
    <entity>"<xsl:value-of select="@name"/>"</entity>
    <!-- hasDefault -->
    <xsl:choose>
     <xsl:when test="@default"><entity>true</entity></xsl:when>
     <xsl:otherwise><entity>false</entity></xsl:otherwise>
    </xsl:choose>
    <!-- mandatory on create -->
    <xsl:choose>
      <xsl:when test="@moc"><entity><xsl:value-of select="@moc"/></entity></xsl:when>
      <xsl:otherwise><entity>false</entity></xsl:otherwise>
    </xsl:choose>
    <!-- schema -->
    <xsl:choose>
     <xsl:when test="@schema"><entity><xsl:value-of select="@schema"/></entity></xsl:when>
     <xsl:otherwise><entity><![CDATA[1]]></entity></xsl:otherwise>
    </xsl:choose>
   </array>
  </xsl:for-each>
  <xsl:for-each select="mib:mib/attributeDefs/attributeEnumDef">
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
    <entity>MIB_ATTRIBUTE_TYPE_<xsl:value-of select="@type"/></entity>
    <entity>"<xsl:value-of select="@name"/>"</entity>
    <!-- hasDefault -->
    <xsl:choose>
     <xsl:when test="@default"><entity>true</entity></xsl:when>
     <xsl:otherwise><entity>false</entity></xsl:otherwise>
    </xsl:choose>
    <!-- mandatory on create -->
    <xsl:choose>
      <xsl:when test="@moc"><entity><xsl:value-of select="@moc"/></entity></xsl:when>
      <xsl:otherwise><entity>false</entity></xsl:otherwise>
    </xsl:choose>
    <!-- schema -->
    <xsl:choose>
     <xsl:when test="@schema"><entity><xsl:value-of select="@schema"/></entity></xsl:when>
     <xsl:otherwise><entity><![CDATA[1]]></entity></xsl:otherwise>
    </xsl:choose>
   </array>
  </xsl:for-each>
 </twoDimensionArray>
 
 <!-- Create enumerations -->
 <xsl:for-each select="mib:mib/attributeDefs/attributeEnumDef">
  <enumeration>
   <xsl:attribute name="name">MibAttribute<xsl:value-of select="concat(translate(substring(@name,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ'),substring(@name,2))"/></xsl:attribute>
   <xsl:for-each select="enumValDef">
    <enumValue>MIB_ATTR_<xsl:value-of select="translate(../@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>_<xsl:value-of select="."/></enumValue>
   </xsl:for-each>
  </enumeration>
 </xsl:for-each>
 
 <!-- Create the validation prototypes. These will need to be defined elsewhere -->
 <noprocess>
// Validators
extern ValidatorU32 validatorU32;
extern ValidatorU32Array validatorU32ARRAY;
extern ValidatorU32 validatorENUM;
extern ValidatorU32Array validatorENUMARRAY;
extern ValidatorS32 validatorS32;
extern ValidatorS32Array validatorS32ARRAY;
extern ValidatorString validatorSTRING;
extern ValidatorStringArray validatorSTRINGARRAY;

<xsl:for-each select="$unique-validator">extern Validator<xsl:value-of select="."/> validator<xsl:value-of select="."/>;
</xsl:for-each>

// Descriptor arrays</noprocess>

 <!-- Create mibAttributesS32Descriptors array -->
 <twoDimensionArray name="mibAttributesS32Descriptors" type="MibAttributeS32Descriptor">
  <xsl:for-each select="mib:mib/attributeDefs/attributeDef[@type='S32']"> 
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
    <!-- min -->
    <xsl:choose>
     <xsl:when test="@min"><entity><xsl:value-of select="@min"/></entity></xsl:when>
     <xsl:otherwise><entity><![CDATA[std::numeric_limits<s32>::min()]]></entity></xsl:otherwise>
    </xsl:choose>
    <!-- max -->
    <xsl:choose>
     <xsl:when test="@max"><entity><xsl:value-of select="@max"/></entity></xsl:when>
     <xsl:otherwise><entity><![CDATA[std::numeric_limits<s32>::max()]]></entity></xsl:otherwise>
    </xsl:choose>
    <!-- default -->
    <xsl:choose>
     <xsl:when test="@default"><entity><xsl:value-of select="@default"/></entity></xsl:when>
     <xsl:otherwise><entity>0</entity></xsl:otherwise>
    </xsl:choose>
    <!-- validation -->
    <xsl:choose>
     <xsl:when test="@validator"><entity>&amp;validator<xsl:value-of select="@validator"/></entity></xsl:when>
     <xsl:otherwise><entity>&amp;validator<xsl:value-of select="@type"/></entity></xsl:otherwise>
    </xsl:choose>
   </array>
  </xsl:for-each>
 </twoDimensionArray>
 
 <!-- Create mibAttributesS32DescriptorsNum -->
 <scalar name="mibAttributesS32DescriptorsNum" type="u32">
  <xsl:value-of select="count(mib:mib/attributeDefs/attributeDef[@type='S32'])"/> 
 </scalar>

 <!-- Create mibAttributesU32Descriptors array -->
 <twoDimensionArray name="mibAttributesU32Descriptors" type="MibAttributeU32Descriptor">
  <!-- add the U32s -->
  <xsl:for-each select="mib:mib/attributeDefs/attributeDef[@type='U32']"> 
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
     <!-- min -->
      <xsl:choose>
       <xsl:when test="@min"><entity><xsl:value-of select="@min"/>U</entity></xsl:when>
       <xsl:otherwise><entity><![CDATA[std::numeric_limits<u32>::min()]]></entity></xsl:otherwise>
      </xsl:choose>
      <!-- max -->
      <xsl:choose>
       <xsl:when test="@max"><entity><xsl:value-of select="@max"/>U</entity></xsl:when>
       <xsl:otherwise><entity><![CDATA[std::numeric_limits<u32>::max()]]></entity></xsl:otherwise>
      </xsl:choose>
    <!-- default -->
    <xsl:choose>
     <xsl:when test="@default"><entity><xsl:value-of select="@default"/>U</entity></xsl:when>
     <xsl:otherwise><entity>0U</entity></xsl:otherwise>
    </xsl:choose>
    <!-- validation -->
    <xsl:choose>
     <xsl:when test="@validator"><entity>&amp;validator<xsl:value-of select="@validator"/></entity></xsl:when>
     <xsl:otherwise><entity>&amp;validator<xsl:value-of select="@type"/></entity></xsl:otherwise>
    </xsl:choose>
   </array>
  </xsl:for-each>
  <!-- add the ENUMs -->
  <xsl:for-each select="mib:mib/attributeDefs/attributeEnumDef[@type='ENUM']"> 
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
      <!-- min -->
      <entity>0</entity>
      <!-- max -->
      <entity><xsl:value-of select="count(enumValDef)"/></entity>
    <!-- default -->
    <xsl:choose>
     <xsl:when test="@default"><entity><xsl:value-of select="@default"/>U</entity></xsl:when>
     <xsl:otherwise><entity>0U</entity></xsl:otherwise>
    </xsl:choose>
    <!-- validation -->
    <xsl:choose>
     <xsl:when test="@validator"><entity>&amp;validator<xsl:value-of select="@validator"/></entity></xsl:when>
     <xsl:otherwise><entity>&amp;validator<xsl:value-of select="@type"/></entity></xsl:otherwise>
    </xsl:choose>
   </array>
  </xsl:for-each>
 </twoDimensionArray>
 
 <!-- Create mibAttributesU32DescriptorsNum -->
 <scalar name="mibAttributesU32DescriptorsNum" type="u32">
  <xsl:value-of select="count(mib:mib/attributeDefs/attributeDef[@type='U32'] | mib:mib/attributeDefs/attributeEnumDef[@type='ENUM'])"/> 
 </scalar>

 <!-- Create mibAttributesU32ArrayDescriptors array -->
 <twoDimensionArray name="mibAttributesU32ArrayDescriptors" type="MibAttributeU32ArrayDescriptor">
  <xsl:for-each select="mib:mib/attributeDefs/attributeDef[@type='U32ARRAY']"> 
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
    <!-- min -->
    <xsl:choose>
     <xsl:when test="@min"><entity><xsl:value-of select="@min"/></entity></xsl:when>
     <xsl:otherwise><entity>0</entity></xsl:otherwise>
    </xsl:choose>
    <!-- max -->
    <xsl:choose>
     <xsl:when test="@max"><entity><xsl:value-of select="@max"/></entity></xsl:when>
     <xsl:otherwise><entity><![CDATA[std::numeric_limits<u32>::max()]]></entity></xsl:otherwise>
    </xsl:choose>
    <!-- validation -->
    <xsl:choose>
     <xsl:when test="@validator"><entity>&amp;validator<xsl:value-of select="@validator"/></entity></xsl:when>
     <xsl:otherwise><entity>&amp;validator<xsl:value-of select="@type"/></entity></xsl:otherwise>
    </xsl:choose>
    <!-- default -->
    <xsl:choose>
     <xsl:when test="@default"><entity><xsl:value-of select="@default"/></entity></xsl:when>
     <xsl:otherwise><entity>0</entity></xsl:otherwise>
    </xsl:choose>
    <!-- max instances -->
    <xsl:choose>
     <xsl:when test="@maxInstances"><entity><xsl:value-of select="@maxInstances"/></entity></xsl:when>
     <xsl:otherwise><entity>65535</entity></xsl:otherwise><!-- Should we have this limit? -->
    </xsl:choose>
   </array>
  </xsl:for-each>
 </twoDimensionArray>

 <!-- Create mibAttributesU32ArrayDescriptorsNum -->
 <scalar name="mibAttributesU32ArrayDescriptorsNum" type="u32">
  <xsl:value-of select="count(mib:mib/attributeDefs/attributeDef[@type='U32ARRAY'] | mib:mib/attributeDefs/attributeEnumDef[@type='ENUMARRAY'])"/> 
 </scalar>

 <!-- Create mibAttributesS32ArrayDescriptors array -->
 <twoDimensionArray name="mibAttributesS32ArrayDescriptors" type="MibAttributeS32ArrayDescriptor">
  <xsl:for-each select="mib:mib/attributeDefs/attributeDef[@type='S32ARRAY']"> 
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
    <!-- min -->
    <xsl:choose>
     <xsl:when test="@min"><entity><xsl:value-of select="@min"/></entity></xsl:when>
     <xsl:otherwise><entity><![CDATA[std::numeric_limits<s32>::min()]]></entity></xsl:otherwise>
    </xsl:choose>
    <!-- max -->
    <xsl:choose>
     <xsl:when test="@max"><entity><xsl:value-of select="@max"/></entity></xsl:when>
     <xsl:otherwise><entity><![CDATA[std::numeric_limits<s32>::max()]]></entity></xsl:otherwise>
    </xsl:choose>
    <!-- validation -->
    <xsl:choose>
     <xsl:when test="@validator"><entity>&amp;validator<xsl:value-of select="@validator"/></entity></xsl:when>
     <xsl:otherwise><entity>&amp;validator<xsl:value-of select="@type"/></entity></xsl:otherwise>
    </xsl:choose>
    <!-- default -->
    <xsl:choose>
     <xsl:when test="@default"><entity><xsl:value-of select="@default"/></entity></xsl:when>
     <xsl:otherwise><entity>0</entity></xsl:otherwise>
    </xsl:choose>
    <!-- max instances -->
    <xsl:choose>
     <xsl:when test="@maxInstances"><entity><xsl:value-of select="@maxInstances"/></entity></xsl:when>
     <xsl:otherwise><entity>65535</entity></xsl:otherwise><!-- Should we have this limit? -->
    </xsl:choose>
   </array>
  </xsl:for-each>
 </twoDimensionArray>

 <!-- Create mibAttributesS32ArrayDescriptorsNum -->
 <scalar name="mibAttributesS32ArrayDescriptorsNum" type="u32">
  <xsl:value-of select="count(mib:mib/attributeDefs/attributeDef[@type='S32ARRAY'])"/> 
 </scalar>

 <!-- Create mibAttributesStringDescriptors array -->
 <twoDimensionArray name="mibAttributesStringDescriptors" type="MibAttributeStringDescriptor">
  <xsl:for-each select="mib:mib/attributeDefs/attributeDef[@type='STRING']"> 
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
    <!-- min -->
    <xsl:choose>
     <xsl:when test="@min"><entity><xsl:value-of select="@min"/></entity></xsl:when>
     <xsl:otherwise><entity>0</entity></xsl:otherwise>
    </xsl:choose>
    <!-- max -->
    <xsl:choose>
     <xsl:when test="@max"><entity><xsl:value-of select="@max"/></entity></xsl:when>
     <xsl:otherwise><entity>65535</entity></xsl:otherwise><!-- Should we have this limit? -->
    </xsl:choose>
    <!-- default -->
    <xsl:choose>
     <xsl:when test="@default"><entity>"<xsl:value-of select="@default"/>"</entity></xsl:when>
     <xsl:otherwise><entity>""</entity></xsl:otherwise>
    </xsl:choose>
    <!-- validation -->
    <xsl:choose>
     <xsl:when test="@validator"><entity>&amp;validator<xsl:value-of select="@validator"/></entity></xsl:when>
     <xsl:otherwise><entity>&amp;validator<xsl:value-of select="@type"/></entity></xsl:otherwise>
    </xsl:choose>
   </array>
  </xsl:for-each>
 </twoDimensionArray>

 <!-- Create mibAttributesStringDescriptorsNum -->
 <scalar name="mibAttributesStringDescriptorsNum" type="u32">
  <xsl:value-of select="count(mib:mib/attributeDefs/attributeDef[@type='STRING'])"/> 
 </scalar>

 <!-- Create mibAttributesStringArrayDescriptors array -->
 <twoDimensionArray name="mibAttributesStringArrayDescriptors" type="MibAttributeStringArrayDescriptor">
  <xsl:for-each select="mib:mib/attributeDefs/attributeDef[@type='STRINGARRAY']"> 
   <array>
    <entity>PARAM_ID_<xsl:value-of select="translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></entity>
    <!-- min -->
    <xsl:choose>
     <xsl:when test="@min"><entity><xsl:value-of select="@min"/></entity></xsl:when>
     <xsl:otherwise><entity>0</entity></xsl:otherwise>
    </xsl:choose>
    <!-- max -->
    <xsl:choose>
     <xsl:when test="@max"><entity><xsl:value-of select="@max"/></entity></xsl:when>
     <xsl:otherwise><entity>65535</entity></xsl:otherwise><!-- Should we have this limit? -->
    </xsl:choose>
    <!-- minValue -->
    <xsl:choose>
     <xsl:when test="@minValue"><entity><xsl:value-of select="@minValue"/></entity></xsl:when>
     <xsl:otherwise><entity>2147483647</entity></xsl:otherwise><!-- value is chosen to differentiate regular string arrays from string arrays containing integer values. -->
    </xsl:choose>
    <!-- maxValue -->
    <xsl:choose>
     <xsl:when test="@maxValue"><entity><xsl:value-of select="@maxValue"/></entity></xsl:when>
     <xsl:otherwise><entity>2147483647</entity></xsl:otherwise><!-- value is chosen to differentiate regular string arrays from string arrays containing integer values.  -->
    </xsl:choose>
    <!-- validation -->
    <xsl:choose>
     <xsl:when test="@validator"><entity>&amp;validator<xsl:value-of select="@validator"/></entity></xsl:when>
     <xsl:otherwise><entity>&amp;validatorSTRINGARRAY</entity></xsl:otherwise>
    </xsl:choose>
    <!-- default -->
    <xsl:choose>
     <xsl:when test="@default"><entity>"<xsl:value-of select="@default"/>"</entity></xsl:when>
     <xsl:otherwise><entity>""</entity></xsl:otherwise>
    </xsl:choose>  
    <!-- max instances -->
    <xsl:choose>
     <xsl:when test="@maxInstances"><entity><xsl:value-of select="@maxInstances"/></entity></xsl:when>
     <xsl:otherwise><entity>65535</entity></xsl:otherwise><!-- Should we have this limit? -->
    </xsl:choose>
   </array>
  </xsl:for-each>
 </twoDimensionArray>

 <!-- Create mibAttributesStringArrayDescriptorsNum -->
 <scalar name="mibAttributesStringArrayDescriptorsNum" type="u32">
  <xsl:value-of select="count(mib:mib/attributeDefs/attributeDef[@type='STRINGARRAY'])"/> 
 </scalar>

 <noprocess><![CDATA[#endif]]></noprocess>
</mib>
