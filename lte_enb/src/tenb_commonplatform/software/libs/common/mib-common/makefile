###############################################################################
#
# Makefile Options:
#
#  make [clean] BUILD=<build>
#
# Copyright radisys Limited
#
###############################################################################

TOP = $(shell pwd)/../../..

PRODUCTAWARE := yes

# Choose the MIB xml file to use based on the value of PRODUCT
ifeq ($(PRODUCT),test)
  MIBFILESECTIONS  := $(TOP)/libs/platform/unittest/radisys-unittest-mib.xml
  MIBNVINFOXML     := $(TOP)/libs/platform/unittest/radisys-unittest-mib-nvcheck.xml
  MIBNVINFOXMLTEMP := $(TOP)/libs/platform/unittest/radisys-unittest-mib-nvcheck-temp.xml
endif
ifeq ($(PRODUCT),pc-iu)
  MIBFILESECTIONS  := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib.xml
  MIBNVINFOXML     := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck.xml
  MIBNVINFOXMLTEMP := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck-temp.xml
endif
ifeq ($(PRODUCT),hbs2-iu)
  MIBFILESECTIONS  := $(TOP)/libs/platform/home-fap/radisys-fap-mib.xml \
                      $(TOP)/libs/platform/home-fap/radisys-fap-lte-mib.xml
  MIBNVINFOXML     := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck.xml
  MIBNVINFOXMLTEMP := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck-temp.xml
endif
ifeq ($(PRODUCT),hbs2-factory)
  MIBFILESECTIONS  := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib.xml
  MIBNVINFOXML     := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck.xml
  MIBNVINFOXMLTEMP := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck-temp.xml
endif
ifeq ($(PRODUCT),generic)
  MIBFILESECTIONS  := $(TOP)/libs/platform/home-fap/radisys-fap-mib.xml \
                      $(TOP)/libs/platform/home-fap/radisys-fap-lte-mib.xml
  MIBNVINFOXML     := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck.xml
  MIBNVINFOXMLTEMP := $(TOP)/libs/platform/home-fap/radisys-home-fap-mib-nvcheck-temp.xml
endif

ifeq ($(PLTFRM),PAL)
CPPFLAGS = -g3 -Werror -m32
else
CPPFLAGS = -g3 -Werror
endif
AUTOGEN_TOOL := autogen/obj/radisys-mib-autogen
REDHAT := $(wildcard /etc/redhat-release)
ifeq ($(strip $(REDHAT)),)
AUTOGEN_TOOL_VALIDATE := $(AUTOGEN_TOOL) --validate
else
AUTOGEN_TOOL_VALIDATE := echo
endif
MIBSCHEMA := autogen/mib.xsd
MIBUNUSEDSCHEMA := autogen/mib-unused.xsd
MIBSIMPLESCHEMA := autogen/mib-simple.xsd
MIBNVINFOXSL := autogen/MibNvInfo.xsl

TARGET_NAME = Radisys-mib-common

AUTOGENERATED_DIR := obj/$(PRODUCT)/generic/generic

MIBFILE := $(AUTOGENERATED_DIR)/fap-mib.xml

AUTOGEN_MODULES_H := \
  MibAttributeId \
  MibAttributes  \
  MibManagedObjects \
  MibObjectClass

AUTOGEN_MODULES_CPP := \
  MibValidators

AUTOGEN_STYLESHEETS_H := $(AUTOGEN_MODULES_H:%=autogen/%.xsl)
AUTOGEN_STYLESHEETS_CPP := $(AUTOGEN_MODULES_CPP:%=autogen/%.xsl)

AUTOGENERATED_CODE_H := $(AUTOGEN_MODULES_H:%=$(AUTOGENERATED_DIR)/%.h)
AUTOGENERATED_CODE_CPP := $(AUTOGEN_MODULES_CPP:%=$(AUTOGENERATED_DIR)/%.cpp)

AUTOGEN_APPS := autogen/MibXMLMerger.cpp \
                autogen/MibXMLMerger.h   \
                autogen/MibXMLParser.cpp \
                autogen/MibXMLParser.h   \
                autogen/MibAutoGen.cpp   \
                autogen/makefile

AUTOGEN_DOC := $(AUTOGENERATED_DIR)/fap-mib-$(PRODUCT).html

INCLUDE_PATHS := \
  $(TOP)/libs/common/include \
  $(TOP)/libs/common \
  $(AUTOGENERATED_DIR)

# Provide our own default target for building so we can build autogen stuff first.
newnewbuild:
	$(Q)$(MAKE) PRODUCT=$(PRODUCT) BUILD=$(BUILD) HARDWARE=$(HARDWARE) autogen
	$(Q)$(MAKE) STATICALLY_LINKED=$(STATICALLY_LINKED) PRODUCT=$(PRODUCT) BUILD=$(BUILD) HARDWARE=$(HARDWARE) newbuild

# Provide additional things to clean.
EXTRA_FILES_TO_CLEAN := $(AUTOGENERATED_DIR)/* autogen/obj/*

# Autogen targets
autogen: $(AUTOGENERATED_CODE_H) $(AUTOGENERATED_CODE_CPP) $(AUTOGEN_DOC)

$(AUTOGEN_TOOL): $(AUTOGEN_APPS)
	$(Q)$(MAKE) -C autogen

$(AUTOGEN_DOC): $(MIBFILE) autogen/MibToHTML.xsl
	$(Q)xsltproc --stringparam product $(PRODUCT) --output $(AUTOGEN_DOC) autogen/MibToHTML.xsl $(MIBFILE)


# Use these commands to enable the MO tree image in the FAP MIB HTML page
#	$(Q)xsltproc --output moTree.gxl autogen/MibToGxl.xsl $(MIBFILE)
#	$(Q)gxl2dot -o moTree.dot moTree.gxl
#	$(Q)dot -o moTree.gif -Tgif moTree.dot
#	$(Q)dot -o autogen/moTreeMap.xml -Tcmapx moTree.dot -NURL=#\\N

$(MIBNVINFOXMLTEMP) : $(AUTOGEN_TOOL) $(MIBFILE) $(MIBSCHEMA) $(AUTOGEN_STYLESHEETS_H) $(MIBNVINFOXSL)
	$(Q)xsltproc $(MIBNVINFOXSL) $(MIBFILE) > $(MIBNVINFOXMLTEMP)
    
# $@F means target filename without dir
$(AUTOGENERATED_CODE_H): $(AUTOGEN_TOOL) $(MIBFILE) $(MIBSCHEMA) $(AUTOGEN_STYLESHEETS_H) $(MIBNVINFOXSL) $(MIBNVINFOXMLTEMP)
	$(Q)diff -u $(MIBNVINFOXML) $(MIBNVINFOXMLTEMP) || ( echo Some non-volatile information in $(MIBFILE) has recently changed. Do you need to write an upgrader? For guidance please see consult the upgrade section on this page...http://ukdev1/wiki/index.php/FAP_MIB regarding this issue; exit 1)
	$(Q)$(AUTOGEN_TOOL) --generate $(MIBFILE) $(MIBSCHEMA) autogen/$(@F:%.h=%.xsl)
	$(Q)mv autogen/$(@F) $(AUTOGENERATED_DIR)

$(AUTOGENERATED_CODE_CPP): $(AUTOGEN_TOOL) $(MIBFILE) $(MIBSCHEMA) $(AUTOGEN_STYLESHEETS_CPP) $(MIBNVINFOXSL)
	$(Q)$(AUTOGEN_TOOL) --generate $(MIBFILE) $(MIBSCHEMA) autogen/$(@F:%.cpp=%.xsl)
	$(Q)mv autogen/$(@F:%.cpp=%.h) $(AUTOGENERATED_DIR)/$(@F)

$(MIBFILE): $(AUTOGEN_TOOL) $(MIBFILESECTIONS) $(MIBSCHEMA) $(MIBUNUSEDSCHEMA) $(MIBSIMPLESCHEMA)
	-$(Q)@for mibsection in $(MIBFILESECTIONS); do \
      $(AUTOGEN_TOOL_VALIDATE) $$mibsection $(MIBSIMPLESCHEMA); \
	done
	$(Q)mkdir -p $(AUTOGENERATED_DIR)
	$(Q)$(AUTOGEN_TOOL) --merge $(MIBFILE) $(MIBFILESECTIONS)
	$(Q)$(AUTOGEN_TOOL_VALIDATE) $(MIBFILE) $(MIBUNUSEDSCHEMA) 2>&1 | grep "No match"; true
	-$(Q)$(AUTOGEN_TOOL_VALIDATE) $(MIBFILE) $(MIBSCHEMA)

vpath %.cpp $(AUTOGENERATED_DIR)
CPP_SRCS = MibValidators.cpp

SRC_DIRS = messages

ifeq ($(STATICALLY_LINKED),yes)
  include $(TOP)/makefrags/staticlibrary.mk
else
  include $(TOP)/makefrags/sharedlibrary.mk
endif
