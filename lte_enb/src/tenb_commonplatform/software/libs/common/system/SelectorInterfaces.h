///////////////////////////////////////////////////////////////////////////////
//
// SelectorInterfaces.h
//
// TODO: Describe purpose and usage of class(es).
//
// Copyright Radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __SelectorInterfaces_h_
#define __SelectorInterfaces_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <Radisys.h>
#include <string>
#include <system/Trace.h>

// TODO: Delete unused sections below.

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////

using namespace std;

class SelectorCallBackInterface
{
public:

    /**
     * Implemented by your chosen class,
     * to be registered by-reference to a Selector
     * and thus called upon timeout or when FD set.
     */
    virtual void SelectCallBack() = 0;

    virtual ~SelectorCallBackInterface() {}

protected:

private:

};


class SelectorRegisterInterface
{
public:
    /**
     * Implemented by Selector (or other), and used to register
     * a callback against either a timeout or an FD.
     */
    virtual void RegisterFD(int fd, SelectorCallBackInterface& cb) = 0;
    virtual void DeregisterFD(int fd) = 0;

    virtual void RegisterTimeout(u32 millisecond, SelectorCallBackInterface& cb) = 0;

    virtual ~SelectorRegisterInterface() {};

protected:

private:

};


#endif
