///////////////////////////////////////////////////////////////////////////////
//
// TimerExpiry.h
//
// TimerExpiry is an event that can be queued in a ThreadWithQueue to indicate
// that a TimerEngine managed timer has expired.
//
// Copyright (c) Radisys Ltd
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __TimerExpiry_h_
#define __TimerExpiry_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <3waytypes.h>
#include <string>
#include <system/TimerInterface.h>
#include <system/Queueable.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus

namespace threeway
{

///////////////////////////////////////////////////////////////////////////////
// Classes
///////////////////////////////////////////////////////////////////////////////

class TimerExpiry : public Queueable
{
public:
    TimerExpiry(const TimerHandle timer);

    virtual ~TimerExpiry() {};

    TimerHandle GetTimerHandle() const { return m_timerHandle; }

    virtual std::string ToString() const;

private:
    TimerHandle m_timerHandle;
};


} // namespace threeway

#endif // __cplusplus


#endif
