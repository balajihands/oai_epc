///////////////////////////////////////////////////////////////////////////////
//
// $Id: CarbTemperatureReq.h 15261 2009-06-26 14:28:35Z dallwright $
//
// CarbTemperatureReq message.
//
// Copyright (C) 3Way Networks Ltd
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __CarbTemperatureReq_h_
#define __CarbTemperatureReq_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus
#include <string>
#include <system/Serialisable.h>
#endif
#include <system/SerialisationIds.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Message Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Message Structures
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Classes
///////////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus

namespace threeway
{

/** Message to request a temperature reading from the board.
 * \ingroup Carb
 */
class CarbTemperatureReq : public threeway::Serialisable
{
public:
    /*
     * Construction / destruction.
     */

    CarbTemperatureReq() {  };
    virtual ~CarbTemperatureReq() {};

    /*
     * Implement Serialisable pure virtuals.
     */
    virtual u32  GetSerialisationId() const { return SERIALISATION_ID_CARB_TEMPERATURE_REQ; };
    virtual s32  Serialise(u8* data, u32 dataMaxBytes) const;
    virtual bool DeSerialise(const u8* data, u32 dataLen);

    /*
     * Accessors.
     */

    /**
     * Convert to string for debug.
     */
    virtual std::string ToString() const;

};

}

#endif // __cplusplus

#endif // __CarbTemperatureReq_h_
