///////////////////////////////////////////////////////////////////////////////
//
// FNTPGetFrequencyOffsetReq.h
//
// Implementation of the FNTPGetFrequencyOffsetReq message.
//
// Copyright ï¿½ 3Way Networks Ltd
//
///////////////////////////////////////////////////////////////////////////////
#ifndef FNTPGETFREQUENCYOFFSETREQ_H_
#define FNTPGETFREQUENCYOFFSETREQ_H_
///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <3waytypes.h>
#include <string>
#include <system/Serialisable.h>
#include <system/SerialisationIds.h>

//////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Message Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Message Structures
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Classes
///////////////////////////////////////////////////////////////////////////////
namespace threeway
{


class FNTPGetFrequencyOffsetReq : public threeway::Serialisable
{
    static const u32 MESSAGE_DATA_LEN = 4;
public :
    FNTPGetFrequencyOffsetReq():m_requiredAccuracyppb(0) {};
    FNTPGetFrequencyOffsetReq(u32 requiredAccuracyppb);
    ~FNTPGetFrequencyOffsetReq();
    u32 GetRequiredAccuracy(void) {return(m_requiredAccuracyppb);}
    virtual u32  GetSerialisationId() const {return(SERIALISATION_ID_FNTP_GET_FREQUENCY_OFFSET_REQ);};
    virtual s32  Serialise(u8* data, u32 dataMaxBytes) const;
    virtual bool DeSerialise(const u8* data, u32 dataLen);
    /**
     * Convert to string for debug.
     */
    virtual std::string ToString() const;
private:
    u32 m_requiredAccuracyppb;
};

}
#endif /*FNTPGETFREQUENCYOFFSETREQ_H_*/
