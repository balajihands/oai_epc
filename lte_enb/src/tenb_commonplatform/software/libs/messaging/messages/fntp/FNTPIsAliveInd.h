#ifndef FNTPISALIVEINDIND_H_
#define FNTPISALIVEINDIND_H_
///////////////////////////////////////////////////////////////////////////////
//
// FNTPIsAliveInd.h
//
// Implementation of the FNTPIsAliveInd message.
//
// Copyright ï¿½ 3Way Networks Ltd
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <3waytypes.h>
#include <string>
#include <system/Serialisable.h>
#include <system/SerialisationIds.h>

//////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Message Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Message Structures
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Classes
///////////////////////////////////////////////////////////////////////////////
namespace threeway
{


class FNTPIsAliveInd : public threeway::Serialisable
{
    static const u32 MESSAGE_DATA_LEN = 8;
public :
    FNTPIsAliveInd(): m_isAlive(false),m_simulatorActive(false){};
    FNTPIsAliveInd(bool isAlive,bool simulatorActive): m_isAlive(isAlive),m_simulatorActive(simulatorActive){};
    ~FNTPIsAliveInd() {};
    s32 GetIsAlive(void) {return(m_isAlive);}
    bool GetSimulatorActive(void) {return(m_simulatorActive);}
    virtual u32  GetSerialisationId() const {return(SERIALISATION_ID_FNTP_IS_ALIVE_IND);}
    virtual s32  Serialise(u8* data, u32 dataMaxBytes) const;
    virtual bool DeSerialise(const u8* data, u32 dataLen);
    /**
     * Convert to string for debug.
     */
    virtual std::string ToString() const;
private:
    bool m_isAlive;
    bool m_simulatorActive;
};

}
#endif /*FNTPISALIVEINDIND_H_*/
