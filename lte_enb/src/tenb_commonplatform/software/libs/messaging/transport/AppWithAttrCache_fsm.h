///////////////////////////////////////////////////////////////////////////////
//
// AppWithAttrCache_fsm.h
//
// Autogenerated from AppWithAttrCache.fsm
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __AppWithAttrCache_fsm_h_
#define __AppWithAttrCache_fsm_h_
///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <deque>
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "AppWithAttrCache_fsm_interface.h"


/*** WARNING: Code AUTO-GENERATED from AppWithAttrCache.fsm. Do not edit! ***/
class AppWithAttrCacheFsm
{
public:

    AppWithAttrCacheFsm(
        AppWithAttrCacheFsmInterface & interfaceClass,
        bool traceEnabled = false,
        const char * name = "AppWithAttrCacheFsm"
        );
    virtual ~AppWithAttrCacheFsm();

    void InjectStart(void* event);
    void InjectRegisterEntityCnf(boost::shared_ptr<RegisterEntityCnf> event);
    void InjectMibSubscribeAttributesCnf(boost::shared_ptr<MibSubscribeAttributesCnf> event);
    void InjectRequestStartRsp(void* event);
    void InjectTimerExpiryRegistration(void* event);
    void InjectTimerExpirySubscriptions(void* event);
    void InjectTimerExpiryReady(void* event);
    std::string ToString() const
    {
        std::string returnedString(mName);

        if(mState)
        {
            returnedString += ".";
            returnedString += mState->mName;
        }

        return returnedString;
    }

    void Rename( const std::string & newName)
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.-: Renamed to %s", mName.c_str(), newName.c_str() );
        }
        mName = newName;
    }

    void SetFsmTraceEnable( bool traceEnable = true ) { mFsmTraceEnabled = traceEnable; }

    void TracePoint( const char * s )
    {
        if(mFsmTraceEnabled)
        {
        	TRACE_PRINTF("%s.%u: %s", mName.c_str(), mEventCounter, s );
        }
    }

private:
    typedef enum EventId_tag
    {
        FSM_EVENT_Start,
        FSM_EVENT_RegisterEntityCnf,
        FSM_EVENT_MibSubscribeAttributesCnf,
        FSM_EVENT_RequestStartRsp,
        FSM_EVENT_TimerExpiryRegistration,
        FSM_EVENT_TimerExpirySubscriptions,
        FSM_EVENT_TimerExpiryReady,
        NUMBER_OF_INJECTABLE_EVENTS
    } EventId;

    typedef enum EventType_tag
    {
        FSM_EVENT_TYPE_void_STAR_,
        FSM_EVENT_TYPE_boost_COLON__COLON_shared_ptr_LT_RegisterEntityCnf_GT_,
        FSM_EVENT_TYPE_boost_COLON__COLON_shared_ptr_LT_MibSubscribeAttributesCnf_GT_,
        FSM_EVENT_TYPE_boost_COLON__COLON_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_,
        NUMBER_OF_EVENT_TYPES
    } EventType;

    class FsmEvent
    {
    public:
        FsmEvent( EventType eventType ) :
            mEventType(eventType) {}
        virtual ~FsmEvent(){}

        EventType mEventType;
    };

    class FsmEvent_void_STAR_ : public FsmEvent
    {
    public:
        FsmEvent_void_STAR_( void* event ) :
            FsmEvent(FSM_EVENT_TYPE_void_STAR_),
            mEvent(event) {}
        ~FsmEvent_void_STAR_() {}
    	void* mEvent;
    };

    class FsmEvent_boost_COLON__COLON_shared_ptr_LT_RegisterEntityCnf_GT_ : public FsmEvent
    {
    public:
        FsmEvent_boost_COLON__COLON_shared_ptr_LT_RegisterEntityCnf_GT_( boost::shared_ptr<RegisterEntityCnf> event ) :
            FsmEvent(FSM_EVENT_TYPE_boost_COLON__COLON_shared_ptr_LT_RegisterEntityCnf_GT_),
            mEvent(event) {}
        ~FsmEvent_boost_COLON__COLON_shared_ptr_LT_RegisterEntityCnf_GT_() {}
    	boost::shared_ptr<RegisterEntityCnf> mEvent;
    };

    class FsmEvent_boost_COLON__COLON_shared_ptr_LT_MibSubscribeAttributesCnf_GT_ : public FsmEvent
    {
    public:
        FsmEvent_boost_COLON__COLON_shared_ptr_LT_MibSubscribeAttributesCnf_GT_( boost::shared_ptr<MibSubscribeAttributesCnf> event ) :
            FsmEvent(FSM_EVENT_TYPE_boost_COLON__COLON_shared_ptr_LT_MibSubscribeAttributesCnf_GT_),
            mEvent(event) {}
        ~FsmEvent_boost_COLON__COLON_shared_ptr_LT_MibSubscribeAttributesCnf_GT_() {}
    	boost::shared_ptr<MibSubscribeAttributesCnf> mEvent;
    };

    class FsmEvent_boost_COLON__COLON_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_ : public FsmEvent
    {
    public:
        FsmEvent_boost_COLON__COLON_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_( boost::shared_ptr<threeway::MessageSerialisedData> event ) :
            FsmEvent(FSM_EVENT_TYPE_boost_COLON__COLON_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_),
            mEvent(event) {}
        ~FsmEvent_boost_COLON__COLON_shared_ptr_LT_threeway_COLON__COLON_MessageSerialisedData_GT_() {}
    	boost::shared_ptr<threeway::MessageSerialisedData> mEvent;
    };

    void Enqueue( EventId eventId, shared_ptr<FsmEvent> fsmEvent );

    class State;
    typedef std::deque< State * > StateHistory;

    class State
    {
    public:
        State(AppWithAttrCacheFsm & fsm, const char * name ) :
            mFsm(fsm),
            mName(name){}
        virtual ~State(){}

        virtual void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData ) { RSYS_ASSERT_PRINTF(false,"Cannot inject in state %s.", mName.c_str()); }
        virtual bool RunToCompletion() { RSYS_ASSERT_PRINTF(false,"RunToCompletion failure in state %s.", mName.c_str()); return false; };
        virtual bool DeferEvent( EventId ) const { RSYS_ASSERT_PRINTF(false,"Cannot defer in state %s.", mName.c_str()); return false; }

        virtual void Entry()
        {
            RSYS_ASSERT( mFsm.mState == GetSuperstate() );

            UpdateHistoryUponEntry();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (entry) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceEntryMethod();

            mFsm.mState = this;
        }

        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            UpdateHistoryUponExit();

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }

        AppWithAttrCacheFsm& mFsm;
        std::string mName;
        virtual State * GetSuperstate() const { return NULL; }
        virtual void  InterfaceEntryMethod() {}
        virtual void  InterfaceExitMethod() {}
        virtual void  UpdateHistoryUponExit() { mFsm.mCurrentStateTransitionExitsList.push_front( mFsm.mState ); }
        virtual void  UpdateHistoryUponEntry() { mFsm.mCurrentStateTransitionExitsList.clear(); }
    };

    class SimpleState : public State
    {
    public:
        SimpleState(AppWithAttrCacheFsm & fsm, const char * name) :
            State(fsm, name){}
        virtual ~SimpleState(){}

        void Inject( EventId eventId, shared_ptr<FsmEvent> fsmData );
        virtual bool RunToCompletion() { return true; }

        virtual bool DeferEvent( EventId ) const { return false; }
        virtual void InjectStart( void* eventData) { EventConsumed(FSM_EVENT_Start); }
        virtual void InjectRegisterEntityCnf( boost::shared_ptr<RegisterEntityCnf> eventData) { EventConsumed(FSM_EVENT_RegisterEntityCnf); }
        virtual void InjectMibSubscribeAttributesCnf( boost::shared_ptr<MibSubscribeAttributesCnf> eventData) { EventConsumed(FSM_EVENT_MibSubscribeAttributesCnf); }
        virtual void InjectRequestStartRsp( void* eventData) { EventConsumed(FSM_EVENT_RequestStartRsp); }
        virtual void InjectTimerExpiryRegistration( void* eventData) { EventConsumed(FSM_EVENT_TimerExpiryRegistration); }
        virtual void InjectTimerExpirySubscriptions( void* eventData) { EventConsumed(FSM_EVENT_TimerExpirySubscriptions); }
        virtual void InjectTimerExpiryReady( void* eventData) { EventConsumed(FSM_EVENT_TimerExpiryReady); }

    private:
        void EventConsumed( EventId queuedEventId )
        {
            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s consumed %s", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str(), mEventName[queuedEventId] ); }
        }
    };

    class Idle : public SimpleState
    {
    public:
        Idle(AppWithAttrCacheFsm & fsm) :
            SimpleState(fsm, "Idle") {}
        virtual ~Idle(){}

        State * GetSuperstate() const { return &mFsm.mNotRegistered; }
        virtual void InjectStart( void* eventData);
    };

    class Registering : public SimpleState
    {
    public:
        Registering(AppWithAttrCacheFsm & fsm) :
            SimpleState(fsm, "Registering") {}
        virtual ~Registering(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.RegisteringEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.RegisteringExit();}
        State * GetSuperstate() const { return &mFsm.mNotRegistered; }
        virtual void InjectRegisterEntityCnf( boost::shared_ptr<RegisterEntityCnf> eventData);
        virtual void InjectTimerExpiryRegistration( void* eventData);
    };

    class Subscribing : public SimpleState
    {
    public:
        Subscribing(AppWithAttrCacheFsm & fsm) :
            SimpleState(fsm, "Subscribing") {}
        virtual ~Subscribing(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.SubscribingEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.SubscribingExit();}
        State * GetSuperstate() const { return &mFsm.mNotSubscribed; }
        virtual void InjectMibSubscribeAttributesCnf( boost::shared_ptr<MibSubscribeAttributesCnf> eventData);
        virtual void InjectTimerExpirySubscriptions( void* eventData);
    };

    class InformingReady : public SimpleState
    {
    public:
        InformingReady(AppWithAttrCacheFsm & fsm) :
            SimpleState(fsm, "InformingReady") {}
        virtual ~InformingReady(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.InformingReadyEntry();}
        void InterfaceExitMethod( void ) {  mFsm.mInterface.InformingReadyExit();}
        State * GetSuperstate() const { return &mFsm.mSubscribed; }
        virtual void InjectRequestStartRsp( void* eventData);
        virtual void InjectTimerExpiryReady( void* eventData);
    };

    class Started : public SimpleState
    {
    public:
        Started(AppWithAttrCacheFsm & fsm) :
            SimpleState(fsm, "Started") {}
        virtual ~Started(){}

        void InterfaceEntryMethod( void ) { mFsm.mInterface.StartedEntry();}
        State * GetSuperstate() const { return &mFsm.mSubscribed; }
    };

    class Superstate : public State
    {
    public:
        Superstate(AppWithAttrCacheFsm & fsm, const char * name) :
            State(fsm, name)
        { }
        virtual ~Superstate()
        { }
    };

    class SuperstateWithInitialState : public Superstate
    {
    public:
        SuperstateWithInitialState(AppWithAttrCacheFsm & fsm, const char * name) :
            Superstate(fsm, name) {}
        virtual ~SuperstateWithInitialState() {}

        virtual bool RunToCompletion() = 0;
    };

    class All : public Superstate
    {
    public:
        All(AppWithAttrCacheFsm & fsm) :
            Superstate(fsm, "All") {}
        virtual ~All(){}


    private:
    };

    class NotRegistered : public Superstate
    {
    public:
        NotRegistered(AppWithAttrCacheFsm & fsm) :
            Superstate(fsm, "NotRegistered") {}
        virtual ~NotRegistered(){}


    private:
        State * GetSuperstate() const { return &mFsm.mAll; }
    };

    class Registered : public Superstate
    {
    public:
        Registered(AppWithAttrCacheFsm & fsm) :
            Superstate(fsm, "Registered") {}
        virtual ~Registered(){}


    private:
        State * GetSuperstate() const { return &mFsm.mAll; }
    };

    class NotSubscribed : public Superstate
    {
    public:
        NotSubscribed(AppWithAttrCacheFsm & fsm) :
            Superstate(fsm, "NotSubscribed") {}
        virtual ~NotSubscribed(){}


    private:
        State * GetSuperstate() const { return &mFsm.mRegistered; }
    };

    class Subscribed : public Superstate
    {
    public:
        Subscribed(AppWithAttrCacheFsm & fsm) :
            Superstate(fsm, "Subscribed") {}
        virtual ~Subscribed(){}


    private:
        State * GetSuperstate() const { return &mFsm.mRegistered; }
    };

    class Junction : public State
    {
    public:
        Junction(AppWithAttrCacheFsm & fsm, const char * name) :
            State(fsm, name) {}
        virtual ~Junction(){}
        virtual void Entry() = 0;
        virtual void Exit()
        {
            RSYS_ASSERT( mFsm.mState == this);

            if(mFsm.mFsmTraceEnabled) { TRACE_PRINTF("%s.%u: %s (exit) ", mFsm.mName.c_str(), mFsm.mEventCounter, mName.c_str() ); }

            InterfaceExitMethod();

            mFsm.mState =  GetSuperstate();
        }
        virtual void  UpdateHistoryUponExit() {}
        virtual void  UpdateHistoryUponEntry() {}
    };

    class CheckSubscriptions : public Junction
    {
    public:
        CheckSubscriptions(AppWithAttrCacheFsm & fsm) :
            Junction(fsm, "CheckSubscriptions") {}
        virtual ~CheckSubscriptions(){}

        void Entry(); 

    private:
        State * GetSuperstate() const { return &mFsm.mNotSubscribed; }
    };

    class QueuedFsmEvent
    {
    public:
        QueuedFsmEvent( EventId eventId, shared_ptr<FsmEvent> fsmEvent) :
            mId(eventId),
            mFsmEvent(fsmEvent){}
        ~QueuedFsmEvent(){}

        EventId mId;
        shared_ptr<FsmEvent> mFsmEvent;
    };

    AppWithAttrCacheFsmInterface & mInterface;
    bool mFsmTraceEnabled;
    std::string mName;
    State * mState;
    All mAll;
    NotRegistered mNotRegistered;
    Registered mRegistered;
    NotSubscribed mNotSubscribed;
    Subscribed mSubscribed;
    Idle mIdle;
    Registering mRegistering;
    CheckSubscriptions mCheckSubscriptions;
    Subscribing mSubscribing;
    InformingReady mInformingReady;
    Started mStarted;
    std::list< shared_ptr<QueuedFsmEvent> > mfsmEventQueue;
    bool mFsmInjectInProgress;
    unsigned mEventCounter;
    StateHistory mCurrentStateTransitionExitsList;
    static const char * mEventName[NUMBER_OF_INJECTABLE_EVENTS];

};


#endif // __AppWithAttrCache_fsm_interface_h_

