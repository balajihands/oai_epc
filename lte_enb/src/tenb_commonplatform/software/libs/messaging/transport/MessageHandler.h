///////////////////////////////////////////////////////////////////////////////
//
// MessageHandler.h
//
// Message handler interface class, and message handling chain class.
//
// Allows a "message handler" class to be registered within a chain
// and each handler in the chain passed received messages sequentially
// until handled.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////


#ifndef __MessageHandler_h_
#define __MessageHandler_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////
#include <vector>
#include <boost/shared_ptr.hpp>


///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////
#include "MessageSerialisedData.h"

using namespace std;
using namespace boost;

namespace threeway
{

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////

class IMessageHandler
{
public:
    virtual ~IMessageHandler(){}

    /**
     * The MessageHandler is passed the message as a reference to (shared) pointer,
     * thus the message is modifiable (possibly deleted!).
     * Returning
     * true = message handling completed
     * false = message handling can continue
     */
    virtual bool MessageHandler(shared_ptr<MessageSerialisedData>&) = 0;
};

class MessageHandlingChain
{
public:
    MessageHandlingChain();
    ~MessageHandlingChain();

    /**
     * Handers get called in the order Added, and if "handled" the processing stops
     */
    void Add( IMessageHandler * handler, const string & name = "");

    void HandleMessage(shared_ptr<MessageSerialisedData> message);

private:
    class RegisteredHandler
    {
    public:
        IMessageHandler* m_handler;
        string m_name;
    };
    vector<RegisteredHandler> m_handlers;
};

}

#endif
