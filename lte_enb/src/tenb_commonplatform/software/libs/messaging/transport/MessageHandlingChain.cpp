///////////////////////////////////////////////////////////////////////////////
//
// MessageHandlingChain.cpp
//
// See header file for documentation.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////
#include <system/Trace.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////
#include "MessageHandler.h"


using namespace boost;

namespace threeway
{

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Class Functions
///////////////////////////////////////////////////////////////////////////////
MessageHandlingChain::MessageHandlingChain()
{
}

MessageHandlingChain::~MessageHandlingChain()
{
}
void MessageHandlingChain::Add( IMessageHandler * handler, const string & name)
{
    TRACE_PRINTF("New message handling interface (%s) added.", name.c_str() );

    RegisteredHandler rh;
    rh.m_handler = handler;
    rh.m_name = name;

    m_handlers.push_back(rh);
}

void MessageHandlingChain::HandleMessage(shared_ptr<MessageSerialisedData> message)
{
    bool messageHandled = false;

    TRACE_PRINTF_LEV(TRACE_VERBOSE, "MessageHandlingChain::HandleMessage(%s)...",(message?message->ToString().c_str():"<null-pointer>") );

    for ( vector<RegisteredHandler>::iterator handler = m_handlers.begin();
          (handler != m_handlers.end()) && (messageHandled == false) && (message != NULL);
          ++handler)
    {
        RegisteredHandler &rh = *handler;

        TRACE_PRINTF_LEV(TRACE_VERBOSE, "\t...trying \"%s\".",rh.m_name.c_str() );
        messageHandled = rh.m_handler->MessageHandler(message);
    }
}

}
