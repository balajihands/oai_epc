///////////////////////////////////////////////////////////////////////////////
//
// MibInterface.h
//
// External (client) interface to MIB.
//
// Copyright radisys Limited
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __MibInterface_h_
#define __MibInterface_h_

///////////////////////////////////////////////////////////////////////////////
// System Includes
///////////////////////////////////////////////////////////////////////////////

#include <vector>
#include <Radisys.h>
#include <boost/shared_ptr.hpp>
#include <mib-common/MibDN.h>
#include <mib-common/MibAttributeValues.h>
#include <mib-common/MibObjectDeleteResult.h>

///////////////////////////////////////////////////////////////////////////////
// Local Includes
///////////////////////////////////////////////////////////////////////////////

#include "MibObject.h"

///////////////////////////////////////////////////////////////////////////////
// Functions / Classes
///////////////////////////////////////////////////////////////////////////////

class MibInterface
{
public:
    virtual ~MibInterface() {};

    /**
     * Create an object with RDN with parent.
     * This object must be allowed to be a child (see the static const structures generated by the XML).
     * If it is not then it will ASSERT.
     * This also creates the associated attributes.
     *
     * @param parent            DN to add child to.  The root node is created with an empty DN.
     * @param childRdn          RDN of the child object.
     * @param attributeValues   Attributes to set on the new MO.
     */
    virtual void CreateObject(const MibDN& parent, const MibRDN & childRdn) = 0;
    virtual void CreateObject(const MibDN& parent, const MibRDN & childRdn, const MibAttributeValues& attributeValues) = 0;

    /**
     * Delete an object of given DN.
     * The object must exist and cannot have any children.
     *
     * @param dnToDelete DN of the MO to delete.  Must exist.
     */
    virtual MibObjectDeleteResult DeleteObject(const MibDN& dnToDelete) = 0;

    /**
     * Return a weak_ptr to the desired object from the root
     * If the desired object does not exist in the tree then it will assert.
     *
     * @param dn
     * @return boost::weak_ptr<MibObject>
     */
    virtual boost::weak_ptr<MibObject> FindMibObject(const MibDN& dn) const = 0;

    /**
     * Validate attributes.
     * TODO: Extend to be across multiple MOs?
     */
    virtual MibAttrValidationFailures ValidateAttributes(const MibDN& moDn, const MibAttributeValues& attributeValues, bool checkAccessClass) const = 0;

    /**
     * Set attributes on an MO.
     * Will assert on invalid values.  Use ValidateAttributes first!
     * TODO: Extend to be across multiple MOs?
     */
    virtual void SetAttributes(const MibDN& moDn, const MibAttributeValues& attributeValues, bool forced ) = 0;

    /**
     * Get attributes from an MO.
     * TODO: Extend to be across multiple MOs?
     */
    virtual void GetAttributes(const MibDN& moDn,
                               const MibAttributeIds& attributeIds,
                               MibAttributeValues& mibAttributeValues) const = 0;

    /**
     * Delete attributes on an MO.
     * TODO: Extend to be across multiple MOs?
     */
    virtual void DeleteAttributes(const MibDN& moDn,
                                  const MibAttributeIds& attributeIds) = 0;
};

#endif
